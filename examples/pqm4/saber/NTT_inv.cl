(* server@szu: -v -jobs 4 -isafety -no_carry_constraint -slicing -vo lex NTT_inv.cl
Parsing Cryptoline file:                [OK]            0.329706 seconds
Checking well-formedness:               [OK]            0.083293 seconds
Transforming to SSA form:               [OK]            0.052237 seconds
Rewriting assignments:                  [OK]            0.034519 seconds
Verifying program safety:               [OK]            2224.784620 seconds
Verifying range assertions:             [OK]            0.163513 seconds
Verifying range specification:          [OK]            1228.781389 seconds
Rewriting value-preserved casting:      [OK]            0.001040 seconds
Verifying algebraic assertions:         [OK]            133.741035 seconds
Verifying algebraic specification:      [OK]            60376.415195 seconds
Verification result:                    [OK]            63964.416907 seconds
*)


proc main (
  sint32 x,
  sint32 a000, sint32 a001, sint32 a002, sint32 a003,
  sint32 a004, sint32 a005, sint32 a006, sint32 a007,
  sint32 a008, sint32 a009, sint32 a010, sint32 a011,
  sint32 a012, sint32 a013, sint32 a014, sint32 a015,
  sint32 a016, sint32 a017, sint32 a018, sint32 a019,
  sint32 a020, sint32 a021, sint32 a022, sint32 a023,
  sint32 a024, sint32 a025, sint32 a026, sint32 a027,
  sint32 a028, sint32 a029, sint32 a030, sint32 a031,
  sint32 a032, sint32 a033, sint32 a034, sint32 a035,
  sint32 a036, sint32 a037, sint32 a038, sint32 a039,
  sint32 a040, sint32 a041, sint32 a042, sint32 a043,
  sint32 a044, sint32 a045, sint32 a046, sint32 a047,
  sint32 a048, sint32 a049, sint32 a050, sint32 a051,
  sint32 a052, sint32 a053, sint32 a054, sint32 a055,
  sint32 a056, sint32 a057, sint32 a058, sint32 a059,
  sint32 a060, sint32 a061, sint32 a062, sint32 a063,
  sint32 a064, sint32 a065, sint32 a066, sint32 a067,
  sint32 a068, sint32 a069, sint32 a070, sint32 a071,
  sint32 a072, sint32 a073, sint32 a074, sint32 a075,
  sint32 a076, sint32 a077, sint32 a078, sint32 a079,
  sint32 a080, sint32 a081, sint32 a082, sint32 a083,
  sint32 a084, sint32 a085, sint32 a086, sint32 a087,
  sint32 a088, sint32 a089, sint32 a090, sint32 a091,
  sint32 a092, sint32 a093, sint32 a094, sint32 a095,
  sint32 a096, sint32 a097, sint32 a098, sint32 a099,
  sint32 a100, sint32 a101, sint32 a102, sint32 a103,
  sint32 a104, sint32 a105, sint32 a106, sint32 a107,
  sint32 a108, sint32 a109, sint32 a110, sint32 a111,
  sint32 a112, sint32 a113, sint32 a114, sint32 a115,
  sint32 a116, sint32 a117, sint32 a118, sint32 a119,
  sint32 a120, sint32 a121, sint32 a122, sint32 a123,
  sint32 a124, sint32 a125, sint32 a126, sint32 a127,
  sint32 a128, sint32 a129, sint32 a130, sint32 a131,
  sint32 a132, sint32 a133, sint32 a134, sint32 a135,
  sint32 a136, sint32 a137, sint32 a138, sint32 a139,
  sint32 a140, sint32 a141, sint32 a142, sint32 a143,
  sint32 a144, sint32 a145, sint32 a146, sint32 a147,
  sint32 a148, sint32 a149, sint32 a150, sint32 a151,
  sint32 a152, sint32 a153, sint32 a154, sint32 a155,
  sint32 a156, sint32 a157, sint32 a158, sint32 a159,
  sint32 a160, sint32 a161, sint32 a162, sint32 a163,
  sint32 a164, sint32 a165, sint32 a166, sint32 a167,
  sint32 a168, sint32 a169, sint32 a170, sint32 a171,
  sint32 a172, sint32 a173, sint32 a174, sint32 a175,
  sint32 a176, sint32 a177, sint32 a178, sint32 a179,
  sint32 a180, sint32 a181, sint32 a182, sint32 a183,
  sint32 a184, sint32 a185, sint32 a186, sint32 a187,
  sint32 a188, sint32 a189, sint32 a190, sint32 a191,
  sint32 a192, sint32 a193, sint32 a194, sint32 a195,
  sint32 a196, sint32 a197, sint32 a198, sint32 a199,
  sint32 a200, sint32 a201, sint32 a202, sint32 a203,
  sint32 a204, sint32 a205, sint32 a206, sint32 a207,
  sint32 a208, sint32 a209, sint32 a210, sint32 a211,
  sint32 a212, sint32 a213, sint32 a214, sint32 a215,
  sint32 a216, sint32 a217, sint32 a218, sint32 a219,
  sint32 a220, sint32 a221, sint32 a222, sint32 a223,
  sint32 a224, sint32 a225, sint32 a226, sint32 a227,
  sint32 a228, sint32 a229, sint32 a230, sint32 a231,
  sint32 a232, sint32 a233, sint32 a234, sint32 a235,
  sint32 a236, sint32 a237, sint32 a238, sint32 a239,
  sint32 a240, sint32 a241, sint32 a242, sint32 a243,
  sint32 a244, sint32 a245, sint32 a246, sint32 a247,
  sint32 a248, sint32 a249, sint32 a250, sint32 a251,
  sint32 a252, sint32 a253, sint32 a254, sint32 a255
) =

{
  true
  &&
  (* range *)
  and [
    (-25166081)@32 <=s a000, a000 <s 25166081@32,
    (-25166081)@32 <=s a001, a001 <s 25166081@32,
    (-25166081)@32 <=s a002, a002 <s 25166081@32,
    (-25166081)@32 <=s a003, a003 <s 25166081@32,
    (-25166081)@32 <=s a004, a004 <s 25166081@32,
    (-25166081)@32 <=s a005, a005 <s 25166081@32,
    (-25166081)@32 <=s a006, a006 <s 25166081@32,
    (-25166081)@32 <=s a007, a007 <s 25166081@32,
    (-25166081)@32 <=s a008, a008 <s 25166081@32,
    (-25166081)@32 <=s a009, a009 <s 25166081@32,
    (-25166081)@32 <=s a010, a010 <s 25166081@32,
    (-25166081)@32 <=s a011, a011 <s 25166081@32,
    (-25166081)@32 <=s a012, a012 <s 25166081@32,
    (-25166081)@32 <=s a013, a013 <s 25166081@32,
    (-25166081)@32 <=s a014, a014 <s 25166081@32,
    (-25166081)@32 <=s a015, a015 <s 25166081@32,
    (-25166081)@32 <=s a016, a016 <s 25166081@32,
    (-25166081)@32 <=s a017, a017 <s 25166081@32,
    (-25166081)@32 <=s a018, a018 <s 25166081@32,
    (-25166081)@32 <=s a019, a019 <s 25166081@32,
    (-25166081)@32 <=s a020, a020 <s 25166081@32,
    (-25166081)@32 <=s a021, a021 <s 25166081@32,
    (-25166081)@32 <=s a022, a022 <s 25166081@32,
    (-25166081)@32 <=s a023, a023 <s 25166081@32,
    (-25166081)@32 <=s a024, a024 <s 25166081@32,
    (-25166081)@32 <=s a025, a025 <s 25166081@32,
    (-25166081)@32 <=s a026, a026 <s 25166081@32,
    (-25166081)@32 <=s a027, a027 <s 25166081@32,
    (-25166081)@32 <=s a028, a028 <s 25166081@32,
    (-25166081)@32 <=s a029, a029 <s 25166081@32,
    (-25166081)@32 <=s a030, a030 <s 25166081@32,
    (-25166081)@32 <=s a031, a031 <s 25166081@32,
    (-25166081)@32 <=s a032, a032 <s 25166081@32,
    (-25166081)@32 <=s a033, a033 <s 25166081@32,
    (-25166081)@32 <=s a034, a034 <s 25166081@32,
    (-25166081)@32 <=s a035, a035 <s 25166081@32,
    (-25166081)@32 <=s a036, a036 <s 25166081@32,
    (-25166081)@32 <=s a037, a037 <s 25166081@32,
    (-25166081)@32 <=s a038, a038 <s 25166081@32,
    (-25166081)@32 <=s a039, a039 <s 25166081@32,
    (-25166081)@32 <=s a040, a040 <s 25166081@32,
    (-25166081)@32 <=s a041, a041 <s 25166081@32,
    (-25166081)@32 <=s a042, a042 <s 25166081@32,
    (-25166081)@32 <=s a043, a043 <s 25166081@32,
    (-25166081)@32 <=s a044, a044 <s 25166081@32,
    (-25166081)@32 <=s a045, a045 <s 25166081@32,
    (-25166081)@32 <=s a046, a046 <s 25166081@32,
    (-25166081)@32 <=s a047, a047 <s 25166081@32,
    (-25166081)@32 <=s a048, a048 <s 25166081@32,
    (-25166081)@32 <=s a049, a049 <s 25166081@32,
    (-25166081)@32 <=s a050, a050 <s 25166081@32,
    (-25166081)@32 <=s a051, a051 <s 25166081@32,
    (-25166081)@32 <=s a052, a052 <s 25166081@32,
    (-25166081)@32 <=s a053, a053 <s 25166081@32,
    (-25166081)@32 <=s a054, a054 <s 25166081@32,
    (-25166081)@32 <=s a055, a055 <s 25166081@32,
    (-25166081)@32 <=s a056, a056 <s 25166081@32,
    (-25166081)@32 <=s a057, a057 <s 25166081@32,
    (-25166081)@32 <=s a058, a058 <s 25166081@32,
    (-25166081)@32 <=s a059, a059 <s 25166081@32,
    (-25166081)@32 <=s a060, a060 <s 25166081@32,
    (-25166081)@32 <=s a061, a061 <s 25166081@32,
    (-25166081)@32 <=s a062, a062 <s 25166081@32,
    (-25166081)@32 <=s a063, a063 <s 25166081@32,
    (-25166081)@32 <=s a064, a064 <s 25166081@32,
    (-25166081)@32 <=s a065, a065 <s 25166081@32,
    (-25166081)@32 <=s a066, a066 <s 25166081@32,
    (-25166081)@32 <=s a067, a067 <s 25166081@32,
    (-25166081)@32 <=s a068, a068 <s 25166081@32,
    (-25166081)@32 <=s a069, a069 <s 25166081@32,
    (-25166081)@32 <=s a070, a070 <s 25166081@32,
    (-25166081)@32 <=s a071, a071 <s 25166081@32,
    (-25166081)@32 <=s a072, a072 <s 25166081@32,
    (-25166081)@32 <=s a073, a073 <s 25166081@32,
    (-25166081)@32 <=s a074, a074 <s 25166081@32,
    (-25166081)@32 <=s a075, a075 <s 25166081@32,
    (-25166081)@32 <=s a076, a076 <s 25166081@32,
    (-25166081)@32 <=s a077, a077 <s 25166081@32,
    (-25166081)@32 <=s a078, a078 <s 25166081@32,
    (-25166081)@32 <=s a079, a079 <s 25166081@32,
    (-25166081)@32 <=s a080, a080 <s 25166081@32,
    (-25166081)@32 <=s a081, a081 <s 25166081@32,
    (-25166081)@32 <=s a082, a082 <s 25166081@32,
    (-25166081)@32 <=s a083, a083 <s 25166081@32,
    (-25166081)@32 <=s a084, a084 <s 25166081@32,
    (-25166081)@32 <=s a085, a085 <s 25166081@32,
    (-25166081)@32 <=s a086, a086 <s 25166081@32,
    (-25166081)@32 <=s a087, a087 <s 25166081@32,
    (-25166081)@32 <=s a088, a088 <s 25166081@32,
    (-25166081)@32 <=s a089, a089 <s 25166081@32,
    (-25166081)@32 <=s a090, a090 <s 25166081@32,
    (-25166081)@32 <=s a091, a091 <s 25166081@32,
    (-25166081)@32 <=s a092, a092 <s 25166081@32,
    (-25166081)@32 <=s a093, a093 <s 25166081@32,
    (-25166081)@32 <=s a094, a094 <s 25166081@32,
    (-25166081)@32 <=s a095, a095 <s 25166081@32,
    (-25166081)@32 <=s a096, a096 <s 25166081@32,
    (-25166081)@32 <=s a097, a097 <s 25166081@32,
    (-25166081)@32 <=s a098, a098 <s 25166081@32,
    (-25166081)@32 <=s a099, a099 <s 25166081@32,
    (-25166081)@32 <=s a100, a100 <s 25166081@32,
    (-25166081)@32 <=s a101, a101 <s 25166081@32,
    (-25166081)@32 <=s a102, a102 <s 25166081@32,
    (-25166081)@32 <=s a103, a103 <s 25166081@32,
    (-25166081)@32 <=s a104, a104 <s 25166081@32,
    (-25166081)@32 <=s a105, a105 <s 25166081@32,
    (-25166081)@32 <=s a106, a106 <s 25166081@32,
    (-25166081)@32 <=s a107, a107 <s 25166081@32,
    (-25166081)@32 <=s a108, a108 <s 25166081@32,
    (-25166081)@32 <=s a109, a109 <s 25166081@32,
    (-25166081)@32 <=s a110, a110 <s 25166081@32,
    (-25166081)@32 <=s a111, a111 <s 25166081@32,
    (-25166081)@32 <=s a112, a112 <s 25166081@32,
    (-25166081)@32 <=s a113, a113 <s 25166081@32,
    (-25166081)@32 <=s a114, a114 <s 25166081@32,
    (-25166081)@32 <=s a115, a115 <s 25166081@32,
    (-25166081)@32 <=s a116, a116 <s 25166081@32,
    (-25166081)@32 <=s a117, a117 <s 25166081@32,
    (-25166081)@32 <=s a118, a118 <s 25166081@32,
    (-25166081)@32 <=s a119, a119 <s 25166081@32,
    (-25166081)@32 <=s a120, a120 <s 25166081@32,
    (-25166081)@32 <=s a121, a121 <s 25166081@32,
    (-25166081)@32 <=s a122, a122 <s 25166081@32,
    (-25166081)@32 <=s a123, a123 <s 25166081@32,
    (-25166081)@32 <=s a124, a124 <s 25166081@32,
    (-25166081)@32 <=s a125, a125 <s 25166081@32,
    (-25166081)@32 <=s a126, a126 <s 25166081@32,
    (-25166081)@32 <=s a127, a127 <s 25166081@32,
    (-25166081)@32 <=s a128, a128 <s 25166081@32,
    (-25166081)@32 <=s a129, a129 <s 25166081@32,
    (-25166081)@32 <=s a130, a130 <s 25166081@32,
    (-25166081)@32 <=s a131, a131 <s 25166081@32,
    (-25166081)@32 <=s a132, a132 <s 25166081@32,
    (-25166081)@32 <=s a133, a133 <s 25166081@32,
    (-25166081)@32 <=s a134, a134 <s 25166081@32,
    (-25166081)@32 <=s a135, a135 <s 25166081@32,
    (-25166081)@32 <=s a136, a136 <s 25166081@32,
    (-25166081)@32 <=s a137, a137 <s 25166081@32,
    (-25166081)@32 <=s a138, a138 <s 25166081@32,
    (-25166081)@32 <=s a139, a139 <s 25166081@32,
    (-25166081)@32 <=s a140, a140 <s 25166081@32,
    (-25166081)@32 <=s a141, a141 <s 25166081@32,
    (-25166081)@32 <=s a142, a142 <s 25166081@32,
    (-25166081)@32 <=s a143, a143 <s 25166081@32,
    (-25166081)@32 <=s a144, a144 <s 25166081@32,
    (-25166081)@32 <=s a145, a145 <s 25166081@32,
    (-25166081)@32 <=s a146, a146 <s 25166081@32,
    (-25166081)@32 <=s a147, a147 <s 25166081@32,
    (-25166081)@32 <=s a148, a148 <s 25166081@32,
    (-25166081)@32 <=s a149, a149 <s 25166081@32,
    (-25166081)@32 <=s a150, a150 <s 25166081@32,
    (-25166081)@32 <=s a151, a151 <s 25166081@32,
    (-25166081)@32 <=s a152, a152 <s 25166081@32,
    (-25166081)@32 <=s a153, a153 <s 25166081@32,
    (-25166081)@32 <=s a154, a154 <s 25166081@32,
    (-25166081)@32 <=s a155, a155 <s 25166081@32,
    (-25166081)@32 <=s a156, a156 <s 25166081@32,
    (-25166081)@32 <=s a157, a157 <s 25166081@32,
    (-25166081)@32 <=s a158, a158 <s 25166081@32,
    (-25166081)@32 <=s a159, a159 <s 25166081@32,
    (-25166081)@32 <=s a160, a160 <s 25166081@32,
    (-25166081)@32 <=s a161, a161 <s 25166081@32,
    (-25166081)@32 <=s a162, a162 <s 25166081@32,
    (-25166081)@32 <=s a163, a163 <s 25166081@32,
    (-25166081)@32 <=s a164, a164 <s 25166081@32,
    (-25166081)@32 <=s a165, a165 <s 25166081@32,
    (-25166081)@32 <=s a166, a166 <s 25166081@32,
    (-25166081)@32 <=s a167, a167 <s 25166081@32,
    (-25166081)@32 <=s a168, a168 <s 25166081@32,
    (-25166081)@32 <=s a169, a169 <s 25166081@32,
    (-25166081)@32 <=s a170, a170 <s 25166081@32,
    (-25166081)@32 <=s a171, a171 <s 25166081@32,
    (-25166081)@32 <=s a172, a172 <s 25166081@32,
    (-25166081)@32 <=s a173, a173 <s 25166081@32,
    (-25166081)@32 <=s a174, a174 <s 25166081@32,
    (-25166081)@32 <=s a175, a175 <s 25166081@32,
    (-25166081)@32 <=s a176, a176 <s 25166081@32,
    (-25166081)@32 <=s a177, a177 <s 25166081@32,
    (-25166081)@32 <=s a178, a178 <s 25166081@32,
    (-25166081)@32 <=s a179, a179 <s 25166081@32,
    (-25166081)@32 <=s a180, a180 <s 25166081@32,
    (-25166081)@32 <=s a181, a181 <s 25166081@32,
    (-25166081)@32 <=s a182, a182 <s 25166081@32,
    (-25166081)@32 <=s a183, a183 <s 25166081@32,
    (-25166081)@32 <=s a184, a184 <s 25166081@32,
    (-25166081)@32 <=s a185, a185 <s 25166081@32,
    (-25166081)@32 <=s a186, a186 <s 25166081@32,
    (-25166081)@32 <=s a187, a187 <s 25166081@32,
    (-25166081)@32 <=s a188, a188 <s 25166081@32,
    (-25166081)@32 <=s a189, a189 <s 25166081@32,
    (-25166081)@32 <=s a190, a190 <s 25166081@32,
    (-25166081)@32 <=s a191, a191 <s 25166081@32,
    (-25166081)@32 <=s a192, a192 <s 25166081@32,
    (-25166081)@32 <=s a193, a193 <s 25166081@32,
    (-25166081)@32 <=s a194, a194 <s 25166081@32,
    (-25166081)@32 <=s a195, a195 <s 25166081@32,
    (-25166081)@32 <=s a196, a196 <s 25166081@32,
    (-25166081)@32 <=s a197, a197 <s 25166081@32,
    (-25166081)@32 <=s a198, a198 <s 25166081@32,
    (-25166081)@32 <=s a199, a199 <s 25166081@32,
    (-25166081)@32 <=s a200, a200 <s 25166081@32,
    (-25166081)@32 <=s a201, a201 <s 25166081@32,
    (-25166081)@32 <=s a202, a202 <s 25166081@32,
    (-25166081)@32 <=s a203, a203 <s 25166081@32,
    (-25166081)@32 <=s a204, a204 <s 25166081@32,
    (-25166081)@32 <=s a205, a205 <s 25166081@32,
    (-25166081)@32 <=s a206, a206 <s 25166081@32,
    (-25166081)@32 <=s a207, a207 <s 25166081@32,
    (-25166081)@32 <=s a208, a208 <s 25166081@32,
    (-25166081)@32 <=s a209, a209 <s 25166081@32,
    (-25166081)@32 <=s a210, a210 <s 25166081@32,
    (-25166081)@32 <=s a211, a211 <s 25166081@32,
    (-25166081)@32 <=s a212, a212 <s 25166081@32,
    (-25166081)@32 <=s a213, a213 <s 25166081@32,
    (-25166081)@32 <=s a214, a214 <s 25166081@32,
    (-25166081)@32 <=s a215, a215 <s 25166081@32,
    (-25166081)@32 <=s a216, a216 <s 25166081@32,
    (-25166081)@32 <=s a217, a217 <s 25166081@32,
    (-25166081)@32 <=s a218, a218 <s 25166081@32,
    (-25166081)@32 <=s a219, a219 <s 25166081@32,
    (-25166081)@32 <=s a220, a220 <s 25166081@32,
    (-25166081)@32 <=s a221, a221 <s 25166081@32,
    (-25166081)@32 <=s a222, a222 <s 25166081@32,
    (-25166081)@32 <=s a223, a223 <s 25166081@32,
    (-25166081)@32 <=s a224, a224 <s 25166081@32,
    (-25166081)@32 <=s a225, a225 <s 25166081@32,
    (-25166081)@32 <=s a226, a226 <s 25166081@32,
    (-25166081)@32 <=s a227, a227 <s 25166081@32,
    (-25166081)@32 <=s a228, a228 <s 25166081@32,
    (-25166081)@32 <=s a229, a229 <s 25166081@32,
    (-25166081)@32 <=s a230, a230 <s 25166081@32,
    (-25166081)@32 <=s a231, a231 <s 25166081@32,
    (-25166081)@32 <=s a232, a232 <s 25166081@32,
    (-25166081)@32 <=s a233, a233 <s 25166081@32,
    (-25166081)@32 <=s a234, a234 <s 25166081@32,
    (-25166081)@32 <=s a235, a235 <s 25166081@32,
    (-25166081)@32 <=s a236, a236 <s 25166081@32,
    (-25166081)@32 <=s a237, a237 <s 25166081@32,
    (-25166081)@32 <=s a238, a238 <s 25166081@32,
    (-25166081)@32 <=s a239, a239 <s 25166081@32,
    (-25166081)@32 <=s a240, a240 <s 25166081@32,
    (-25166081)@32 <=s a241, a241 <s 25166081@32,
    (-25166081)@32 <=s a242, a242 <s 25166081@32,
    (-25166081)@32 <=s a243, a243 <s 25166081@32,
    (-25166081)@32 <=s a244, a244 <s 25166081@32,
    (-25166081)@32 <=s a245, a245 <s 25166081@32,
    (-25166081)@32 <=s a246, a246 <s 25166081@32,
    (-25166081)@32 <=s a247, a247 <s 25166081@32,
    (-25166081)@32 <=s a248, a248 <s 25166081@32,
    (-25166081)@32 <=s a249, a249 <s 25166081@32,
    (-25166081)@32 <=s a250, a250 <s 25166081@32,
    (-25166081)@32 <=s a251, a251 <s 25166081@32,
    (-25166081)@32 <=s a252, a252 <s 25166081@32,
    (-25166081)@32 <=s a253, a253 <s 25166081@32,
    (-25166081)@32 <=s a254, a254 <s 25166081@32,
    (-25166081)@32 <=s a255, a255 <s 25166081@32
  ]
}

(* === params === *)

mov MOD 25166081@sint32;
mov Mprime 41877759@sint32;

(* === inits === *)

(* src *)
mov L0x2001a248 a000;  mov L0x2001a24c a001;
mov L0x2001a250 a002;  mov L0x2001a254 a003;
mov L0x2001a258 a004;  mov L0x2001a25c a005;
mov L0x2001a260 a006;  mov L0x2001a264 a007;
mov L0x2001a268 a008;  mov L0x2001a26c a009;
mov L0x2001a270 a010;  mov L0x2001a274 a011;
mov L0x2001a278 a012;  mov L0x2001a27c a013;
mov L0x2001a280 a014;  mov L0x2001a284 a015;
mov L0x2001a288 a016;  mov L0x2001a28c a017;
mov L0x2001a290 a018;  mov L0x2001a294 a019;
mov L0x2001a298 a020;  mov L0x2001a29c a021;
mov L0x2001a2a0 a022;  mov L0x2001a2a4 a023;
mov L0x2001a2a8 a024;  mov L0x2001a2ac a025;
mov L0x2001a2b0 a026;  mov L0x2001a2b4 a027;
mov L0x2001a2b8 a028;  mov L0x2001a2bc a029;
mov L0x2001a2c0 a030;  mov L0x2001a2c4 a031;
mov L0x2001a2c8 a032;  mov L0x2001a2cc a033;
mov L0x2001a2d0 a034;  mov L0x2001a2d4 a035;
mov L0x2001a2d8 a036;  mov L0x2001a2dc a037;
mov L0x2001a2e0 a038;  mov L0x2001a2e4 a039;
mov L0x2001a2e8 a040;  mov L0x2001a2ec a041;
mov L0x2001a2f0 a042;  mov L0x2001a2f4 a043;
mov L0x2001a2f8 a044;  mov L0x2001a2fc a045;
mov L0x2001a300 a046;  mov L0x2001a304 a047;
mov L0x2001a308 a048;  mov L0x2001a30c a049;
mov L0x2001a310 a050;  mov L0x2001a314 a051;
mov L0x2001a318 a052;  mov L0x2001a31c a053;
mov L0x2001a320 a054;  mov L0x2001a324 a055;
mov L0x2001a328 a056;  mov L0x2001a32c a057;
mov L0x2001a330 a058;  mov L0x2001a334 a059;
mov L0x2001a338 a060;  mov L0x2001a33c a061;
mov L0x2001a340 a062;  mov L0x2001a344 a063;
mov L0x2001a348 a064;  mov L0x2001a34c a065;
mov L0x2001a350 a066;  mov L0x2001a354 a067;
mov L0x2001a358 a068;  mov L0x2001a35c a069;
mov L0x2001a360 a070;  mov L0x2001a364 a071;
mov L0x2001a368 a072;  mov L0x2001a36c a073;
mov L0x2001a370 a074;  mov L0x2001a374 a075;
mov L0x2001a378 a076;  mov L0x2001a37c a077;
mov L0x2001a380 a078;  mov L0x2001a384 a079;
mov L0x2001a388 a080;  mov L0x2001a38c a081;
mov L0x2001a390 a082;  mov L0x2001a394 a083;
mov L0x2001a398 a084;  mov L0x2001a39c a085;
mov L0x2001a3a0 a086;  mov L0x2001a3a4 a087;
mov L0x2001a3a8 a088;  mov L0x2001a3ac a089;
mov L0x2001a3b0 a090;  mov L0x2001a3b4 a091;
mov L0x2001a3b8 a092;  mov L0x2001a3bc a093;
mov L0x2001a3c0 a094;  mov L0x2001a3c4 a095;
mov L0x2001a3c8 a096;  mov L0x2001a3cc a097;
mov L0x2001a3d0 a098;  mov L0x2001a3d4 a099;
mov L0x2001a3d8 a100;  mov L0x2001a3dc a101;
mov L0x2001a3e0 a102;  mov L0x2001a3e4 a103;
mov L0x2001a3e8 a104;  mov L0x2001a3ec a105;
mov L0x2001a3f0 a106;  mov L0x2001a3f4 a107;
mov L0x2001a3f8 a108;  mov L0x2001a3fc a109;
mov L0x2001a400 a110;  mov L0x2001a404 a111;
mov L0x2001a408 a112;  mov L0x2001a40c a113;
mov L0x2001a410 a114;  mov L0x2001a414 a115;
mov L0x2001a418 a116;  mov L0x2001a41c a117;
mov L0x2001a420 a118;  mov L0x2001a424 a119;
mov L0x2001a428 a120;  mov L0x2001a42c a121;
mov L0x2001a430 a122;  mov L0x2001a434 a123;
mov L0x2001a438 a124;  mov L0x2001a43c a125;
mov L0x2001a440 a126;  mov L0x2001a444 a127;
mov L0x2001a448 a128;  mov L0x2001a44c a129;
mov L0x2001a450 a130;  mov L0x2001a454 a131;
mov L0x2001a458 a132;  mov L0x2001a45c a133;
mov L0x2001a460 a134;  mov L0x2001a464 a135;
mov L0x2001a468 a136;  mov L0x2001a46c a137;
mov L0x2001a470 a138;  mov L0x2001a474 a139;
mov L0x2001a478 a140;  mov L0x2001a47c a141;
mov L0x2001a480 a142;  mov L0x2001a484 a143;
mov L0x2001a488 a144;  mov L0x2001a48c a145;
mov L0x2001a490 a146;  mov L0x2001a494 a147;
mov L0x2001a498 a148;  mov L0x2001a49c a149;
mov L0x2001a4a0 a150;  mov L0x2001a4a4 a151;
mov L0x2001a4a8 a152;  mov L0x2001a4ac a153;
mov L0x2001a4b0 a154;  mov L0x2001a4b4 a155;
mov L0x2001a4b8 a156;  mov L0x2001a4bc a157;
mov L0x2001a4c0 a158;  mov L0x2001a4c4 a159;
mov L0x2001a4c8 a160;  mov L0x2001a4cc a161;
mov L0x2001a4d0 a162;  mov L0x2001a4d4 a163;
mov L0x2001a4d8 a164;  mov L0x2001a4dc a165;
mov L0x2001a4e0 a166;  mov L0x2001a4e4 a167;
mov L0x2001a4e8 a168;  mov L0x2001a4ec a169;
mov L0x2001a4f0 a170;  mov L0x2001a4f4 a171;
mov L0x2001a4f8 a172;  mov L0x2001a4fc a173;
mov L0x2001a500 a174;  mov L0x2001a504 a175;
mov L0x2001a508 a176;  mov L0x2001a50c a177;
mov L0x2001a510 a178;  mov L0x2001a514 a179;
mov L0x2001a518 a180;  mov L0x2001a51c a181;
mov L0x2001a520 a182;  mov L0x2001a524 a183;
mov L0x2001a528 a184;  mov L0x2001a52c a185;
mov L0x2001a530 a186;  mov L0x2001a534 a187;
mov L0x2001a538 a188;  mov L0x2001a53c a189;
mov L0x2001a540 a190;  mov L0x2001a544 a191;
mov L0x2001a548 a192;  mov L0x2001a54c a193;
mov L0x2001a550 a194;  mov L0x2001a554 a195;
mov L0x2001a558 a196;  mov L0x2001a55c a197;
mov L0x2001a560 a198;  mov L0x2001a564 a199;
mov L0x2001a568 a200;  mov L0x2001a56c a201;
mov L0x2001a570 a202;  mov L0x2001a574 a203;
mov L0x2001a578 a204;  mov L0x2001a57c a205;
mov L0x2001a580 a206;  mov L0x2001a584 a207;
mov L0x2001a588 a208;  mov L0x2001a58c a209;
mov L0x2001a590 a210;  mov L0x2001a594 a211;
mov L0x2001a598 a212;  mov L0x2001a59c a213;
mov L0x2001a5a0 a214;  mov L0x2001a5a4 a215;
mov L0x2001a5a8 a216;  mov L0x2001a5ac a217;
mov L0x2001a5b0 a218;  mov L0x2001a5b4 a219;
mov L0x2001a5b8 a220;  mov L0x2001a5bc a221;
mov L0x2001a5c0 a222;  mov L0x2001a5c4 a223;
mov L0x2001a5c8 a224;  mov L0x2001a5cc a225;
mov L0x2001a5d0 a226;  mov L0x2001a5d4 a227;
mov L0x2001a5d8 a228;  mov L0x2001a5dc a229;
mov L0x2001a5e0 a230;  mov L0x2001a5e4 a231;
mov L0x2001a5e8 a232;  mov L0x2001a5ec a233;
mov L0x2001a5f0 a234;  mov L0x2001a5f4 a235;
mov L0x2001a5f8 a236;  mov L0x2001a5fc a237;
mov L0x2001a600 a238;  mov L0x2001a604 a239;
mov L0x2001a608 a240;  mov L0x2001a60c a241;
mov L0x2001a610 a242;  mov L0x2001a614 a243;
mov L0x2001a618 a244;  mov L0x2001a61c a245;
mov L0x2001a620 a246;  mov L0x2001a624 a247;
mov L0x2001a628 a248;  mov L0x2001a62c a249;
mov L0x2001a630 a250;  mov L0x2001a634 a251;
mov L0x2001a638 a252;  mov L0x2001a63c a253;
mov L0x2001a640 a254;  mov L0x2001a644 a255;

(* inv_roots *)
mov L0x800d1d4 (-11182464)@sint32;  mov L0x800d1d8 (  1203107)@sint32;
mov L0x800d1dc ( 10203707)@sint32;  mov L0x800d1e0 ( -5735629)@sint32;
mov L0x800d1e4 (  4194664)@sint32;  mov L0x800d1e8 ( -1776511)@sint32;
mov L0x800d1ec ( -6577444)@sint32;  mov L0x800d1f0 (  2559945)@sint32;
mov L0x800d1f4 (  2665284)@sint32;  mov L0x800d1f8 (   908786)@sint32;
mov L0x800d1fc (-12174351)@sint32;  mov L0x800d200 (  9233574)@sint32;
mov L0x800d204 (  1069349)@sint32;  mov L0x800d208 ( -5184115)@sint32;
mov L0x800d20c ( -2695651)@sint32;  mov L0x800d210 ( 12030083)@sint32;
mov L0x800d214 (-11450840)@sint32;  mov L0x800d218 (  6236460)@sint32;
mov L0x800d21c (   614272)@sint32;  mov L0x800d220 (  1134236)@sint32;
mov L0x800d224 ( -5318976)@sint32;  mov L0x800d228 (  -647681)@sint32;
mov L0x800d22c ( -2733537)@sint32;  mov L0x800d230 (  9344183)@sint32;
mov L0x800d234 (-10910265)@sint32;  mov L0x800d238 (  9502337)@sint32;
mov L0x800d23c (-10505644)@sint32;  mov L0x800d240 (    42688)@sint32;
mov L0x800d244 ( -4034819)@sint32;  mov L0x800d248 (  8060830)@sint32;
mov L0x800d24c (  1988985)@sint32;  mov L0x800d250 ( -8693725)@sint32;
mov L0x800d254 (-10171507)@sint32;  mov L0x800d258 (  6726360)@sint32;
mov L0x800d25c ( 10319196)@sint32;  mov L0x800d260 (  7261676)@sint32;
mov L0x800d264 (  6267356)@sint32;  mov L0x800d268 (  4293923)@sint32;
mov L0x800d26c ( -2510833)@sint32;  mov L0x800d270 ( -6931502)@sint32;
mov L0x800d274 (-11980428)@sint32;  mov L0x800d278 (  9567042)@sint32;
mov L0x800d27c ( 11637995)@sint32;  mov L0x800d280 ( -7146164)@sint32;
mov L0x800d284 (  4810496)@sint32;  mov L0x800d288 ( 11307548)@sint32;
mov L0x800d28c (  5563113)@sint32;  mov L0x800d290 (  3261033)@sint32;
mov L0x800d294 ( -4092287)@sint32;  mov L0x800d298 (  9084979)@sint32;
mov L0x800d29c ( -1686897)@sint32;  mov L0x800d2a0 (  7944926)@sint32;
mov L0x800d2a4 ( -2723061)@sint32;  mov L0x800d2a8 (  7460755)@sint32;
mov L0x800d2ac (  8693794)@sint32;  mov L0x800d2b0 (   588496)@sint32;
mov L0x800d2b4 ( -7301157)@sint32;  mov L0x800d2b8 ( -5669200)@sint32;
mov L0x800d2bc (  4359117)@sint32;  mov L0x800d2c0 (   819256)@sint32;
mov L0x800d2c4 ( -8064557)@sint32;  mov L0x800d2c8 (-10575964)@sint32;
mov L0x800d2cc (  9600669)@sint32;

(* regs *)
nondet sp@uint32;
mov L0x20019690 sp;
nondet r0@uint32;
nondet r1@uint32;
mov r2 Mprime;
mov r3 MOD;

(* inp_polys *)
ghost inp_poly_0@bit :
  inp_poly_0 * inp_poly_0 = 
    L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
    L0x2001a250 * (x**2) + L0x2001a254 * (x**3)
  && true;

ghost inp_poly_1@bit :
  inp_poly_1 * inp_poly_1 = 
    L0x2001a258 * (x**0) + L0x2001a25c * (x**1) + 
    L0x2001a260 * (x**2) + L0x2001a264 * (x**3)
  && true;

ghost inp_poly_2@bit :
  inp_poly_2 * inp_poly_2 = 
    L0x2001a268 * (x**0) + L0x2001a26c * (x**1) + 
    L0x2001a270 * (x**2) + L0x2001a274 * (x**3)
  && true;

ghost inp_poly_3@bit :
  inp_poly_3 * inp_poly_3 = 
    L0x2001a278 * (x**0) + L0x2001a27c * (x**1) + 
    L0x2001a280 * (x**2) + L0x2001a284 * (x**3)
  && true;

ghost inp_poly_4@bit :
  inp_poly_4 * inp_poly_4 = 
    L0x2001a288 * (x**0) + L0x2001a28c * (x**1) + 
    L0x2001a290 * (x**2) + L0x2001a294 * (x**3)
  && true;

ghost inp_poly_5@bit :
  inp_poly_5 * inp_poly_5 = 
    L0x2001a298 * (x**0) + L0x2001a29c * (x**1) + 
    L0x2001a2a0 * (x**2) + L0x2001a2a4 * (x**3)
  && true;

ghost inp_poly_6@bit :
  inp_poly_6 * inp_poly_6 = 
    L0x2001a2a8 * (x**0) + L0x2001a2ac * (x**1) + 
    L0x2001a2b0 * (x**2) + L0x2001a2b4 * (x**3)
  && true;

ghost inp_poly_7@bit :
  inp_poly_7 * inp_poly_7 = 
    L0x2001a2b8 * (x**0) + L0x2001a2bc * (x**1) + 
    L0x2001a2c0 * (x**2) + L0x2001a2c4 * (x**3)
  && true;

ghost inp_poly_8@bit :
  inp_poly_8 * inp_poly_8 = 
    L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
    L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3)
  && true;

ghost inp_poly_9@bit :
  inp_poly_9 * inp_poly_9 = 
    L0x2001a2d8 * (x**0) + L0x2001a2dc * (x**1) + 
    L0x2001a2e0 * (x**2) + L0x2001a2e4 * (x**3)
  && true;

ghost inp_poly_10@bit :
  inp_poly_10 * inp_poly_10 = 
    L0x2001a2e8 * (x**0) + L0x2001a2ec * (x**1) + 
    L0x2001a2f0 * (x**2) + L0x2001a2f4 * (x**3)
  && true;

ghost inp_poly_11@bit :
  inp_poly_11 * inp_poly_11 = 
    L0x2001a2f8 * (x**0) + L0x2001a2fc * (x**1) + 
    L0x2001a300 * (x**2) + L0x2001a304 * (x**3)
  && true;

ghost inp_poly_12@bit :
  inp_poly_12 * inp_poly_12 = 
    L0x2001a308 * (x**0) + L0x2001a30c * (x**1) + 
    L0x2001a310 * (x**2) + L0x2001a314 * (x**3)
  && true;

ghost inp_poly_13@bit :
  inp_poly_13 * inp_poly_13 = 
    L0x2001a318 * (x**0) + L0x2001a31c * (x**1) + 
    L0x2001a320 * (x**2) + L0x2001a324 * (x**3)
  && true;

ghost inp_poly_14@bit :
  inp_poly_14 * inp_poly_14 = 
    L0x2001a328 * (x**0) + L0x2001a32c * (x**1) + 
    L0x2001a330 * (x**2) + L0x2001a334 * (x**3)
  && true;

ghost inp_poly_15@bit :
  inp_poly_15 * inp_poly_15 = 
    L0x2001a338 * (x**0) + L0x2001a33c * (x**1) + 
    L0x2001a340 * (x**2) + L0x2001a344 * (x**3)
  && true;

ghost inp_poly_16@bit :
  inp_poly_16 * inp_poly_16 = 
    L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
    L0x2001a350 * (x**2) + L0x2001a354 * (x**3)
  && true;

ghost inp_poly_17@bit :
  inp_poly_17 * inp_poly_17 = 
    L0x2001a358 * (x**0) + L0x2001a35c * (x**1) + 
    L0x2001a360 * (x**2) + L0x2001a364 * (x**3)
  && true;

ghost inp_poly_18@bit :
  inp_poly_18 * inp_poly_18 = 
    L0x2001a368 * (x**0) + L0x2001a36c * (x**1) + 
    L0x2001a370 * (x**2) + L0x2001a374 * (x**3)
  && true;

ghost inp_poly_19@bit :
  inp_poly_19 * inp_poly_19 = 
    L0x2001a378 * (x**0) + L0x2001a37c * (x**1) + 
    L0x2001a380 * (x**2) + L0x2001a384 * (x**3)
  && true;

ghost inp_poly_20@bit :
  inp_poly_20 * inp_poly_20 = 
    L0x2001a388 * (x**0) + L0x2001a38c * (x**1) + 
    L0x2001a390 * (x**2) + L0x2001a394 * (x**3)
  && true;

ghost inp_poly_21@bit :
  inp_poly_21 * inp_poly_21 = 
    L0x2001a398 * (x**0) + L0x2001a39c * (x**1) + 
    L0x2001a3a0 * (x**2) + L0x2001a3a4 * (x**3)
  && true;

ghost inp_poly_22@bit :
  inp_poly_22 * inp_poly_22 = 
    L0x2001a3a8 * (x**0) + L0x2001a3ac * (x**1) + 
    L0x2001a3b0 * (x**2) + L0x2001a3b4 * (x**3)
  && true;

ghost inp_poly_23@bit :
  inp_poly_23 * inp_poly_23 = 
    L0x2001a3b8 * (x**0) + L0x2001a3bc * (x**1) + 
    L0x2001a3c0 * (x**2) + L0x2001a3c4 * (x**3)
  && true;

ghost inp_poly_24@bit :
  inp_poly_24 * inp_poly_24 = 
    L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
    L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3)
  && true;

ghost inp_poly_25@bit :
  inp_poly_25 * inp_poly_25 = 
    L0x2001a3d8 * (x**0) + L0x2001a3dc * (x**1) + 
    L0x2001a3e0 * (x**2) + L0x2001a3e4 * (x**3)
  && true;

ghost inp_poly_26@bit :
  inp_poly_26 * inp_poly_26 = 
    L0x2001a3e8 * (x**0) + L0x2001a3ec * (x**1) + 
    L0x2001a3f0 * (x**2) + L0x2001a3f4 * (x**3)
  && true;

ghost inp_poly_27@bit :
  inp_poly_27 * inp_poly_27 = 
    L0x2001a3f8 * (x**0) + L0x2001a3fc * (x**1) + 
    L0x2001a400 * (x**2) + L0x2001a404 * (x**3)
  && true;

ghost inp_poly_28@bit :
  inp_poly_28 * inp_poly_28 = 
    L0x2001a408 * (x**0) + L0x2001a40c * (x**1) + 
    L0x2001a410 * (x**2) + L0x2001a414 * (x**3)
  && true;

ghost inp_poly_29@bit :
  inp_poly_29 * inp_poly_29 = 
    L0x2001a418 * (x**0) + L0x2001a41c * (x**1) + 
    L0x2001a420 * (x**2) + L0x2001a424 * (x**3)
  && true;

ghost inp_poly_30@bit :
  inp_poly_30 * inp_poly_30 = 
    L0x2001a428 * (x**0) + L0x2001a42c * (x**1) + 
    L0x2001a430 * (x**2) + L0x2001a434 * (x**3)
  && true;

ghost inp_poly_31@bit :
  inp_poly_31 * inp_poly_31 = 
    L0x2001a438 * (x**0) + L0x2001a43c * (x**1) + 
    L0x2001a440 * (x**2) + L0x2001a444 * (x**3)
  && true;

ghost inp_poly_32@bit :
  inp_poly_32 * inp_poly_32 = 
    L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
    L0x2001a450 * (x**2) + L0x2001a454 * (x**3)
  && true;

ghost inp_poly_33@bit :
  inp_poly_33 * inp_poly_33 = 
    L0x2001a458 * (x**0) + L0x2001a45c * (x**1) + 
    L0x2001a460 * (x**2) + L0x2001a464 * (x**3)
  && true;

ghost inp_poly_34@bit :
  inp_poly_34 * inp_poly_34 = 
    L0x2001a468 * (x**0) + L0x2001a46c * (x**1) + 
    L0x2001a470 * (x**2) + L0x2001a474 * (x**3)
  && true;

ghost inp_poly_35@bit :
  inp_poly_35 * inp_poly_35 = 
    L0x2001a478 * (x**0) + L0x2001a47c * (x**1) + 
    L0x2001a480 * (x**2) + L0x2001a484 * (x**3)
  && true;

ghost inp_poly_36@bit :
  inp_poly_36 * inp_poly_36 = 
    L0x2001a488 * (x**0) + L0x2001a48c * (x**1) + 
    L0x2001a490 * (x**2) + L0x2001a494 * (x**3)
  && true;

ghost inp_poly_37@bit :
  inp_poly_37 * inp_poly_37 = 
    L0x2001a498 * (x**0) + L0x2001a49c * (x**1) + 
    L0x2001a4a0 * (x**2) + L0x2001a4a4 * (x**3)
  && true;

ghost inp_poly_38@bit :
  inp_poly_38 * inp_poly_38 = 
    L0x2001a4a8 * (x**0) + L0x2001a4ac * (x**1) + 
    L0x2001a4b0 * (x**2) + L0x2001a4b4 * (x**3)
  && true;

ghost inp_poly_39@bit :
  inp_poly_39 * inp_poly_39 = 
    L0x2001a4b8 * (x**0) + L0x2001a4bc * (x**1) + 
    L0x2001a4c0 * (x**2) + L0x2001a4c4 * (x**3)
  && true;

ghost inp_poly_40@bit :
  inp_poly_40 * inp_poly_40 = 
    L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
    L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3)
  && true;

ghost inp_poly_41@bit :
  inp_poly_41 * inp_poly_41 = 
    L0x2001a4d8 * (x**0) + L0x2001a4dc * (x**1) + 
    L0x2001a4e0 * (x**2) + L0x2001a4e4 * (x**3)
  && true;

ghost inp_poly_42@bit :
  inp_poly_42 * inp_poly_42 = 
    L0x2001a4e8 * (x**0) + L0x2001a4ec * (x**1) + 
    L0x2001a4f0 * (x**2) + L0x2001a4f4 * (x**3)
  && true;

ghost inp_poly_43@bit :
  inp_poly_43 * inp_poly_43 = 
    L0x2001a4f8 * (x**0) + L0x2001a4fc * (x**1) + 
    L0x2001a500 * (x**2) + L0x2001a504 * (x**3)
  && true;

ghost inp_poly_44@bit :
  inp_poly_44 * inp_poly_44 = 
    L0x2001a508 * (x**0) + L0x2001a50c * (x**1) + 
    L0x2001a510 * (x**2) + L0x2001a514 * (x**3)
  && true;

ghost inp_poly_45@bit :
  inp_poly_45 * inp_poly_45 = 
    L0x2001a518 * (x**0) + L0x2001a51c * (x**1) + 
    L0x2001a520 * (x**2) + L0x2001a524 * (x**3)
  && true;

ghost inp_poly_46@bit :
  inp_poly_46 * inp_poly_46 = 
    L0x2001a528 * (x**0) + L0x2001a52c * (x**1) + 
    L0x2001a530 * (x**2) + L0x2001a534 * (x**3)
  && true;

ghost inp_poly_47@bit :
  inp_poly_47 * inp_poly_47 = 
    L0x2001a538 * (x**0) + L0x2001a53c * (x**1) + 
    L0x2001a540 * (x**2) + L0x2001a544 * (x**3)
  && true;

ghost inp_poly_48@bit :
  inp_poly_48 * inp_poly_48 = 
    L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
    L0x2001a550 * (x**2) + L0x2001a554 * (x**3)
  && true;

ghost inp_poly_49@bit :
  inp_poly_49 * inp_poly_49 = 
    L0x2001a558 * (x**0) + L0x2001a55c * (x**1) + 
    L0x2001a560 * (x**2) + L0x2001a564 * (x**3)
  && true;

ghost inp_poly_50@bit :
  inp_poly_50 * inp_poly_50 = 
    L0x2001a568 * (x**0) + L0x2001a56c * (x**1) + 
    L0x2001a570 * (x**2) + L0x2001a574 * (x**3)
  && true;

ghost inp_poly_51@bit :
  inp_poly_51 * inp_poly_51 = 
    L0x2001a578 * (x**0) + L0x2001a57c * (x**1) + 
    L0x2001a580 * (x**2) + L0x2001a584 * (x**3)
  && true;

ghost inp_poly_52@bit :
  inp_poly_52 * inp_poly_52 = 
    L0x2001a588 * (x**0) + L0x2001a58c * (x**1) + 
    L0x2001a590 * (x**2) + L0x2001a594 * (x**3)
  && true;

ghost inp_poly_53@bit :
  inp_poly_53 * inp_poly_53 = 
    L0x2001a598 * (x**0) + L0x2001a59c * (x**1) + 
    L0x2001a5a0 * (x**2) + L0x2001a5a4 * (x**3)
  && true;

ghost inp_poly_54@bit :
  inp_poly_54 * inp_poly_54 = 
    L0x2001a5a8 * (x**0) + L0x2001a5ac * (x**1) + 
    L0x2001a5b0 * (x**2) + L0x2001a5b4 * (x**3)
  && true;

ghost inp_poly_55@bit :
  inp_poly_55 * inp_poly_55 = 
    L0x2001a5b8 * (x**0) + L0x2001a5bc * (x**1) + 
    L0x2001a5c0 * (x**2) + L0x2001a5c4 * (x**3)
  && true;

ghost inp_poly_56@bit :
  inp_poly_56 * inp_poly_56 = 
    L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
    L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3)
  && true;

ghost inp_poly_57@bit :
  inp_poly_57 * inp_poly_57 = 
    L0x2001a5d8 * (x**0) + L0x2001a5dc * (x**1) + 
    L0x2001a5e0 * (x**2) + L0x2001a5e4 * (x**3)
  && true;

ghost inp_poly_58@bit :
  inp_poly_58 * inp_poly_58 = 
    L0x2001a5e8 * (x**0) + L0x2001a5ec * (x**1) + 
    L0x2001a5f0 * (x**2) + L0x2001a5f4 * (x**3)
  && true;

ghost inp_poly_59@bit :
  inp_poly_59 * inp_poly_59 = 
    L0x2001a5f8 * (x**0) + L0x2001a5fc * (x**1) + 
    L0x2001a600 * (x**2) + L0x2001a604 * (x**3)
  && true;

ghost inp_poly_60@bit :
  inp_poly_60 * inp_poly_60 = 
    L0x2001a608 * (x**0) + L0x2001a60c * (x**1) + 
    L0x2001a610 * (x**2) + L0x2001a614 * (x**3)
  && true;

ghost inp_poly_61@bit :
  inp_poly_61 * inp_poly_61 = 
    L0x2001a618 * (x**0) + L0x2001a61c * (x**1) + 
    L0x2001a620 * (x**2) + L0x2001a624 * (x**3)
  && true;

ghost inp_poly_62@bit :
  inp_poly_62 * inp_poly_62 = 
    L0x2001a628 * (x**0) + L0x2001a62c * (x**1) + 
    L0x2001a630 * (x**2) + L0x2001a634 * (x**3)
  && true;

ghost inp_poly_63@bit :
  inp_poly_63 * inp_poly_63 = 
    L0x2001a638 * (x**0) + L0x2001a63c * (x**1) + 
    L0x2001a640 * (x**2) + L0x2001a644 * (x**3)
  && true;



(* vldr	s0, [sp]                                   #! EA = L0x20019690; PC = 0x800453c *)
mov s0 L0x20019690;
(* mov.w	r4, r0                                    #! PC = 0x8004544 *)
mov r4 r0;
(* add.w	r1, r1, #28                               #! PC = 0x8004548 *)
adds discard r1 r1 28@uint32;
(* vmov	r0, s0                                     #! PC = 0x800454c *)
mov r0 s0;
(* vmov	s0, s1, r4, r1                             #! PC = 0x8004550 *)
mov s0 r4;
mov s1 r1;
(* movw	r4, #43947	; 0xabab                        #! PC = 0x8004554 *)
mov r4 43947@sint32;
(* movt	r4, #128	; 0x80                            #! PC = 0x8004558 *)
shl tmp 128@sint32 16;
add r4 r4 tmp;
(* rsb	r4, r4, #0                                  #! PC = 0x800455c *)
sub r4 0@sint32 r4;
(* movw	r5, #22072	; 0x5638                        #! PC = 0x8004560 *)
mov r5 22072@sint32;
(* movt	r5, #117	; 0x75                            #! PC = 0x8004564 *)
shl tmp 117@sint32 16;
add r5 r5 tmp;
(* vmov	s14, s15, r4, r5                           #! PC = 0x8004568 *)
mov s14 r4;
mov s15 r5;
(* add.w	r12, r0, #1024	; 0x400                    #! PC = 0x800456c *)
adds discard r12 r0 1024@uint32;
(* vmov	s2, r12                                    #! PC = 0x8004570 *)
mov s2 r12;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d1f0; PC = 0x8004578 *)
mov s4 L0x800d1f0;
mov s5 L0x800d1f4;
mov s6 L0x800d1f8;
mov s7 L0x800d1fc;
mov s8 L0x800d200;
mov s9 L0x800d204;
mov s10 L0x800d208;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a248; Value = 0xffaeb075; PC = 0x8004588 *)
mov r4 L0x2001a248;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a258; Value = 0xfe78007b; PC = 0x800458c *)
mov r5 L0x2001a258;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a268; Value = 0xffe8fd09; PC = 0x8004590 *)
mov r6 L0x2001a268;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a278; Value = 0x00563d38; PC = 0x8004594 *)
mov r7 L0x2001a278;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a288; Value = 0x001ba6d3; PC = 0x8004598 *)
mov r8 L0x2001a288;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a298; Value = 0xffbb2f25; PC = 0x800459c *)
mov r9 L0x2001a298;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2a8; Value = 0xff7a3e9f; PC = 0x80045a0 *)
mov r10 L0x2001a2a8;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2b8; Value = 0xff713ee4; PC = 0x80045a4 *)
mov r11 L0x2001a2b8;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a258; PC = 0x800469c *)
mov L0x2001a258 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a268; PC = 0x80046a0 *)
mov L0x2001a268 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a278; PC = 0x80046a4 *)
mov L0x2001a278 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a288; PC = 0x80046a8 *)
mov L0x2001a288 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a298; PC = 0x80046ac *)
mov L0x2001a298 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2a8; PC = 0x80046b0 *)
mov L0x2001a2a8 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2b8; PC = 0x80046b4 *)
mov L0x2001a2b8 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a248; PC = 0x80046b8 *)
mov L0x2001a248 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a24c; Value = 0x003bd605; PC = 0x80046bc *)
mov r4 L0x2001a24c;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a25c; Value = 0x00426810; PC = 0x80046c0 *)
mov r5 L0x2001a25c;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a26c; Value = 0xffcf0a32; PC = 0x80046c4 *)
mov r6 L0x2001a26c;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a27c; Value = 0x0004dc13; PC = 0x80046c8 *)
mov r7 L0x2001a27c;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a28c; Value = 0xffd6ca75; PC = 0x80046cc *)
mov r8 L0x2001a28c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a29c; Value = 0x0063bc99; PC = 0x80046d0 *)
mov r9 L0x2001a29c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2ac; Value = 0xff2b6c95; PC = 0x80046d4 *)
mov r10 L0x2001a2ac;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2bc; Value = 0x00d2e64a; PC = 0x80046d8 *)
mov r11 L0x2001a2bc;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a25c; PC = 0x80047d0 *)
mov L0x2001a25c r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a26c; PC = 0x80047d4 *)
mov L0x2001a26c r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a27c; PC = 0x80047d8 *)
mov L0x2001a27c r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a28c; PC = 0x80047dc *)
mov L0x2001a28c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a29c; PC = 0x80047e0 *)
mov L0x2001a29c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2ac; PC = 0x80047e4 *)
mov L0x2001a2ac r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2bc; PC = 0x80047e8 *)
mov L0x2001a2bc r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a24c; PC = 0x80047ec *)
mov L0x2001a24c r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a250; Value = 0xffbeb10f; PC = 0x8004588 *)
mov r4 L0x2001a250;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a260; Value = 0x00658e38; PC = 0x800458c *)
mov r5 L0x2001a260;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a270; Value = 0xff969351; PC = 0x8004590 *)
mov r6 L0x2001a270;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a280; Value = 0xff1aba76; PC = 0x8004594 *)
mov r7 L0x2001a280;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a290; Value = 0x009b4f6f; PC = 0x8004598 *)
mov r8 L0x2001a290;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a2a0; Value = 0xffd22a23; PC = 0x800459c *)
mov r9 L0x2001a2a0;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2b0; Value = 0xfec0bc56; PC = 0x80045a0 *)
mov r10 L0x2001a2b0;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2c0; Value = 0xff8c888a; PC = 0x80045a4 *)
mov r11 L0x2001a2c0;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a260; PC = 0x800469c *)
mov L0x2001a260 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a270; PC = 0x80046a0 *)
mov L0x2001a270 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a280; PC = 0x80046a4 *)
mov L0x2001a280 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a290; PC = 0x80046a8 *)
mov L0x2001a290 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a2a0; PC = 0x80046ac *)
mov L0x2001a2a0 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2b0; PC = 0x80046b0 *)
mov L0x2001a2b0 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2c0; PC = 0x80046b4 *)
mov L0x2001a2c0 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a250; PC = 0x80046b8 *)
mov L0x2001a250 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a254; Value = 0xff97bc37; PC = 0x80046bc *)
mov r4 L0x2001a254;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a264; Value = 0xfe8364a8; PC = 0x80046c0 *)
mov r5 L0x2001a264;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a274; Value = 0xff2a4471; PC = 0x80046c4 *)
mov r6 L0x2001a274;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a284; Value = 0xff74a7cc; PC = 0x80046c8 *)
mov r7 L0x2001a284;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a294; Value = 0x00321066; PC = 0x80046cc *)
mov r8 L0x2001a294;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a2a4; Value = 0x00b07dbe; PC = 0x80046d0 *)
mov r9 L0x2001a2a4;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2b4; Value = 0xffbb053f; PC = 0x80046d4 *)
mov r10 L0x2001a2b4;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2c4; Value = 0x0032cbd9; PC = 0x80046d8 *)
mov r11 L0x2001a2c4;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a264; PC = 0x80047d0 *)
mov L0x2001a264 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a274; PC = 0x80047d4 *)
mov L0x2001a274 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a284; PC = 0x80047d8 *)
mov L0x2001a284 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a294; PC = 0x80047dc *)
mov L0x2001a294 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a2a4; PC = 0x80047e0 *)
mov L0x2001a2a4 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a2b4; PC = 0x80047e4 *)
mov L0x2001a2b4 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a2c4; PC = 0x80047e8 *)
mov L0x2001a2c4 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a254; PC = 0x80047ec *)
mov L0x2001a254 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d20c; PC = 0x8004578 *)
mov s4 L0x800d20c;
mov s5 L0x800d210;
mov s6 L0x800d214;
mov s7 L0x800d218;
mov s8 L0x800d21c;
mov s9 L0x800d220;
mov s10 L0x800d224;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a2c8; Value = 0x006a85f7; PC = 0x8004588 *)
mov r4 L0x2001a2c8;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a2d8; Value = 0x00b14561; PC = 0x800458c *)
mov r5 L0x2001a2d8;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a2e8; Value = 0xff78314d; PC = 0x8004590 *)
mov r6 L0x2001a2e8;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a2f8; Value = 0x004b8a67; PC = 0x8004594 *)
mov r7 L0x2001a2f8;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a308; Value = 0xff1165f1; PC = 0x8004598 *)
mov r8 L0x2001a308;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a318; Value = 0x009db259; PC = 0x800459c *)
mov r9 L0x2001a318;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a328; Value = 0xff7b1036; PC = 0x80045a0 *)
mov r10 L0x2001a328;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a338; Value = 0x014ee8d8; PC = 0x80045a4 *)
mov r11 L0x2001a338;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a2d8; PC = 0x800469c *)
mov L0x2001a2d8 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a2e8; PC = 0x80046a0 *)
mov L0x2001a2e8 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a2f8; PC = 0x80046a4 *)
mov L0x2001a2f8 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a308; PC = 0x80046a8 *)
mov L0x2001a308 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a318; PC = 0x80046ac *)
mov L0x2001a318 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a328; PC = 0x80046b0 *)
mov L0x2001a328 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a338; PC = 0x80046b4 *)
mov L0x2001a338 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a2c8; PC = 0x80046b8 *)
mov L0x2001a2c8 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a2cc; Value = 0x00d2b3e0; PC = 0x80046bc *)
mov r4 L0x2001a2cc;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a2dc; Value = 0x0026e512; PC = 0x80046c0 *)
mov r5 L0x2001a2dc;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a2ec; Value = 0xffe4a1cf; PC = 0x80046c4 *)
mov r6 L0x2001a2ec;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a2fc; Value = 0x003005db; PC = 0x80046c8 *)
mov r7 L0x2001a2fc;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a30c; Value = 0x004e3ea4; PC = 0x80046cc *)
mov r8 L0x2001a30c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a31c; Value = 0x0015697e; PC = 0x80046d0 *)
mov r9 L0x2001a31c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a32c; Value = 0xffd0e805; PC = 0x80046d4 *)
mov r10 L0x2001a32c;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a33c; Value = 0x010b609d; PC = 0x80046d8 *)
mov r11 L0x2001a33c;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a2dc; PC = 0x80047d0 *)
mov L0x2001a2dc r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a2ec; PC = 0x80047d4 *)
mov L0x2001a2ec r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a2fc; PC = 0x80047d8 *)
mov L0x2001a2fc r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a30c; PC = 0x80047dc *)
mov L0x2001a30c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a31c; PC = 0x80047e0 *)
mov L0x2001a31c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a32c; PC = 0x80047e4 *)
mov L0x2001a32c r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a33c; PC = 0x80047e8 *)
mov L0x2001a33c r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a2cc; PC = 0x80047ec *)
mov L0x2001a2cc r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a2d0; Value = 0xffb4fc9d; PC = 0x8004588 *)
mov r4 L0x2001a2d0;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a2e0; Value = 0x00cfe60b; PC = 0x800458c *)
mov r5 L0x2001a2e0;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a2f0; Value = 0x00be308a; PC = 0x8004590 *)
mov r6 L0x2001a2f0;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a300; Value = 0xfff6f387; PC = 0x8004594 *)
mov r7 L0x2001a300;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a310; Value = 0xffd1fc9a; PC = 0x8004598 *)
mov r8 L0x2001a310;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a320; Value = 0xfec6707e; PC = 0x800459c *)
mov r9 L0x2001a320;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a330; Value = 0x001762d4; PC = 0x80045a0 *)
mov r10 L0x2001a330;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a340; Value = 0x001f143d; PC = 0x80045a4 *)
mov r11 L0x2001a340;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a2e0; PC = 0x800469c *)
mov L0x2001a2e0 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a2f0; PC = 0x80046a0 *)
mov L0x2001a2f0 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a300; PC = 0x80046a4 *)
mov L0x2001a300 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a310; PC = 0x80046a8 *)
mov L0x2001a310 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a320; PC = 0x80046ac *)
mov L0x2001a320 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a330; PC = 0x80046b0 *)
mov L0x2001a330 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a340; PC = 0x80046b4 *)
mov L0x2001a340 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a2d0; PC = 0x80046b8 *)
mov L0x2001a2d0 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a2d4; Value = 0x004deea4; PC = 0x80046bc *)
mov r4 L0x2001a2d4;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a2e4; Value = 0xfefaedc4; PC = 0x80046c0 *)
mov r5 L0x2001a2e4;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a2f4; Value = 0x00f80493; PC = 0x80046c4 *)
mov r6 L0x2001a2f4;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a304; Value = 0xff99a3d6; PC = 0x80046c8 *)
mov r7 L0x2001a304;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a314; Value = 0xffc42f5d; PC = 0x80046cc *)
mov r8 L0x2001a314;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a324; Value = 0xff01c72c; PC = 0x80046d0 *)
mov r9 L0x2001a324;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a334; Value = 0xfebe4a54; PC = 0x80046d4 *)
mov r10 L0x2001a334;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a344; Value = 0x0115bb43; PC = 0x80046d8 *)
mov r11 L0x2001a344;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a2e4; PC = 0x80047d0 *)
mov L0x2001a2e4 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a2f4; PC = 0x80047d4 *)
mov L0x2001a2f4 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a304; PC = 0x80047d8 *)
mov L0x2001a304 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a314; PC = 0x80047dc *)
mov L0x2001a314 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a324; PC = 0x80047e0 *)
mov L0x2001a324 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a334; PC = 0x80047e4 *)
mov L0x2001a334 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a344; PC = 0x80047e8 *)
mov L0x2001a344 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a2d4; PC = 0x80047ec *)
mov L0x2001a2d4 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d228; PC = 0x8004578 *)
mov s4 L0x800d228;
mov s5 L0x800d22c;
mov s6 L0x800d230;
mov s7 L0x800d234;
mov s8 L0x800d238;
mov s9 L0x800d23c;
mov s10 L0x800d240;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a348; Value = 0xff8806e2; PC = 0x8004588 *)
mov r4 L0x2001a348;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a358; Value = 0x0013c6f1; PC = 0x800458c *)
mov r5 L0x2001a358;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a368; Value = 0xff9a1a19; PC = 0x8004590 *)
mov r6 L0x2001a368;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a378; Value = 0xff3b0490; PC = 0x8004594 *)
mov r7 L0x2001a378;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a388; Value = 0xffa96cb8; PC = 0x8004598 *)
mov r8 L0x2001a388;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a398; Value = 0xff4db125; PC = 0x800459c *)
mov r9 L0x2001a398;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3a8; Value = 0xffc0f8b8; PC = 0x80045a0 *)
mov r10 L0x2001a3a8;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3b8; Value = 0x0155eab0; PC = 0x80045a4 *)
mov r11 L0x2001a3b8;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a358; PC = 0x800469c *)
mov L0x2001a358 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a368; PC = 0x80046a0 *)
mov L0x2001a368 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a378; PC = 0x80046a4 *)
mov L0x2001a378 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a388; PC = 0x80046a8 *)
mov L0x2001a388 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a398; PC = 0x80046ac *)
mov L0x2001a398 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3a8; PC = 0x80046b0 *)
mov L0x2001a3a8 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3b8; PC = 0x80046b4 *)
mov L0x2001a3b8 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a348; PC = 0x80046b8 *)
mov L0x2001a348 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a34c; Value = 0x00188e70; PC = 0x80046bc *)
mov r4 L0x2001a34c;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a35c; Value = 0xff8b218f; PC = 0x80046c0 *)
mov r5 L0x2001a35c;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a36c; Value = 0x01102078; PC = 0x80046c4 *)
mov r6 L0x2001a36c;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a37c; Value = 0xff101b71; PC = 0x80046c8 *)
mov r7 L0x2001a37c;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a38c; Value = 0x0026f79e; PC = 0x80046cc *)
mov r8 L0x2001a38c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a39c; Value = 0xff652ba4; PC = 0x80046d0 *)
mov r9 L0x2001a39c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3ac; Value = 0x0003aa22; PC = 0x80046d4 *)
mov r10 L0x2001a3ac;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3bc; Value = 0xff086796; PC = 0x80046d8 *)
mov r11 L0x2001a3bc;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a35c; PC = 0x80047d0 *)
mov L0x2001a35c r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a36c; PC = 0x80047d4 *)
mov L0x2001a36c r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a37c; PC = 0x80047d8 *)
mov L0x2001a37c r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a38c; PC = 0x80047dc *)
mov L0x2001a38c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a39c; PC = 0x80047e0 *)
mov L0x2001a39c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3ac; PC = 0x80047e4 *)
mov L0x2001a3ac r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3bc; PC = 0x80047e8 *)
mov L0x2001a3bc r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a34c; PC = 0x80047ec *)
mov L0x2001a34c r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a350; Value = 0xfffb6a3f; PC = 0x8004588 *)
mov r4 L0x2001a350;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a360; Value = 0xffdd1485; PC = 0x800458c *)
mov r5 L0x2001a360;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a370; Value = 0xff9e3022; PC = 0x8004590 *)
mov r6 L0x2001a370;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a380; Value = 0x00b1cada; PC = 0x8004594 *)
mov r7 L0x2001a380;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a390; Value = 0x000810c2; PC = 0x8004598 *)
mov r8 L0x2001a390;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a3a0; Value = 0x00ecc23f; PC = 0x800459c *)
mov r9 L0x2001a3a0;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3b0; Value = 0x0024011f; PC = 0x80045a0 *)
mov r10 L0x2001a3b0;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3c0; Value = 0xff985138; PC = 0x80045a4 *)
mov r11 L0x2001a3c0;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a360; PC = 0x800469c *)
mov L0x2001a360 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a370; PC = 0x80046a0 *)
mov L0x2001a370 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a380; PC = 0x80046a4 *)
mov L0x2001a380 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a390; PC = 0x80046a8 *)
mov L0x2001a390 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a3a0; PC = 0x80046ac *)
mov L0x2001a3a0 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3b0; PC = 0x80046b0 *)
mov L0x2001a3b0 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3c0; PC = 0x80046b4 *)
mov L0x2001a3c0 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a350; PC = 0x80046b8 *)
mov L0x2001a350 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a354; Value = 0xff92ad34; PC = 0x80046bc *)
mov r4 L0x2001a354;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a364; Value = 0xff38d55d; PC = 0x80046c0 *)
mov r5 L0x2001a364;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a374; Value = 0x00e5cf4e; PC = 0x80046c4 *)
mov r6 L0x2001a374;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a384; Value = 0x00e2813e; PC = 0x80046c8 *)
mov r7 L0x2001a384;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a394; Value = 0x00ce2581; PC = 0x80046cc *)
mov r8 L0x2001a394;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a3a4; Value = 0xfe9138a3; PC = 0x80046d0 *)
mov r9 L0x2001a3a4;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3b4; Value = 0x0042042b; PC = 0x80046d4 *)
mov r10 L0x2001a3b4;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3c4; Value = 0xff5cd3ae; PC = 0x80046d8 *)
mov r11 L0x2001a3c4;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a364; PC = 0x80047d0 *)
mov L0x2001a364 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a374; PC = 0x80047d4 *)
mov L0x2001a374 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a384; PC = 0x80047d8 *)
mov L0x2001a384 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a394; PC = 0x80047dc *)
mov L0x2001a394 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a3a4; PC = 0x80047e0 *)
mov L0x2001a3a4 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a3b4; PC = 0x80047e4 *)
mov L0x2001a3b4 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a3c4; PC = 0x80047e8 *)
mov L0x2001a3c4 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a354; PC = 0x80047ec *)
mov L0x2001a354 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d244; PC = 0x8004578 *)
mov s4 L0x800d244;
mov s5 L0x800d248;
mov s6 L0x800d24c;
mov s7 L0x800d250;
mov s8 L0x800d254;
mov s9 L0x800d258;
mov s10 L0x800d25c;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a3c8; Value = 0xffb17ee9; PC = 0x8004588 *)
mov r4 L0x2001a3c8;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a3d8; Value = 0x006d4351; PC = 0x800458c *)
mov r5 L0x2001a3d8;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a3e8; Value = 0x00789de6; PC = 0x8004590 *)
mov r6 L0x2001a3e8;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a3f8; Value = 0xfff7536a; PC = 0x8004594 *)
mov r7 L0x2001a3f8;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a408; Value = 0xfff187b2; PC = 0x8004598 *)
mov r8 L0x2001a408;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a418; Value = 0x00cdd0a4; PC = 0x800459c *)
mov r9 L0x2001a418;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a428; Value = 0x00a4a498; PC = 0x80045a0 *)
mov r10 L0x2001a428;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a438; Value = 0xff8f67d1; PC = 0x80045a4 *)
mov r11 L0x2001a438;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a3d8; PC = 0x800469c *)
mov L0x2001a3d8 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a3e8; PC = 0x80046a0 *)
mov L0x2001a3e8 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a3f8; PC = 0x80046a4 *)
mov L0x2001a3f8 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a408; PC = 0x80046a8 *)
mov L0x2001a408 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a418; PC = 0x80046ac *)
mov L0x2001a418 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a428; PC = 0x80046b0 *)
mov L0x2001a428 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a438; PC = 0x80046b4 *)
mov L0x2001a438 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a3c8; PC = 0x80046b8 *)
mov L0x2001a3c8 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a3cc; Value = 0xff0cca67; PC = 0x80046bc *)
mov r4 L0x2001a3cc;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a3dc; Value = 0xffaa594e; PC = 0x80046c0 *)
mov r5 L0x2001a3dc;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a3ec; Value = 0x00e31587; PC = 0x80046c4 *)
mov r6 L0x2001a3ec;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a3fc; Value = 0x005e4e35; PC = 0x80046c8 *)
mov r7 L0x2001a3fc;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a40c; Value = 0xfea952ae; PC = 0x80046cc *)
mov r8 L0x2001a40c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a41c; Value = 0xfec387fa; PC = 0x80046d0 *)
mov r9 L0x2001a41c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a42c; Value = 0xfebbc137; PC = 0x80046d4 *)
mov r10 L0x2001a42c;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a43c; Value = 0x0030bd85; PC = 0x80046d8 *)
mov r11 L0x2001a43c;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a3dc; PC = 0x80047d0 *)
mov L0x2001a3dc r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a3ec; PC = 0x80047d4 *)
mov L0x2001a3ec r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a3fc; PC = 0x80047d8 *)
mov L0x2001a3fc r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a40c; PC = 0x80047dc *)
mov L0x2001a40c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a41c; PC = 0x80047e0 *)
mov L0x2001a41c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a42c; PC = 0x80047e4 *)
mov L0x2001a42c r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a43c; PC = 0x80047e8 *)
mov L0x2001a43c r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a3cc; PC = 0x80047ec *)
mov L0x2001a3cc r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a3d0; Value = 0x0000161b; PC = 0x8004588 *)
mov r4 L0x2001a3d0;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a3e0; Value = 0xff39f5ba; PC = 0x800458c *)
mov r5 L0x2001a3e0;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a3f0; Value = 0xfead518d; PC = 0x8004590 *)
mov r6 L0x2001a3f0;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a400; Value = 0xffe2ec7b; PC = 0x8004594 *)
mov r7 L0x2001a400;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a410; Value = 0xffbf9811; PC = 0x8004598 *)
mov r8 L0x2001a410;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a420; Value = 0x00c731c8; PC = 0x800459c *)
mov r9 L0x2001a420;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a430; Value = 0x00694d59; PC = 0x80045a0 *)
mov r10 L0x2001a430;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a440; Value = 0x009be8f4; PC = 0x80045a4 *)
mov r11 L0x2001a440;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a3e0; PC = 0x800469c *)
mov L0x2001a3e0 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a3f0; PC = 0x80046a0 *)
mov L0x2001a3f0 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a400; PC = 0x80046a4 *)
mov L0x2001a400 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a410; PC = 0x80046a8 *)
mov L0x2001a410 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a420; PC = 0x80046ac *)
mov L0x2001a420 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a430; PC = 0x80046b0 *)
mov L0x2001a430 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a440; PC = 0x80046b4 *)
mov L0x2001a440 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a3d0; PC = 0x80046b8 *)
mov L0x2001a3d0 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a3d4; Value = 0x00737734; PC = 0x80046bc *)
mov r4 L0x2001a3d4;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a3e4; Value = 0x010293f2; PC = 0x80046c0 *)
mov r5 L0x2001a3e4;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a3f4; Value = 0xff8854c4; PC = 0x80046c4 *)
mov r6 L0x2001a3f4;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a404; Value = 0x009cce0a; PC = 0x80046c8 *)
mov r7 L0x2001a404;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a414; Value = 0xff5c6670; PC = 0x80046cc *)
mov r8 L0x2001a414;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a424; Value = 0x005b8240; PC = 0x80046d0 *)
mov r9 L0x2001a424;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a434; Value = 0xff796d1b; PC = 0x80046d4 *)
mov r10 L0x2001a434;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a444; Value = 0x004810bb; PC = 0x80046d8 *)
mov r11 L0x2001a444;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a3e4; PC = 0x80047d0 *)
mov L0x2001a3e4 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a3f4; PC = 0x80047d4 *)
mov L0x2001a3f4 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a404; PC = 0x80047d8 *)
mov L0x2001a404 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a414; PC = 0x80047dc *)
mov L0x2001a414 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a424; PC = 0x80047e0 *)
mov L0x2001a424 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a434; PC = 0x80047e4 *)
mov L0x2001a434 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a444; PC = 0x80047e8 *)
mov L0x2001a444 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a3d4; PC = 0x80047ec *)
mov L0x2001a3d4 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d260; PC = 0x8004578 *)
mov s4 L0x800d260;
mov s5 L0x800d264;
mov s6 L0x800d268;
mov s7 L0x800d26c;
mov s8 L0x800d270;
mov s9 L0x800d274;
mov s10 L0x800d278;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a448; Value = 0xff2b23d6; PC = 0x8004588 *)
mov r4 L0x2001a448;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a458; Value = 0xff7271d9; PC = 0x800458c *)
mov r5 L0x2001a458;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a468; Value = 0x00207055; PC = 0x8004590 *)
mov r6 L0x2001a468;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a478; Value = 0xffd6dba5; PC = 0x8004594 *)
mov r7 L0x2001a478;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a488; Value = 0xfe8e9660; PC = 0x8004598 *)
mov r8 L0x2001a488;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a498; Value = 0x00603d66; PC = 0x800459c *)
mov r9 L0x2001a498;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4a8; Value = 0x00278fb6; PC = 0x80045a0 *)
mov r10 L0x2001a4a8;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4b8; Value = 0x003c2d8e; PC = 0x80045a4 *)
mov r11 L0x2001a4b8;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a458; PC = 0x800469c *)
mov L0x2001a458 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a468; PC = 0x80046a0 *)
mov L0x2001a468 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a478; PC = 0x80046a4 *)
mov L0x2001a478 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a488; PC = 0x80046a8 *)
mov L0x2001a488 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a498; PC = 0x80046ac *)
mov L0x2001a498 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4a8; PC = 0x80046b0 *)
mov L0x2001a4a8 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4b8; PC = 0x80046b4 *)
mov L0x2001a4b8 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a448; PC = 0x80046b8 *)
mov L0x2001a448 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a44c; Value = 0xffc78715; PC = 0x80046bc *)
mov r4 L0x2001a44c;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a45c; Value = 0xff65cc9a; PC = 0x80046c0 *)
mov r5 L0x2001a45c;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a46c; Value = 0x00179994; PC = 0x80046c4 *)
mov r6 L0x2001a46c;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a47c; Value = 0x00c2aaff; PC = 0x80046c8 *)
mov r7 L0x2001a47c;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a48c; Value = 0x0014232f; PC = 0x80046cc *)
mov r8 L0x2001a48c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a49c; Value = 0xffa1c9e5; PC = 0x80046d0 *)
mov r9 L0x2001a49c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4ac; Value = 0x00b6f126; PC = 0x80046d4 *)
mov r10 L0x2001a4ac;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4bc; Value = 0x000227e3; PC = 0x80046d8 *)
mov r11 L0x2001a4bc;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a45c; PC = 0x80047d0 *)
mov L0x2001a45c r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a46c; PC = 0x80047d4 *)
mov L0x2001a46c r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a47c; PC = 0x80047d8 *)
mov L0x2001a47c r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a48c; PC = 0x80047dc *)
mov L0x2001a48c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a49c; PC = 0x80047e0 *)
mov L0x2001a49c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4ac; PC = 0x80047e4 *)
mov L0x2001a4ac r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4bc; PC = 0x80047e8 *)
mov L0x2001a4bc r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a44c; PC = 0x80047ec *)
mov L0x2001a44c r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a450; Value = 0xffaa933e; PC = 0x8004588 *)
mov r4 L0x2001a450;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a460; Value = 0x0017e9b0; PC = 0x800458c *)
mov r5 L0x2001a460;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a470; Value = 0xff733f85; PC = 0x8004590 *)
mov r6 L0x2001a470;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a480; Value = 0xfea1b510; PC = 0x8004594 *)
mov r7 L0x2001a480;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a490; Value = 0x00566e5b; PC = 0x8004598 *)
mov r8 L0x2001a490;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a4a0; Value = 0x00ac3c72; PC = 0x800459c *)
mov r9 L0x2001a4a0;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4b0; Value = 0xff25e5fb; PC = 0x80045a0 *)
mov r10 L0x2001a4b0;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4c0; Value = 0xff6b8aba; PC = 0x80045a4 *)
mov r11 L0x2001a4c0;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a460; PC = 0x800469c *)
mov L0x2001a460 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a470; PC = 0x80046a0 *)
mov L0x2001a470 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a480; PC = 0x80046a4 *)
mov L0x2001a480 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a490; PC = 0x80046a8 *)
mov L0x2001a490 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a4a0; PC = 0x80046ac *)
mov L0x2001a4a0 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4b0; PC = 0x80046b0 *)
mov L0x2001a4b0 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4c0; PC = 0x80046b4 *)
mov L0x2001a4c0 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a450; PC = 0x80046b8 *)
mov L0x2001a450 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a454; Value = 0xffbfdd30; PC = 0x80046bc *)
mov r4 L0x2001a454;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a464; Value = 0xff122f19; PC = 0x80046c0 *)
mov r5 L0x2001a464;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a474; Value = 0xff9f1a9f; PC = 0x80046c4 *)
mov r6 L0x2001a474;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a484; Value = 0xffd48cd1; PC = 0x80046c8 *)
mov r7 L0x2001a484;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a494; Value = 0xffdd81a9; PC = 0x80046cc *)
mov r8 L0x2001a494;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a4a4; Value = 0x004a8022; PC = 0x80046d0 *)
mov r9 L0x2001a4a4;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4b4; Value = 0x00e039ee; PC = 0x80046d4 *)
mov r10 L0x2001a4b4;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4c4; Value = 0x00f5ff3e; PC = 0x80046d8 *)
mov r11 L0x2001a4c4;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a464; PC = 0x80047d0 *)
mov L0x2001a464 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a474; PC = 0x80047d4 *)
mov L0x2001a474 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a484; PC = 0x80047d8 *)
mov L0x2001a484 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a494; PC = 0x80047dc *)
mov L0x2001a494 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a4a4; PC = 0x80047e0 *)
mov L0x2001a4a4 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a4b4; PC = 0x80047e4 *)
mov L0x2001a4b4 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a4c4; PC = 0x80047e8 *)
mov L0x2001a4c4 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a454; PC = 0x80047ec *)
mov L0x2001a454 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d27c; PC = 0x8004578 *)
mov s4 L0x800d27c;
mov s5 L0x800d280;
mov s6 L0x800d284;
mov s7 L0x800d288;
mov s8 L0x800d28c;
mov s9 L0x800d290;
mov s10 L0x800d294;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a4c8; Value = 0xfed2d7bb; PC = 0x8004588 *)
mov r4 L0x2001a4c8;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a4d8; Value = 0x007989aa; PC = 0x800458c *)
mov r5 L0x2001a4d8;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a4e8; Value = 0x000de8c5; PC = 0x8004590 *)
mov r6 L0x2001a4e8;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a4f8; Value = 0x01ca16cd; PC = 0x8004594 *)
mov r7 L0x2001a4f8;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a508; Value = 0xffb04c53; PC = 0x8004598 *)
mov r8 L0x2001a508;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a518; Value = 0xfe988007; PC = 0x800459c *)
mov r9 L0x2001a518;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a528; Value = 0x0086ab76; PC = 0x80045a0 *)
mov r10 L0x2001a528;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a538; Value = 0x003e07f4; PC = 0x80045a4 *)
mov r11 L0x2001a538;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a4d8; PC = 0x800469c *)
mov L0x2001a4d8 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a4e8; PC = 0x80046a0 *)
mov L0x2001a4e8 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a4f8; PC = 0x80046a4 *)
mov L0x2001a4f8 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a508; PC = 0x80046a8 *)
mov L0x2001a508 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a518; PC = 0x80046ac *)
mov L0x2001a518 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a528; PC = 0x80046b0 *)
mov L0x2001a528 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a538; PC = 0x80046b4 *)
mov L0x2001a538 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a4c8; PC = 0x80046b8 *)
mov L0x2001a4c8 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a4cc; Value = 0x0019e5dc; PC = 0x80046bc *)
mov r4 L0x2001a4cc;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a4dc; Value = 0xffbe137d; PC = 0x80046c0 *)
mov r5 L0x2001a4dc;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a4ec; Value = 0xffccc1c9; PC = 0x80046c4 *)
mov r6 L0x2001a4ec;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a4fc; Value = 0xffac0290; PC = 0x80046c8 *)
mov r7 L0x2001a4fc;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a50c; Value = 0x009d4a29; PC = 0x80046cc *)
mov r8 L0x2001a50c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a51c; Value = 0x013e3891; PC = 0x80046d0 *)
mov r9 L0x2001a51c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a52c; Value = 0x00b03193; PC = 0x80046d4 *)
mov r10 L0x2001a52c;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a53c; Value = 0xff69b62a; PC = 0x80046d8 *)
mov r11 L0x2001a53c;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a4dc; PC = 0x80047d0 *)
mov L0x2001a4dc r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a4ec; PC = 0x80047d4 *)
mov L0x2001a4ec r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a4fc; PC = 0x80047d8 *)
mov L0x2001a4fc r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a50c; PC = 0x80047dc *)
mov L0x2001a50c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a51c; PC = 0x80047e0 *)
mov L0x2001a51c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a52c; PC = 0x80047e4 *)
mov L0x2001a52c r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a53c; PC = 0x80047e8 *)
mov L0x2001a53c r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a4cc; PC = 0x80047ec *)
mov L0x2001a4cc r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a4d0; Value = 0x00451bf2; PC = 0x8004588 *)
mov r4 L0x2001a4d0;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a4e0; Value = 0x00a1dcfa; PC = 0x800458c *)
mov r5 L0x2001a4e0;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a4f0; Value = 0xffd190a4; PC = 0x8004590 *)
mov r6 L0x2001a4f0;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a500; Value = 0xff2fe9df; PC = 0x8004594 *)
mov r7 L0x2001a500;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a510; Value = 0xffe70579; PC = 0x8004598 *)
mov r8 L0x2001a510;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a520; Value = 0xff8bd8fc; PC = 0x800459c *)
mov r9 L0x2001a520;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a530; Value = 0xfe920107; PC = 0x80045a0 *)
mov r10 L0x2001a530;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a540; Value = 0xffa13d7b; PC = 0x80045a4 *)
mov r11 L0x2001a540;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a4e0; PC = 0x800469c *)
mov L0x2001a4e0 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a4f0; PC = 0x80046a0 *)
mov L0x2001a4f0 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a500; PC = 0x80046a4 *)
mov L0x2001a500 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a510; PC = 0x80046a8 *)
mov L0x2001a510 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a520; PC = 0x80046ac *)
mov L0x2001a520 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a530; PC = 0x80046b0 *)
mov L0x2001a530 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a540; PC = 0x80046b4 *)
mov L0x2001a540 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a4d0; PC = 0x80046b8 *)
mov L0x2001a4d0 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a4d4; Value = 0xffe99fc2; PC = 0x80046bc *)
mov r4 L0x2001a4d4;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a4e4; Value = 0xff2cb18b; PC = 0x80046c0 *)
mov r5 L0x2001a4e4;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a4f4; Value = 0xff978f35; PC = 0x80046c4 *)
mov r6 L0x2001a4f4;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a504; Value = 0x0193d762; PC = 0x80046c8 *)
mov r7 L0x2001a504;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a514; Value = 0x00ff003d; PC = 0x80046cc *)
mov r8 L0x2001a514;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a524; Value = 0x00aca933; PC = 0x80046d0 *)
mov r9 L0x2001a524;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a534; Value = 0xff337ae3; PC = 0x80046d4 *)
mov r10 L0x2001a534;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a544; Value = 0xfee93d2d; PC = 0x80046d8 *)
mov r11 L0x2001a544;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a4e4; PC = 0x80047d0 *)
mov L0x2001a4e4 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a4f4; PC = 0x80047d4 *)
mov L0x2001a4f4 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a504; PC = 0x80047d8 *)
mov L0x2001a504 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a514; PC = 0x80047dc *)
mov L0x2001a514 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a524; PC = 0x80047e0 *)
mov L0x2001a524 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a534; PC = 0x80047e4 *)
mov L0x2001a534 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a544; PC = 0x80047e8 *)
mov L0x2001a544 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a4d4; PC = 0x80047ec *)
mov L0x2001a4d4 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d298; PC = 0x8004578 *)
mov s4 L0x800d298;
mov s5 L0x800d29c;
mov s6 L0x800d2a0;
mov s7 L0x800d2a4;
mov s8 L0x800d2a8;
mov s9 L0x800d2ac;
mov s10 L0x800d2b0;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a548; Value = 0xff26b83d; PC = 0x8004588 *)
mov r4 L0x2001a548;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a558; Value = 0x00b3fa75; PC = 0x800458c *)
mov r5 L0x2001a558;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a568; Value = 0xff832914; PC = 0x8004590 *)
mov r6 L0x2001a568;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a578; Value = 0x0014de3a; PC = 0x8004594 *)
mov r7 L0x2001a578;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a588; Value = 0x002c6f65; PC = 0x8004598 *)
mov r8 L0x2001a588;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a598; Value = 0x003586c6; PC = 0x800459c *)
mov r9 L0x2001a598;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5a8; Value = 0x00543281; PC = 0x80045a0 *)
mov r10 L0x2001a5a8;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5b8; Value = 0xff4119a7; PC = 0x80045a4 *)
mov r11 L0x2001a5b8;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a558; PC = 0x800469c *)
mov L0x2001a558 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a568; PC = 0x80046a0 *)
mov L0x2001a568 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a578; PC = 0x80046a4 *)
mov L0x2001a578 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a588; PC = 0x80046a8 *)
mov L0x2001a588 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a598; PC = 0x80046ac *)
mov L0x2001a598 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5a8; PC = 0x80046b0 *)
mov L0x2001a5a8 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5b8; PC = 0x80046b4 *)
mov L0x2001a5b8 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a548; PC = 0x80046b8 *)
mov L0x2001a548 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a54c; Value = 0x004a6721; PC = 0x80046bc *)
mov r4 L0x2001a54c;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a55c; Value = 0x004fc4d9; PC = 0x80046c0 *)
mov r5 L0x2001a55c;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a56c; Value = 0x00173dde; PC = 0x80046c4 *)
mov r6 L0x2001a56c;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a57c; Value = 0x00857ff2; PC = 0x80046c8 *)
mov r7 L0x2001a57c;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a58c; Value = 0x016bf398; PC = 0x80046cc *)
mov r8 L0x2001a58c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a59c; Value = 0x00aed63b; PC = 0x80046d0 *)
mov r9 L0x2001a59c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5ac; Value = 0x00e91005; PC = 0x80046d4 *)
mov r10 L0x2001a5ac;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5bc; Value = 0x00a3c0c4; PC = 0x80046d8 *)
mov r11 L0x2001a5bc;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a55c; PC = 0x80047d0 *)
mov L0x2001a55c r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a56c; PC = 0x80047d4 *)
mov L0x2001a56c r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a57c; PC = 0x80047d8 *)
mov L0x2001a57c r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a58c; PC = 0x80047dc *)
mov L0x2001a58c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a59c; PC = 0x80047e0 *)
mov L0x2001a59c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5ac; PC = 0x80047e4 *)
mov L0x2001a5ac r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5bc; PC = 0x80047e8 *)
mov L0x2001a5bc r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a54c; PC = 0x80047ec *)
mov L0x2001a54c r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a550; Value = 0x00ded7eb; PC = 0x8004588 *)
mov r4 L0x2001a550;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a560; Value = 0xfffd3ee5; PC = 0x800458c *)
mov r5 L0x2001a560;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a570; Value = 0xff0999d7; PC = 0x8004590 *)
mov r6 L0x2001a570;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a580; Value = 0xffed87db; PC = 0x8004594 *)
mov r7 L0x2001a580;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a590; Value = 0xffbcb624; PC = 0x8004598 *)
mov r8 L0x2001a590;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a5a0; Value = 0x0067065c; PC = 0x800459c *)
mov r9 L0x2001a5a0;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5b0; Value = 0x00c5eafd; PC = 0x80045a0 *)
mov r10 L0x2001a5b0;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5c0; Value = 0xfe6b5a26; PC = 0x80045a4 *)
mov r11 L0x2001a5c0;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a560; PC = 0x800469c *)
mov L0x2001a560 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a570; PC = 0x80046a0 *)
mov L0x2001a570 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a580; PC = 0x80046a4 *)
mov L0x2001a580 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a590; PC = 0x80046a8 *)
mov L0x2001a590 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a5a0; PC = 0x80046ac *)
mov L0x2001a5a0 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5b0; PC = 0x80046b0 *)
mov L0x2001a5b0 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5c0; PC = 0x80046b4 *)
mov L0x2001a5c0 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a550; PC = 0x80046b8 *)
mov L0x2001a550 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a554; Value = 0xff6bb0bf; PC = 0x80046bc *)
mov r4 L0x2001a554;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a564; Value = 0xff48cb16; PC = 0x80046c0 *)
mov r5 L0x2001a564;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a574; Value = 0x00832eaf; PC = 0x80046c4 *)
mov r6 L0x2001a574;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a584; Value = 0x010a0e8e; PC = 0x80046c8 *)
mov r7 L0x2001a584;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a594; Value = 0xffe273f9; PC = 0x80046cc *)
mov r8 L0x2001a594;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a5a4; Value = 0xfeab15aa; PC = 0x80046d0 *)
mov r9 L0x2001a5a4;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5b4; Value = 0xff8da619; PC = 0x80046d4 *)
mov r10 L0x2001a5b4;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5c4; Value = 0xff8ca6ee; PC = 0x80046d8 *)
mov r11 L0x2001a5c4;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a564; PC = 0x80047d0 *)
mov L0x2001a564 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a574; PC = 0x80047d4 *)
mov L0x2001a574 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a584; PC = 0x80047d8 *)
mov L0x2001a584 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a594; PC = 0x80047dc *)
mov L0x2001a594 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a5a4; PC = 0x80047e0 *)
mov L0x2001a5a4 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a5b4; PC = 0x80047e4 *)
mov L0x2001a5b4 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a5c4; PC = 0x80047e8 *)
mov L0x2001a5c4 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a554; PC = 0x80047ec *)
mov L0x2001a554 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* vmov	r1, s1                                     #! PC = 0x8004574 *)
mov r1 s1;
(* vldmia	r1!, {s4-s10}                            #! EA = L0x800d2b4; PC = 0x8004578 *)
mov s4 L0x800d2b4;
mov s5 L0x800d2b8;
mov s6 L0x800d2bc;
mov s7 L0x800d2c0;
mov s8 L0x800d2c4;
mov s9 L0x800d2c8;
mov s10 L0x800d2cc;
(* vmov	s1, r1                                     #! PC = 0x800457c *)
mov s1 r1;
(* add.w	lr, r0, #16                               #! PC = 0x8004580 *)
adds discard lr r0 16@uint32;
(* vmov	s3, lr                                     #! PC = 0x8004584 *)
mov s3 lr;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a5c8; Value = 0xfe59bc9b; PC = 0x8004588 *)
mov r4 L0x2001a5c8;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a5d8; Value = 0x00e8781b; PC = 0x800458c *)
mov r5 L0x2001a5d8;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a5e8; Value = 0xff3704e9; PC = 0x8004590 *)
mov r6 L0x2001a5e8;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a5f8; Value = 0x001ed674; PC = 0x8004594 *)
mov r7 L0x2001a5f8;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a608; Value = 0x013dbede; PC = 0x8004598 *)
mov r8 L0x2001a608;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a618; Value = 0xff65328e; PC = 0x800459c *)
mov r9 L0x2001a618;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a628; Value = 0xff61d3a6; PC = 0x80045a0 *)
mov r10 L0x2001a628;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a638; Value = 0x01bc9dd1; PC = 0x80045a4 *)
mov r11 L0x2001a638;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a5d8; PC = 0x800469c *)
mov L0x2001a5d8 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a5e8; PC = 0x80046a0 *)
mov L0x2001a5e8 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a5f8; PC = 0x80046a4 *)
mov L0x2001a5f8 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a608; PC = 0x80046a8 *)
mov L0x2001a608 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a618; PC = 0x80046ac *)
mov L0x2001a618 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a628; PC = 0x80046b0 *)
mov L0x2001a628 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a638; PC = 0x80046b4 *)
mov L0x2001a638 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a5c8; PC = 0x80046b8 *)
mov L0x2001a5c8 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a5cc; Value = 0x0096607c; PC = 0x80046bc *)
mov r4 L0x2001a5cc;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a5dc; Value = 0x00268dde; PC = 0x80046c0 *)
mov r5 L0x2001a5dc;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a5ec; Value = 0xfeab33da; PC = 0x80046c4 *)
mov r6 L0x2001a5ec;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a5fc; Value = 0x00892902; PC = 0x80046c8 *)
mov r7 L0x2001a5fc;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a60c; Value = 0x00e7d188; PC = 0x80046cc *)
mov r8 L0x2001a60c;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a61c; Value = 0x0062fb65; PC = 0x80046d0 *)
mov r9 L0x2001a61c;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a62c; Value = 0xffb545c8; PC = 0x80046d4 *)
mov r10 L0x2001a62c;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a63c; Value = 0x00abb9e4; PC = 0x80046d8 *)
mov r11 L0x2001a63c;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a5dc; PC = 0x80047d0 *)
mov L0x2001a5dc r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a5ec; PC = 0x80047d4 *)
mov L0x2001a5ec r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a5fc; PC = 0x80047d8 *)
mov L0x2001a5fc r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a60c; PC = 0x80047dc *)
mov L0x2001a60c r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a61c; PC = 0x80047e0 *)
mov L0x2001a61c r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a62c; PC = 0x80047e4 *)
mov L0x2001a62c r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a63c; PC = 0x80047e8 *)
mov L0x2001a63c r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a5cc; PC = 0x80047ec *)
mov L0x2001a5cc r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a5d0; Value = 0xff3a36f3; PC = 0x8004588 *)
mov r4 L0x2001a5d0;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a5e0; Value = 0xff7ffd36; PC = 0x800458c *)
mov r5 L0x2001a5e0;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a5f0; Value = 0xffbae6ea; PC = 0x8004590 *)
mov r6 L0x2001a5f0;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a600; Value = 0x0076f0dc; PC = 0x8004594 *)
mov r7 L0x2001a600;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a610; Value = 0xfe69849c; PC = 0x8004598 *)
mov r8 L0x2001a610;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a620; Value = 0x010fd95b; PC = 0x800459c *)
mov r9 L0x2001a620;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a630; Value = 0xff5e58ab; PC = 0x80045a0 *)
mov r10 L0x2001a630;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a640; Value = 0x01daf5bb; PC = 0x80045a4 *)
mov r11 L0x2001a640;
(* add	r4, r5                                      #! PC = 0x80045a8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80045aa *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80045ac *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80045ae *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80045b0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80045b4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80045b8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80045bc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80045c0 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80045c4 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80045cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x80045d0 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x80045d4 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045d8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x80045dc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x80045e0 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x80045e4 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045e8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80045ec *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x80045f0 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x80045f4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80045f8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80045fc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004600 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004602 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004604 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004606 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004608 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800460c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004610 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004614 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004618 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800461c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004620 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004624 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004628 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800462c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004630 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004634 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004638 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800463c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004640 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004644 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004648 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800464c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004650 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004652 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004654 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004656 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004658 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800465c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004660 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004664 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004668 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x800466c *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004670 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004674 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004678 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800467c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004680 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004684 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004688 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x800468c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004690 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004694 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004698 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a5e0; PC = 0x800469c *)
mov L0x2001a5e0 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a5f0; PC = 0x80046a0 *)
mov L0x2001a5f0 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a600; PC = 0x80046a4 *)
mov L0x2001a600 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a610; PC = 0x80046a8 *)
mov L0x2001a610 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a620; PC = 0x80046ac *)
mov L0x2001a620 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a630; PC = 0x80046b0 *)
mov L0x2001a630 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a640; PC = 0x80046b4 *)
mov L0x2001a640 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a5d0; PC = 0x80046b8 *)
mov L0x2001a5d0 r4;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a5d4; Value = 0x008efec2; PC = 0x80046bc *)
mov r4 L0x2001a5d4;
(* ldr.w	r5, [r0, #16]                             #! EA = L0x2001a5e4; Value = 0x01018f05; PC = 0x80046c0 *)
mov r5 L0x2001a5e4;
(* ldr.w	r6, [r0, #32]                             #! EA = L0x2001a5f4; Value = 0xfffae9aa; PC = 0x80046c4 *)
mov r6 L0x2001a5f4;
(* ldr.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a604; Value = 0xff432b65; PC = 0x80046c8 *)
mov r7 L0x2001a604;
(* ldr.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a614; Value = 0x0020d7a6; PC = 0x80046cc *)
mov r8 L0x2001a614;
(* ldr.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a624; Value = 0xfff9f0b7; PC = 0x80046d0 *)
mov r9 L0x2001a624;
(* ldr.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a634; Value = 0x00f63fc4; PC = 0x80046d4 *)
mov r10 L0x2001a634;
(* ldr.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a644; Value = 0x00676d33; PC = 0x80046d8 *)
mov r11 L0x2001a644;
(* add	r4, r5                                      #! PC = 0x80046dc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80046de *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80046e0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80046e2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80046e4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80046e8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80046ec *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80046f0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x80046f4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x80046f8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80046fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004700 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004704 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004708 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800470c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004710 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004714 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004718 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800471c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004720 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004724 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004728 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800472c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004730 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004734 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004736 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004738 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x800473a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x800473c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004740 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004744 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004748 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x800474c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004750 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004754 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004758 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x800475c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004760 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004764 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004768 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x800476c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004770 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004774 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004778 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800477c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004780 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004784 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004786 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004788 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x800478a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x800478c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004790 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004794 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004798 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x800479c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80047a0 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047a4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80047a8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80047ac *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80047b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80047b8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80047c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80047c4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80047c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80047cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r5, [r0, #16]                             #! EA = L0x2001a5e4; PC = 0x80047d0 *)
mov L0x2001a5e4 r5;
(* str.w	r6, [r0, #32]                             #! EA = L0x2001a5f4; PC = 0x80047d4 *)
mov L0x2001a5f4 r6;
(* str.w	r7, [r0, #48]	; 0x30                      #! EA = L0x2001a604; PC = 0x80047d8 *)
mov L0x2001a604 r7;
(* str.w	r8, [r0, #64]	; 0x40                      #! EA = L0x2001a614; PC = 0x80047dc *)
mov L0x2001a614 r8;
(* str.w	r9, [r0, #80]	; 0x50                      #! EA = L0x2001a624; PC = 0x80047e0 *)
mov L0x2001a624 r9;
(* str.w	r10, [r0, #96]	; 0x60                     #! EA = L0x2001a634; PC = 0x80047e4 *)
mov L0x2001a634 r10;
(* str.w	r11, [r0, #112]	; 0x70                    #! EA = L0x2001a644; PC = 0x80047e8 *)
mov L0x2001a644 r11;
(* str.w	r4, [r0], #4                              #! EA = L0x2001a5d4; PC = 0x80047ec *)
mov L0x2001a5d4 r4;
(* vmov	lr, s3                                     #! PC = 0x80047f0 *)
mov lr s3;
(* add.w	r0, r0, #112	; 0x70                       #! PC = 0x80047fc *)
adds discard r0 r0 112@uint32;
(* vmov	r12, s2                                    #! PC = 0x8004800 *)
mov r12 s2;
(* # END of layer 654 *)


(* === layer 6_5_4 === *)
cut
  (* algebraic *)
  and [
    eq s14 (-8432555),
    eq s15 7689784,
    (* inp_poly_0 *)
    eqmod 8 * (inp_poly_0 * inp_poly_0)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 9849271],
    (* inp_poly_1 *)
    eqmod 8 * (inp_poly_1 * inp_poly_1)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 15316810],
    (* inp_poly_2 *)
    eqmod 8 * (inp_poly_2 * inp_poly_2)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 3773600],
    (* inp_poly_3 *)
    eqmod 8 * (inp_poly_3 * inp_poly_3)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 21392481],
    (* inp_poly_4 *)
    eqmod 8 * (inp_poly_4 * inp_poly_4)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 21715468],
    (* inp_poly_5 *)
    eqmod 8 * (inp_poly_5 * inp_poly_5)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 3450613],
    (* inp_poly_6 *)
    eqmod 8 * (inp_poly_6 * inp_poly_6)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 22783829],
    (* inp_poly_7 *)
    eqmod 8 * (inp_poly_7 * inp_poly_7)
          (
            L0x2001a248 * (x**0) + L0x2001a24c * (x**1) + 
            L0x2001a250 * (x**2) + L0x2001a254 * (x**3) + 
            L0x2001a258 * (x**4) + L0x2001a25c * (x**5) + 
            L0x2001a260 * (x**6) + L0x2001a264 * (x**7) + 
            L0x2001a268 * (x**8) + L0x2001a26c * (x**9) + 
            L0x2001a270 * (x**10) + L0x2001a274 * (x**11) + 
            L0x2001a278 * (x**12) + L0x2001a27c * (x**13) + 
            L0x2001a280 * (x**14) + L0x2001a284 * (x**15) + 
            L0x2001a288 * (x**16) + L0x2001a28c * (x**17) + 
            L0x2001a290 * (x**18) + L0x2001a294 * (x**19) + 
            L0x2001a298 * (x**20) + L0x2001a29c * (x**21) + 
            L0x2001a2a0 * (x**22) + L0x2001a2a4 * (x**23) + 
            L0x2001a2a8 * (x**24) + L0x2001a2ac * (x**25) + 
            L0x2001a2b0 * (x**26) + L0x2001a2b4 * (x**27) + 
            L0x2001a2b8 * (x**28) + L0x2001a2bc * (x**29) + 
            L0x2001a2c0 * (x**30) + L0x2001a2c4 * (x**31)
          )
          [25166081, x**4 - 2382252],
    (* inp_poly_8 *)
    eqmod 8 * (inp_poly_8 * inp_poly_8)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 22990379],
    (* inp_poly_9 *)
    eqmod 8 * (inp_poly_9 * inp_poly_9)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 2175702],
    (* inp_poly_10 *)
    eqmod 8 * (inp_poly_10 * inp_poly_10)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 20348569],
    (* inp_poly_11 *)
    eqmod 8 * (inp_poly_11 * inp_poly_11)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 4817512],
    (* inp_poly_12 *)
    eqmod 8 * (inp_poly_12 * inp_poly_12)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 11666526],
    (* inp_poly_13 *)
    eqmod 8 * (inp_poly_13 * inp_poly_13)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 13499555],
    (* inp_poly_14 *)
    eqmod 8 * (inp_poly_14 * inp_poly_14)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 91549],
    (* inp_poly_15 *)
    eqmod 8 * (inp_poly_15 * inp_poly_15)
          (
            L0x2001a2c8 * (x**0) + L0x2001a2cc * (x**1) + 
            L0x2001a2d0 * (x**2) + L0x2001a2d4 * (x**3) + 
            L0x2001a2d8 * (x**4) + L0x2001a2dc * (x**5) + 
            L0x2001a2e0 * (x**6) + L0x2001a2e4 * (x**7) + 
            L0x2001a2e8 * (x**8) + L0x2001a2ec * (x**9) + 
            L0x2001a2f0 * (x**10) + L0x2001a2f4 * (x**11) + 
            L0x2001a2f8 * (x**12) + L0x2001a2fc * (x**13) + 
            L0x2001a300 * (x**14) + L0x2001a304 * (x**15) + 
            L0x2001a308 * (x**16) + L0x2001a30c * (x**17) + 
            L0x2001a310 * (x**18) + L0x2001a314 * (x**19) + 
            L0x2001a318 * (x**20) + L0x2001a31c * (x**21) + 
            L0x2001a320 * (x**22) + L0x2001a324 * (x**23) + 
            L0x2001a328 * (x**24) + L0x2001a32c * (x**25) + 
            L0x2001a330 * (x**26) + L0x2001a334 * (x**27) + 
            L0x2001a338 * (x**28) + L0x2001a33c * (x**29) + 
            L0x2001a340 * (x**30) + L0x2001a344 * (x**31)
          )
          [25166081, x**4 - 25074532],
    (* inp_poly_16 *)
    eqmod 8 * (inp_poly_16 * inp_poly_16)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 13586079],
    (* inp_poly_17 *)
    eqmod 8 * (inp_poly_17 * inp_poly_17)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 11580002],
    (* inp_poly_18 *)
    eqmod 8 * (inp_poly_18 * inp_poly_18)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 13600017],
    (* inp_poly_19 *)
    eqmod 8 * (inp_poly_19 * inp_poly_19)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 11566064],
    (* inp_poly_20 *)
    eqmod 8 * (inp_poly_20 * inp_poly_20)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 7063743],
    (* inp_poly_21 *)
    eqmod 8 * (inp_poly_21 * inp_poly_21)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 18102338],
    (* inp_poly_22 *)
    eqmod 8 * (inp_poly_22 * inp_poly_22)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 14966334],
    (* inp_poly_23 *)
    eqmod 8 * (inp_poly_23 * inp_poly_23)
          (
            L0x2001a348 * (x**0) + L0x2001a34c * (x**1) + 
            L0x2001a350 * (x**2) + L0x2001a354 * (x**3) + 
            L0x2001a358 * (x**4) + L0x2001a35c * (x**5) + 
            L0x2001a360 * (x**6) + L0x2001a364 * (x**7) + 
            L0x2001a368 * (x**8) + L0x2001a36c * (x**9) + 
            L0x2001a370 * (x**10) + L0x2001a374 * (x**11) + 
            L0x2001a378 * (x**12) + L0x2001a37c * (x**13) + 
            L0x2001a380 * (x**14) + L0x2001a384 * (x**15) + 
            L0x2001a388 * (x**16) + L0x2001a38c * (x**17) + 
            L0x2001a390 * (x**18) + L0x2001a394 * (x**19) + 
            L0x2001a398 * (x**20) + L0x2001a39c * (x**21) + 
            L0x2001a3a0 * (x**22) + L0x2001a3a4 * (x**23) + 
            L0x2001a3a8 * (x**24) + L0x2001a3ac * (x**25) + 
            L0x2001a3b0 * (x**26) + L0x2001a3b4 * (x**27) + 
            L0x2001a3b8 * (x**28) + L0x2001a3bc * (x**29) + 
            L0x2001a3c0 * (x**30) + L0x2001a3c4 * (x**31)
          )
          [25166081, x**4 - 10199747],
    (* inp_poly_24 *)
    eqmod 8 * (inp_poly_24 * inp_poly_24)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 6767963],
    (* inp_poly_25 *)
    eqmod 8 * (inp_poly_25 * inp_poly_25)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 18398118],
    (* inp_poly_26 *)
    eqmod 8 * (inp_poly_26 * inp_poly_26)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 6836706],
    (* inp_poly_27 *)
    eqmod 8 * (inp_poly_27 * inp_poly_27)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 18329375],
    (* inp_poly_28 *)
    eqmod 8 * (inp_poly_28 * inp_poly_28)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 2376375],
    (* inp_poly_29 *)
    eqmod 8 * (inp_poly_29 * inp_poly_29)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 22789706],
    (* inp_poly_30 *)
    eqmod 8 * (inp_poly_30 * inp_poly_30)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 17372579],
    (* inp_poly_31 *)
    eqmod 8 * (inp_poly_31 * inp_poly_31)
          (
            L0x2001a3c8 * (x**0) + L0x2001a3cc * (x**1) + 
            L0x2001a3d0 * (x**2) + L0x2001a3d4 * (x**3) + 
            L0x2001a3d8 * (x**4) + L0x2001a3dc * (x**5) + 
            L0x2001a3e0 * (x**6) + L0x2001a3e4 * (x**7) + 
            L0x2001a3e8 * (x**8) + L0x2001a3ec * (x**9) + 
            L0x2001a3f0 * (x**10) + L0x2001a3f4 * (x**11) + 
            L0x2001a3f8 * (x**12) + L0x2001a3fc * (x**13) + 
            L0x2001a400 * (x**14) + L0x2001a404 * (x**15) + 
            L0x2001a408 * (x**16) + L0x2001a40c * (x**17) + 
            L0x2001a410 * (x**18) + L0x2001a414 * (x**19) + 
            L0x2001a418 * (x**20) + L0x2001a41c * (x**21) + 
            L0x2001a420 * (x**22) + L0x2001a424 * (x**23) + 
            L0x2001a428 * (x**24) + L0x2001a42c * (x**25) + 
            L0x2001a430 * (x**26) + L0x2001a434 * (x**27) + 
            L0x2001a438 * (x**28) + L0x2001a43c * (x**29) + 
            L0x2001a440 * (x**30) + L0x2001a444 * (x**31)
          )
          [25166081, x**4 - 7793502],
    (* inp_poly_32 *)
    eqmod 8 * (inp_poly_32 * inp_poly_32)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 11257497],
    (* inp_poly_33 *)
    eqmod 8 * (inp_poly_33 * inp_poly_33)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 13908584],
    (* inp_poly_34 *)
    eqmod 8 * (inp_poly_34 * inp_poly_34)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 3205585],
    (* inp_poly_35 *)
    eqmod 8 * (inp_poly_35 * inp_poly_35)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 21960496],
    (* inp_poly_36 *)
    eqmod 8 * (inp_poly_36 * inp_poly_36)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 13138404],
    (* inp_poly_37 *)
    eqmod 8 * (inp_poly_37 * inp_poly_37)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 12027677],
    (* inp_poly_38 *)
    eqmod 8 * (inp_poly_38 * inp_poly_38)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 13052373],
    (* inp_poly_39 *)
    eqmod 8 * (inp_poly_39 * inp_poly_39)
          (
            L0x2001a448 * (x**0) + L0x2001a44c * (x**1) + 
            L0x2001a450 * (x**2) + L0x2001a454 * (x**3) + 
            L0x2001a458 * (x**4) + L0x2001a45c * (x**5) + 
            L0x2001a460 * (x**6) + L0x2001a464 * (x**7) + 
            L0x2001a468 * (x**8) + L0x2001a46c * (x**9) + 
            L0x2001a470 * (x**10) + L0x2001a474 * (x**11) + 
            L0x2001a478 * (x**12) + L0x2001a47c * (x**13) + 
            L0x2001a480 * (x**14) + L0x2001a484 * (x**15) + 
            L0x2001a488 * (x**16) + L0x2001a48c * (x**17) + 
            L0x2001a490 * (x**18) + L0x2001a494 * (x**19) + 
            L0x2001a498 * (x**20) + L0x2001a49c * (x**21) + 
            L0x2001a4a0 * (x**22) + L0x2001a4a4 * (x**23) + 
            L0x2001a4a8 * (x**24) + L0x2001a4ac * (x**25) + 
            L0x2001a4b0 * (x**26) + L0x2001a4b4 * (x**27) + 
            L0x2001a4b8 * (x**28) + L0x2001a4bc * (x**29) + 
            L0x2001a4c0 * (x**30) + L0x2001a4c4 * (x**31)
          )
          [25166081, x**4 - 12113708],
    (* inp_poly_40 *)
    eqmod 8 * (inp_poly_40 * inp_poly_40)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 19474337],
    (* inp_poly_41 *)
    eqmod 8 * (inp_poly_41 * inp_poly_41)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 5691744],
    (* inp_poly_42 *)
    eqmod 8 * (inp_poly_42 * inp_poly_42)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 12583566],
    (* inp_poly_43 *)
    eqmod 8 * (inp_poly_43 * inp_poly_43)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 12582515],
    (* inp_poly_44 *)
    eqmod 8 * (inp_poly_44 * inp_poly_44)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 4283752],
    (* inp_poly_45 *)
    eqmod 8 * (inp_poly_45 * inp_poly_45)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 20882329],
    (* inp_poly_46 *)
    eqmod 8 * (inp_poly_46 * inp_poly_46)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 18295001],
    (* inp_poly_47 *)
    eqmod 8 * (inp_poly_47 * inp_poly_47)
          (
            L0x2001a4c8 * (x**0) + L0x2001a4cc * (x**1) + 
            L0x2001a4d0 * (x**2) + L0x2001a4d4 * (x**3) + 
            L0x2001a4d8 * (x**4) + L0x2001a4dc * (x**5) + 
            L0x2001a4e0 * (x**6) + L0x2001a4e4 * (x**7) + 
            L0x2001a4e8 * (x**8) + L0x2001a4ec * (x**9) + 
            L0x2001a4f0 * (x**10) + L0x2001a4f4 * (x**11) + 
            L0x2001a4f8 * (x**12) + L0x2001a4fc * (x**13) + 
            L0x2001a500 * (x**14) + L0x2001a504 * (x**15) + 
            L0x2001a508 * (x**16) + L0x2001a50c * (x**17) + 
            L0x2001a510 * (x**18) + L0x2001a514 * (x**19) + 
            L0x2001a518 * (x**20) + L0x2001a51c * (x**21) + 
            L0x2001a520 * (x**22) + L0x2001a524 * (x**23) + 
            L0x2001a528 * (x**24) + L0x2001a52c * (x**25) + 
            L0x2001a530 * (x**26) + L0x2001a534 * (x**27) + 
            L0x2001a538 * (x**28) + L0x2001a53c * (x**29) + 
            L0x2001a540 * (x**30) + L0x2001a544 * (x**31)
          )
          [25166081, x**4 - 6871080],
    (* inp_poly_48 *)
    eqmod 8 * (inp_poly_48 * inp_poly_48)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 7038058],
    (* inp_poly_49 *)
    eqmod 8 * (inp_poly_49 * inp_poly_49)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 18128023],
    (* inp_poly_50 *)
    eqmod 8 * (inp_poly_50 * inp_poly_50)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 18026180],
    (* inp_poly_51 *)
    eqmod 8 * (inp_poly_51 * inp_poly_51)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 7139901],
    (* inp_poly_52 *)
    eqmod 8 * (inp_poly_52 * inp_poly_52)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 14761830],
    (* inp_poly_53 *)
    eqmod 8 * (inp_poly_53 * inp_poly_53)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 10404251],
    (* inp_poly_54 *)
    eqmod 8 * (inp_poly_54 * inp_poly_54)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 21664729],
    (* inp_poly_55 *)
    eqmod 8 * (inp_poly_55 * inp_poly_55)
          (
            L0x2001a548 * (x**0) + L0x2001a54c * (x**1) + 
            L0x2001a550 * (x**2) + L0x2001a554 * (x**3) + 
            L0x2001a558 * (x**4) + L0x2001a55c * (x**5) + 
            L0x2001a560 * (x**6) + L0x2001a564 * (x**7) + 
            L0x2001a568 * (x**8) + L0x2001a56c * (x**9) + 
            L0x2001a570 * (x**10) + L0x2001a574 * (x**11) + 
            L0x2001a578 * (x**12) + L0x2001a57c * (x**13) + 
            L0x2001a580 * (x**14) + L0x2001a584 * (x**15) + 
            L0x2001a588 * (x**16) + L0x2001a58c * (x**17) + 
            L0x2001a590 * (x**18) + L0x2001a594 * (x**19) + 
            L0x2001a598 * (x**20) + L0x2001a59c * (x**21) + 
            L0x2001a5a0 * (x**22) + L0x2001a5a4 * (x**23) + 
            L0x2001a5a8 * (x**24) + L0x2001a5ac * (x**25) + 
            L0x2001a5b0 * (x**26) + L0x2001a5b4 * (x**27) + 
            L0x2001a5b8 * (x**28) + L0x2001a5bc * (x**29) + 
            L0x2001a5c0 * (x**30) + L0x2001a5c4 * (x**31)
          )
          [25166081, x**4 - 3501352],
    (* inp_poly_56 *)
    eqmod 8 * (inp_poly_56 * inp_poly_56)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 8242393],
    (* inp_poly_57 *)
    eqmod 8 * (inp_poly_57 * inp_poly_57)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 16923688],
    (* inp_poly_58 *)
    eqmod 8 * (inp_poly_58 * inp_poly_58)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 9868967],
    (* inp_poly_59 *)
    eqmod 8 * (inp_poly_59 * inp_poly_59)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 15297114],
    (* inp_poly_60 *)
    eqmod 8 * (inp_poly_60 * inp_poly_60)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 18216472],
    (* inp_poly_61 *)
    eqmod 8 * (inp_poly_61 * inp_poly_61)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 6949609],
    (* inp_poly_62 *)
    eqmod 8 * (inp_poly_62 * inp_poly_62)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 2603275],
    (* inp_poly_63 *)
    eqmod 8 * (inp_poly_63 * inp_poly_63)
          (
            L0x2001a5c8 * (x**0) + L0x2001a5cc * (x**1) + 
            L0x2001a5d0 * (x**2) + L0x2001a5d4 * (x**3) + 
            L0x2001a5d8 * (x**4) + L0x2001a5dc * (x**5) + 
            L0x2001a5e0 * (x**6) + L0x2001a5e4 * (x**7) + 
            L0x2001a5e8 * (x**8) + L0x2001a5ec * (x**9) + 
            L0x2001a5f0 * (x**10) + L0x2001a5f4 * (x**11) + 
            L0x2001a5f8 * (x**12) + L0x2001a5fc * (x**13) + 
            L0x2001a600 * (x**14) + L0x2001a604 * (x**15) + 
            L0x2001a608 * (x**16) + L0x2001a60c * (x**17) + 
            L0x2001a610 * (x**18) + L0x2001a614 * (x**19) + 
            L0x2001a618 * (x**20) + L0x2001a61c * (x**21) + 
            L0x2001a620 * (x**22) + L0x2001a624 * (x**23) + 
            L0x2001a628 * (x**24) + L0x2001a62c * (x**25) + 
            L0x2001a630 * (x**26) + L0x2001a634 * (x**27) + 
            L0x2001a638 * (x**28) + L0x2001a63c * (x**29) + 
            L0x2001a640 * (x**30) + L0x2001a644 * (x**31)
          )
          [25166081, x**4 - 22562806]
  ]
  &&
  (* range *)
  and [
    s14 = (-8432555)@32,
    s15 = 7689784@32,
    8@32 * (-25166081)@32 <=s L0x2001a248, L0x2001a248 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a24c, L0x2001a24c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a250, L0x2001a250 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a254, L0x2001a254 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a258, L0x2001a258 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a25c, L0x2001a25c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a260, L0x2001a260 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a264, L0x2001a264 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a268, L0x2001a268 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a26c, L0x2001a26c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a270, L0x2001a270 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a274, L0x2001a274 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a278, L0x2001a278 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a27c, L0x2001a27c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a280, L0x2001a280 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a284, L0x2001a284 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a288, L0x2001a288 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a28c, L0x2001a28c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a290, L0x2001a290 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a294, L0x2001a294 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a298, L0x2001a298 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a29c, L0x2001a29c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2a0, L0x2001a2a0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2a4, L0x2001a2a4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2a8, L0x2001a2a8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2ac, L0x2001a2ac <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2b0, L0x2001a2b0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2b4, L0x2001a2b4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2b8, L0x2001a2b8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2bc, L0x2001a2bc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2c0, L0x2001a2c0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2c4, L0x2001a2c4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2c8, L0x2001a2c8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2cc, L0x2001a2cc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2d0, L0x2001a2d0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2d4, L0x2001a2d4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2d8, L0x2001a2d8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2dc, L0x2001a2dc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2e0, L0x2001a2e0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2e4, L0x2001a2e4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2e8, L0x2001a2e8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2ec, L0x2001a2ec <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2f0, L0x2001a2f0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2f4, L0x2001a2f4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2f8, L0x2001a2f8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a2fc, L0x2001a2fc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a300, L0x2001a300 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a304, L0x2001a304 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a308, L0x2001a308 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a30c, L0x2001a30c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a310, L0x2001a310 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a314, L0x2001a314 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a318, L0x2001a318 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a31c, L0x2001a31c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a320, L0x2001a320 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a324, L0x2001a324 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a328, L0x2001a328 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a32c, L0x2001a32c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a330, L0x2001a330 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a334, L0x2001a334 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a338, L0x2001a338 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a33c, L0x2001a33c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a340, L0x2001a340 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a344, L0x2001a344 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a348, L0x2001a348 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a34c, L0x2001a34c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a350, L0x2001a350 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a354, L0x2001a354 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a358, L0x2001a358 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a35c, L0x2001a35c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a360, L0x2001a360 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a364, L0x2001a364 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a368, L0x2001a368 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a36c, L0x2001a36c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a370, L0x2001a370 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a374, L0x2001a374 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a378, L0x2001a378 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a37c, L0x2001a37c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a380, L0x2001a380 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a384, L0x2001a384 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a388, L0x2001a388 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a38c, L0x2001a38c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a390, L0x2001a390 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a394, L0x2001a394 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a398, L0x2001a398 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a39c, L0x2001a39c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3a0, L0x2001a3a0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3a4, L0x2001a3a4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3a8, L0x2001a3a8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3ac, L0x2001a3ac <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3b0, L0x2001a3b0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3b4, L0x2001a3b4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3b8, L0x2001a3b8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3bc, L0x2001a3bc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3c0, L0x2001a3c0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3c4, L0x2001a3c4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3c8, L0x2001a3c8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3cc, L0x2001a3cc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3d0, L0x2001a3d0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3d4, L0x2001a3d4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3d8, L0x2001a3d8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3dc, L0x2001a3dc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3e0, L0x2001a3e0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3e4, L0x2001a3e4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3e8, L0x2001a3e8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3ec, L0x2001a3ec <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3f0, L0x2001a3f0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3f4, L0x2001a3f4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3f8, L0x2001a3f8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a3fc, L0x2001a3fc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a400, L0x2001a400 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a404, L0x2001a404 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a408, L0x2001a408 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a40c, L0x2001a40c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a410, L0x2001a410 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a414, L0x2001a414 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a418, L0x2001a418 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a41c, L0x2001a41c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a420, L0x2001a420 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a424, L0x2001a424 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a428, L0x2001a428 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a42c, L0x2001a42c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a430, L0x2001a430 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a434, L0x2001a434 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a438, L0x2001a438 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a43c, L0x2001a43c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a440, L0x2001a440 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a444, L0x2001a444 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a448, L0x2001a448 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a44c, L0x2001a44c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a450, L0x2001a450 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a454, L0x2001a454 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a458, L0x2001a458 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a45c, L0x2001a45c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a460, L0x2001a460 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a464, L0x2001a464 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a468, L0x2001a468 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a46c, L0x2001a46c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a470, L0x2001a470 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a474, L0x2001a474 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a478, L0x2001a478 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a47c, L0x2001a47c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a480, L0x2001a480 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a484, L0x2001a484 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a488, L0x2001a488 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a48c, L0x2001a48c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a490, L0x2001a490 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a494, L0x2001a494 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a498, L0x2001a498 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a49c, L0x2001a49c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4a0, L0x2001a4a0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4a4, L0x2001a4a4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4a8, L0x2001a4a8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4ac, L0x2001a4ac <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4b0, L0x2001a4b0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4b4, L0x2001a4b4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4b8, L0x2001a4b8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4bc, L0x2001a4bc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4c0, L0x2001a4c0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4c4, L0x2001a4c4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4c8, L0x2001a4c8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4cc, L0x2001a4cc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4d0, L0x2001a4d0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4d4, L0x2001a4d4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4d8, L0x2001a4d8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4dc, L0x2001a4dc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4e0, L0x2001a4e0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4e4, L0x2001a4e4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4e8, L0x2001a4e8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4ec, L0x2001a4ec <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4f0, L0x2001a4f0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4f4, L0x2001a4f4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4f8, L0x2001a4f8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a4fc, L0x2001a4fc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a500, L0x2001a500 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a504, L0x2001a504 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a508, L0x2001a508 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a50c, L0x2001a50c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a510, L0x2001a510 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a514, L0x2001a514 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a518, L0x2001a518 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a51c, L0x2001a51c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a520, L0x2001a520 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a524, L0x2001a524 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a528, L0x2001a528 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a52c, L0x2001a52c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a530, L0x2001a530 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a534, L0x2001a534 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a538, L0x2001a538 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a53c, L0x2001a53c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a540, L0x2001a540 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a544, L0x2001a544 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a548, L0x2001a548 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a54c, L0x2001a54c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a550, L0x2001a550 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a554, L0x2001a554 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a558, L0x2001a558 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a55c, L0x2001a55c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a560, L0x2001a560 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a564, L0x2001a564 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a568, L0x2001a568 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a56c, L0x2001a56c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a570, L0x2001a570 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a574, L0x2001a574 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a578, L0x2001a578 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a57c, L0x2001a57c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a580, L0x2001a580 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a584, L0x2001a584 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a588, L0x2001a588 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a58c, L0x2001a58c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a590, L0x2001a590 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a594, L0x2001a594 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a598, L0x2001a598 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a59c, L0x2001a59c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5a0, L0x2001a5a0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5a4, L0x2001a5a4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5a8, L0x2001a5a8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5ac, L0x2001a5ac <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5b0, L0x2001a5b0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5b4, L0x2001a5b4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5b8, L0x2001a5b8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5bc, L0x2001a5bc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5c0, L0x2001a5c0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5c4, L0x2001a5c4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5c8, L0x2001a5c8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5cc, L0x2001a5cc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5d0, L0x2001a5d0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5d4, L0x2001a5d4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5d8, L0x2001a5d8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5dc, L0x2001a5dc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5e0, L0x2001a5e0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5e4, L0x2001a5e4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5e8, L0x2001a5e8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5ec, L0x2001a5ec <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5f0, L0x2001a5f0 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5f4, L0x2001a5f4 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5f8, L0x2001a5f8 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a5fc, L0x2001a5fc <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a600, L0x2001a600 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a604, L0x2001a604 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a608, L0x2001a608 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a60c, L0x2001a60c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a610, L0x2001a610 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a614, L0x2001a614 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a618, L0x2001a618 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a61c, L0x2001a61c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a620, L0x2001a620 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a624, L0x2001a624 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a628, L0x2001a628 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a62c, L0x2001a62c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a630, L0x2001a630 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a634, L0x2001a634 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a638, L0x2001a638 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a63c, L0x2001a63c <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a640, L0x2001a640 <s 8@32 * 25166081@32,
    8@32 * (-25166081)@32 <=s L0x2001a644, L0x2001a644 <s 8@32 * 25166081@32
  ]
;


(* vmov	r1, s1                                     #! PC = 0x800480c *)
mov r1 s1;
(* sub.w	r0, r0, #1024	; 0x400                     #! PC = 0x8004810 *)
subs discard r0 r0 1024@uint32;
(* sub.w	r1, r1, #252	; 0xfc                       #! PC = 0x8004814 *)
subs discard r1 r1 252@uint32;
(* vldmia	r1, {s4-s10}                             #! EA = L0x800d1d4; PC = 0x8004818 *)
mov s4 L0x800d1d4;
mov s5 L0x800d1d8;
mov s6 L0x800d1dc;
mov s7 L0x800d1e0;
mov s8 L0x800d1e4;
mov s9 L0x800d1e8;
mov s10 L0x800d1ec;
(* ldr.w	r4, [r0]                                  #! EA = L0x2001a248; Value = 0xfd283eac; PC = 0x800481c *)
mov r4 L0x2001a248;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2c8; Value = 0x01589864; PC = 0x8004820 *)
mov r5 L0x2001a2c8;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a348; Value = 0xfe7eedc1; PC = 0x8004824 *)
mov r6 L0x2001a348;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3c8; Value = 0x01821849; PC = 0x8004828 *)
mov r7 L0x2001a3c8;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a448; Value = 0xfde772b3; PC = 0x800482c *)
mov r8 L0x2001a448;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4c8; Value = 0x0031e0bb; PC = 0x8004830 *)
mov r9 L0x2001a4c8;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a548; Value = 0xff69fc53; PC = 0x8004834 *)
mov r10 L0x2001a548;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5c8; Value = 0x005972f6; PC = 0x8004838 *)
mov r11 L0x2001a5c8;
(* vmov	r1, s14                                    #! PC = 0x800483c *)
mov r1 s14;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004840 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004844 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004848 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x800484c *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004850 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004854 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004858 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800485c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004860 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004864 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004868 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800486c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004870 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004874 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004878 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x800487c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004880 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004884 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004888 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800488c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004890 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004894 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004898 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800489c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* str.w	r4, [r0]                                  #! EA = L0x2001a248; PC = 0x80048a0 *)
mov L0x2001a248 r4;
(* str.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2c8; PC = 0x80048a4 *)
mov L0x2001a2c8 r5;
(* str.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a348; PC = 0x80048a8 *)
mov L0x2001a348 r6;
(* str.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3c8; PC = 0x80048ac *)
mov L0x2001a3c8 r7;
(* str.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a448; PC = 0x80048b0 *)
mov L0x2001a448 r8;
(* str.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4c8; PC = 0x80048b4 *)
mov L0x2001a4c8 r9;
(* str.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a548; PC = 0x80048b8 *)
mov L0x2001a548 r10;
(* str.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5c8; PC = 0x80048bc *)
mov L0x2001a5c8 r11;
(* add.w	r12, r0, #128	; 0x80                      #! PC = 0x80048c0 *)
adds discard r12 r0 128@uint32;
(* vmov	s2, r12                                    #! PC = 0x80048c4 *)
mov s2 r12;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2c8; Value = 0xffd89763; PC = 0x80048c8 *)
mov r5 L0x2001a2c8;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a348; Value = 0xfffeeec2; PC = 0x80048cc *)
mov r6 L0x2001a348;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3c8; Value = 0x00021748; PC = 0x80048d0 *)
mov r7 L0x2001a3c8;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a448; Value = 0xff6773b4; PC = 0x80048d4 *)
mov r8 L0x2001a448;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4c8; Value = 0x0031e0bb; PC = 0x80048d8 *)
mov r9 L0x2001a4c8;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a548; Value = 0xff69fc53; PC = 0x80048dc *)
mov r10 L0x2001a548;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5c8; Value = 0x005972f6; PC = 0x80048e0 *)
mov r11 L0x2001a5c8;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a248; Value = 0x002840ae; PC = 0x80048e4 *)
mov r4 L0x2001a248;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019888; PC = 0x8004a88 *)
ghost L0x20019888_f@sint32 : L0x20019888_f = r5 && L0x20019888_f = r5;
split discard L0x20019888_u r5 16;
cast L0x20019888@sint16 L0x20019888_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198c8; PC = 0x8004a8c *)
ghost L0x200198c8_f@sint32 : L0x200198c8_f = r6 && L0x200198c8_f = r6;
split discard L0x200198c8_u r6 16;
cast L0x200198c8@sint16 L0x200198c8_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019908; PC = 0x8004a90 *)
ghost L0x20019908_f@sint32 : L0x20019908_f = r7 && L0x20019908_f = r7;
split discard L0x20019908_u r7 16;
cast L0x20019908@sint16 L0x20019908_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019948; PC = 0x8004a94 *)
ghost L0x20019948_f@sint32 : L0x20019948_f = r8 && L0x20019948_f = r8;
split discard L0x20019948_u r8 16;
cast L0x20019948@sint16 L0x20019948_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019988; PC = 0x8004a98 *)
ghost L0x20019988_f@sint32 : L0x20019988_f = r9 && L0x20019988_f = r9;
split discard L0x20019988_u r9 16;
cast L0x20019988@sint16 L0x20019988_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199c8; PC = 0x8004a9c *)
ghost L0x200199c8_f@sint32 : L0x200199c8_f = r10 && L0x200199c8_f = r10;
split discard L0x200199c8_u r10 16;
cast L0x200199c8@sint16 L0x200199c8_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a08; PC = 0x8004aa0 *)
ghost L0x20019a08_f@sint32 : L0x20019a08_f = r11 && L0x20019a08_f = r11;
split discard L0x20019a08_u r11 16;
cast L0x20019a08@sint16 L0x20019a08_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019848; PC = 0x8004aa4 *)
ghost L0x20019848_f@sint32 : L0x20019848_f = r4 && L0x20019848_f = r4;
split discard L0x20019848_u r4 16;
cast L0x20019848@sint16 L0x20019848_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2cc; Value = 0x024e3160; PC = 0x8004aac *)
mov r5 L0x2001a2cc;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a34c; Value = 0xfe5c20e2; PC = 0x8004ab0 *)
mov r6 L0x2001a34c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3cc; Value = 0xfc51e0d5; PC = 0x8004ab4 *)
mov r7 L0x2001a3cc;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a44c; Value = 0x00769e5f; PC = 0x8004ab8 *)
mov r8 L0x2001a44c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4cc; Value = 0x01462829; PC = 0x8004abc *)
mov r9 L0x2001a4cc;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a54c; Value = 0x04de8466; PC = 0x8004ac0 *)
mov r10 L0x2001a54c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5cc; Value = 0x019d17cf; PC = 0x8004ac4 *)
mov r11 L0x2001a5cc;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a24c; Value = 0x008afe47; PC = 0x8004ac8 *)
mov r4 L0x2001a24c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001988a; PC = 0x8004c6c *)
ghost L0x2001988a_f@sint32 : L0x2001988a_f = r5 && L0x2001988a_f = r5;
split discard L0x2001988a_u r5 16;
cast L0x2001988a@sint16 L0x2001988a_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198ca; PC = 0x8004c70 *)
ghost L0x200198ca_f@sint32 : L0x200198ca_f = r6 && L0x200198ca_f = r6;
split discard L0x200198ca_u r6 16;
cast L0x200198ca@sint16 L0x200198ca_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001990a; PC = 0x8004c74 *)
ghost L0x2001990a_f@sint32 : L0x2001990a_f = r7 && L0x2001990a_f = r7;
split discard L0x2001990a_u r7 16;
cast L0x2001990a@sint16 L0x2001990a_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001994a; PC = 0x8004c78 *)
ghost L0x2001994a_f@sint32 : L0x2001994a_f = r8 && L0x2001994a_f = r8;
split discard L0x2001994a_u r8 16;
cast L0x2001994a@sint16 L0x2001994a_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001998a; PC = 0x8004c7c *)
ghost L0x2001998a_f@sint32 : L0x2001998a_f = r9 && L0x2001998a_f = r9;
split discard L0x2001998a_u r9 16;
cast L0x2001998a@sint16 L0x2001998a_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199ca; PC = 0x8004c80 *)
ghost L0x200199ca_f@sint32 : L0x200199ca_f = r10 && L0x200199ca_f = r10;
split discard L0x200199ca_u r10 16;
cast L0x200199ca@sint16 L0x200199ca_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a0a; PC = 0x8004c84 *)
ghost L0x20019a0a_f@sint32 : L0x20019a0a_f = r11 && L0x20019a0a_f = r11;
split discard L0x20019a0a_u r11 16;
cast L0x20019a0a@sint16 L0x20019a0a_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001984a; PC = 0x8004c88 *)
ghost L0x2001984a_f@sint32 : L0x2001984a_f = r4 && L0x2001984a_f = r4;
split discard L0x2001984a_u r4 16;
cast L0x2001984a@sint16 L0x2001984a_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2d0; Value = 0x0008eae2; PC = 0x80048c8 *)
mov r5 L0x2001a2d0;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a350; Value = 0x00d99f18; PC = 0x80048cc *)
mov r6 L0x2001a350;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3d0; Value = 0xff564a03; PC = 0x80048d0 *)
mov r7 L0x2001a3d0;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a450; Value = 0xfd6b8d05; PC = 0x80048d4 *)
mov r8 L0x2001a450;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4d0; Value = 0xfd8e9066; PC = 0x80048d8 *)
mov r9 L0x2001a4d0;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a550; Value = 0xff283a25; PC = 0x80048dc *)
mov r10 L0x2001a550;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5d0; Value = 0xff9eb84c; PC = 0x80048e0 *)
mov r11 L0x2001a5d0;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a250; Value = 0xfd904b80; PC = 0x80048e4 *)
mov r4 L0x2001a250;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001988c; PC = 0x8004a88 *)
ghost L0x2001988c_f@sint32 : L0x2001988c_f = r5 && L0x2001988c_f = r5;
split discard L0x2001988c_u r5 16;
cast L0x2001988c@sint16 L0x2001988c_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198cc; PC = 0x8004a8c *)
ghost L0x200198cc_f@sint32 : L0x200198cc_f = r6 && L0x200198cc_f = r6;
split discard L0x200198cc_u r6 16;
cast L0x200198cc@sint16 L0x200198cc_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001990c; PC = 0x8004a90 *)
ghost L0x2001990c_f@sint32 : L0x2001990c_f = r7 && L0x2001990c_f = r7;
split discard L0x2001990c_u r7 16;
cast L0x2001990c@sint16 L0x2001990c_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001994c; PC = 0x8004a94 *)
ghost L0x2001994c_f@sint32 : L0x2001994c_f = r8 && L0x2001994c_f = r8;
split discard L0x2001994c_u r8 16;
cast L0x2001994c@sint16 L0x2001994c_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001998c; PC = 0x8004a98 *)
ghost L0x2001998c_f@sint32 : L0x2001998c_f = r9 && L0x2001998c_f = r9;
split discard L0x2001998c_u r9 16;
cast L0x2001998c@sint16 L0x2001998c_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199cc; PC = 0x8004a9c *)
ghost L0x200199cc_f@sint32 : L0x200199cc_f = r10 && L0x200199cc_f = r10;
split discard L0x200199cc_u r10 16;
cast L0x200199cc@sint16 L0x200199cc_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a0c; PC = 0x8004aa0 *)
ghost L0x20019a0c_f@sint32 : L0x20019a0c_f = r11 && L0x20019a0c_f = r11;
split discard L0x20019a0c_u r11 16;
cast L0x20019a0c@sint16 L0x20019a0c_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001984c; PC = 0x8004aa4 *)
ghost L0x2001984c_f@sint32 : L0x2001984c_f = r4 && L0x2001984c_f = r4;
split discard L0x2001984c_u r4 16;
cast L0x2001984c@sint16 L0x2001984c_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2d4; Value = 0xfe7480f1; PC = 0x8004aac *)
mov r5 L0x2001a2d4;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a354; Value = 0xff92091a; PC = 0x8004ab0 *)
mov r6 L0x2001a354;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3d4; Value = 0x0114947a; PC = 0x8004ab4 *)
mov r7 L0x2001a3d4;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a454; Value = 0x0043eeb0; PC = 0x8004ab8 *)
mov r8 L0x2001a454;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4d4; Value = 0x000a1964; PC = 0x8004abc *)
mov r9 L0x2001a4d4;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a554; Value = 0xfde98fbc; PC = 0x8004ac0 *)
mov r10 L0x2001a554;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5d4; Value = 0x0247182a; PC = 0x8004ac4 *)
mov r11 L0x2001a5d4;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a254; Value = 0xfd8a6c58; PC = 0x8004ac8 *)
mov r4 L0x2001a254;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001988e; PC = 0x8004c6c *)
ghost L0x2001988e_f@sint32 : L0x2001988e_f = r5 && L0x2001988e_f = r5;
split discard L0x2001988e_u r5 16;
cast L0x2001988e@sint16 L0x2001988e_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198ce; PC = 0x8004c70 *)
ghost L0x200198ce_f@sint32 : L0x200198ce_f = r6 && L0x200198ce_f = r6;
split discard L0x200198ce_u r6 16;
cast L0x200198ce@sint16 L0x200198ce_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001990e; PC = 0x8004c74 *)
ghost L0x2001990e_f@sint32 : L0x2001990e_f = r7 && L0x2001990e_f = r7;
split discard L0x2001990e_u r7 16;
cast L0x2001990e@sint16 L0x2001990e_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001994e; PC = 0x8004c78 *)
ghost L0x2001994e_f@sint32 : L0x2001994e_f = r8 && L0x2001994e_f = r8;
split discard L0x2001994e_u r8 16;
cast L0x2001994e@sint16 L0x2001994e_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001998e; PC = 0x8004c7c *)
ghost L0x2001998e_f@sint32 : L0x2001998e_f = r9 && L0x2001998e_f = r9;
split discard L0x2001998e_u r9 16;
cast L0x2001998e@sint16 L0x2001998e_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199ce; PC = 0x8004c80 *)
ghost L0x200199ce_f@sint32 : L0x200199ce_f = r10 && L0x200199ce_f = r10;
split discard L0x200199ce_u r10 16;
cast L0x200199ce@sint16 L0x200199ce_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a0e; PC = 0x8004c84 *)
ghost L0x20019a0e_f@sint32 : L0x20019a0e_f = r11 && L0x20019a0e_f = r11;
split discard L0x20019a0e_u r11 16;
cast L0x20019a0e@sint16 L0x20019a0e_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001984e; PC = 0x8004c88 *)
ghost L0x2001984e_f@sint32 : L0x2001984e_f = r4 && L0x2001984e_f = r4;
split discard L0x2001984e_u r4 16;
cast L0x2001984e@sint16 L0x2001984e_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2d8; Value = 0xff740251; PC = 0x80048c8 *)
mov r5 L0x2001a2d8;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a358; Value = 0xfff4e6e7; PC = 0x80048cc *)
mov r6 L0x2001a358;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3d8; Value = 0xfe1bb7ae; PC = 0x80048d0 *)
mov r7 L0x2001a3d8;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a458; Value = 0xffdead3e; PC = 0x80048d4 *)
mov r8 L0x2001a458;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4d8; Value = 0xffb0c33a; PC = 0x80048d8 *)
mov r9 L0x2001a4d8;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a558; Value = 0x00085616; PC = 0x80048dc *)
mov r10 L0x2001a558;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5d8; Value = 0xfed94092; PC = 0x80048e0 *)
mov r11 L0x2001a5d8;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a258; Value = 0x00bd9164; PC = 0x80048e4 *)
mov r4 L0x2001a258;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019890; PC = 0x8004a88 *)
ghost L0x20019890_f@sint32 : L0x20019890_f = r5 && L0x20019890_f = r5;
split discard L0x20019890_u r5 16;
cast L0x20019890@sint16 L0x20019890_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198d0; PC = 0x8004a8c *)
ghost L0x200198d0_f@sint32 : L0x200198d0_f = r6 && L0x200198d0_f = r6;
split discard L0x200198d0_u r6 16;
cast L0x200198d0@sint16 L0x200198d0_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019910; PC = 0x8004a90 *)
ghost L0x20019910_f@sint32 : L0x20019910_f = r7 && L0x20019910_f = r7;
split discard L0x20019910_u r7 16;
cast L0x20019910@sint16 L0x20019910_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019950; PC = 0x8004a94 *)
ghost L0x20019950_f@sint32 : L0x20019950_f = r8 && L0x20019950_f = r8;
split discard L0x20019950_u r8 16;
cast L0x20019950@sint16 L0x20019950_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019990; PC = 0x8004a98 *)
ghost L0x20019990_f@sint32 : L0x20019990_f = r9 && L0x20019990_f = r9;
split discard L0x20019990_u r9 16;
cast L0x20019990@sint16 L0x20019990_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199d0; PC = 0x8004a9c *)
ghost L0x200199d0_f@sint32 : L0x200199d0_f = r10 && L0x200199d0_f = r10;
split discard L0x200199d0_u r10 16;
cast L0x200199d0@sint16 L0x200199d0_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a10; PC = 0x8004aa0 *)
ghost L0x20019a10_f@sint32 : L0x20019a10_f = r11 && L0x20019a10_f = r11;
split discard L0x20019a10_u r11 16;
cast L0x20019a10@sint16 L0x20019a10_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019850; PC = 0x8004aa4 *)
ghost L0x20019850_f@sint32 : L0x20019850_f = r4 && L0x20019850_f = r4;
split discard L0x20019850_u r4 16;
cast L0x20019850@sint16 L0x20019850_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2dc; Value = 0xfecc5ba8; PC = 0x8004aac *)
mov r5 L0x2001a2dc;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a35c; Value = 0xff4ba059; PC = 0x8004ab0 *)
mov r6 L0x2001a35c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3dc; Value = 0xff098281; PC = 0x8004ab4 *)
mov r7 L0x2001a3dc;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a45c; Value = 0xfec0bb65; PC = 0x8004ab8 *)
mov r8 L0x2001a45c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4dc; Value = 0x014c795c; PC = 0x8004abc *)
mov r9 L0x2001a4dc;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a55c; Value = 0x0045a88b; PC = 0x8004ac0 *)
mov r10 L0x2001a55c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5dc; Value = 0xfff6f1c1; PC = 0x8004ac4 *)
mov r11 L0x2001a5dc;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a25c; Value = 0xff9a1b48; PC = 0x8004ac8 *)
mov r4 L0x2001a25c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019892; PC = 0x8004c6c *)
ghost L0x20019892_f@sint32 : L0x20019892_f = r5 && L0x20019892_f = r5;
split discard L0x20019892_u r5 16;
cast L0x20019892@sint16 L0x20019892_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198d2; PC = 0x8004c70 *)
ghost L0x200198d2_f@sint32 : L0x200198d2_f = r6 && L0x200198d2_f = r6;
split discard L0x200198d2_u r6 16;
cast L0x200198d2@sint16 L0x200198d2_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019912; PC = 0x8004c74 *)
ghost L0x20019912_f@sint32 : L0x20019912_f = r7 && L0x20019912_f = r7;
split discard L0x20019912_u r7 16;
cast L0x20019912@sint16 L0x20019912_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019952; PC = 0x8004c78 *)
ghost L0x20019952_f@sint32 : L0x20019952_f = r8 && L0x20019952_f = r8;
split discard L0x20019952_u r8 16;
cast L0x20019952@sint16 L0x20019952_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019992; PC = 0x8004c7c *)
ghost L0x20019992_f@sint32 : L0x20019992_f = r9 && L0x20019992_f = r9;
split discard L0x20019992_u r9 16;
cast L0x20019992@sint16 L0x20019992_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199d2; PC = 0x8004c80 *)
ghost L0x200199d2_f@sint32 : L0x200199d2_f = r10 && L0x200199d2_f = r10;
split discard L0x200199d2_u r10 16;
cast L0x200199d2@sint16 L0x200199d2_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a12; PC = 0x8004c84 *)
ghost L0x20019a12_f@sint32 : L0x20019a12_f = r11 && L0x20019a12_f = r11;
split discard L0x20019a12_u r11 16;
cast L0x20019a12@sint16 L0x20019a12_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019852; PC = 0x8004c88 *)
ghost L0x20019852_f@sint32 : L0x20019852_f = r4 && L0x20019852_f = r4;
split discard L0x20019852_u r4 16;
cast L0x20019852@sint16 L0x20019852_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2e0; Value = 0xfef541e1; PC = 0x80048c8 *)
mov r5 L0x2001a2e0;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a360; Value = 0x002d5c0b; PC = 0x80048cc *)
mov r6 L0x2001a360;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3e0; Value = 0xff7c59cf; PC = 0x80048d0 *)
mov r7 L0x2001a3e0;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a460; Value = 0xff79b917; PC = 0x80048d4 *)
mov r8 L0x2001a460;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4e0; Value = 0x00ce68b5; PC = 0x80048d8 *)
mov r9 L0x2001a4e0;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a560; Value = 0xff705222; PC = 0x80048dc *)
mov r10 L0x2001a560;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5e0; Value = 0xfe3444a8; PC = 0x80048e0 *)
mov r11 L0x2001a5e0;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a260; Value = 0x00828050; PC = 0x80048e4 *)
mov r4 L0x2001a260;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019894; PC = 0x8004a88 *)
ghost L0x20019894_f@sint32 : L0x20019894_f = r5 && L0x20019894_f = r5;
split discard L0x20019894_u r5 16;
cast L0x20019894@sint16 L0x20019894_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198d4; PC = 0x8004a8c *)
ghost L0x200198d4_f@sint32 : L0x200198d4_f = r6 && L0x200198d4_f = r6;
split discard L0x200198d4_u r6 16;
cast L0x200198d4@sint16 L0x200198d4_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019914; PC = 0x8004a90 *)
ghost L0x20019914_f@sint32 : L0x20019914_f = r7 && L0x20019914_f = r7;
split discard L0x20019914_u r7 16;
cast L0x20019914@sint16 L0x20019914_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019954; PC = 0x8004a94 *)
ghost L0x20019954_f@sint32 : L0x20019954_f = r8 && L0x20019954_f = r8;
split discard L0x20019954_u r8 16;
cast L0x20019954@sint16 L0x20019954_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019994; PC = 0x8004a98 *)
ghost L0x20019994_f@sint32 : L0x20019994_f = r9 && L0x20019994_f = r9;
split discard L0x20019994_u r9 16;
cast L0x20019994@sint16 L0x20019994_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199d4; PC = 0x8004a9c *)
ghost L0x200199d4_f@sint32 : L0x200199d4_f = r10 && L0x200199d4_f = r10;
split discard L0x200199d4_u r10 16;
cast L0x200199d4@sint16 L0x200199d4_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a14; PC = 0x8004aa0 *)
ghost L0x20019a14_f@sint32 : L0x20019a14_f = r11 && L0x20019a14_f = r11;
split discard L0x20019a14_u r11 16;
cast L0x20019a14@sint16 L0x20019a14_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019854; PC = 0x8004aa4 *)
ghost L0x20019854_f@sint32 : L0x20019854_f = r4 && L0x20019854_f = r4;
split discard L0x20019854_u r4 16;
cast L0x20019854@sint16 L0x20019854_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2e4; Value = 0xff34aab7; PC = 0x8004aac *)
mov r5 L0x2001a2e4;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a364; Value = 0xff9f60e9; PC = 0x8004ab0 *)
mov r6 L0x2001a364;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3e4; Value = 0xff4b1d7a; PC = 0x8004ab4 *)
mov r7 L0x2001a3e4;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a464; Value = 0x01b2db67; PC = 0x8004ab8 *)
mov r8 L0x2001a464;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4e4; Value = 0x01570dfa; PC = 0x8004abc *)
mov r9 L0x2001a4e4;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a564; Value = 0x00f75365; PC = 0x8004ac0 *)
mov r10 L0x2001a564;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5e4; Value = 0xff9f207f; PC = 0x8004ac4 *)
mov r11 L0x2001a5e4;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a264; Value = 0xff5961fb; PC = 0x8004ac8 *)
mov r4 L0x2001a264;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019896; PC = 0x8004c6c *)
ghost L0x20019896_f@sint32 : L0x20019896_f = r5 && L0x20019896_f = r5;
split discard L0x20019896_u r5 16;
cast L0x20019896@sint16 L0x20019896_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198d6; PC = 0x8004c70 *)
ghost L0x200198d6_f@sint32 : L0x200198d6_f = r6 && L0x200198d6_f = r6;
split discard L0x200198d6_u r6 16;
cast L0x200198d6@sint16 L0x200198d6_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019916; PC = 0x8004c74 *)
ghost L0x20019916_f@sint32 : L0x20019916_f = r7 && L0x20019916_f = r7;
split discard L0x20019916_u r7 16;
cast L0x20019916@sint16 L0x20019916_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019956; PC = 0x8004c78 *)
ghost L0x20019956_f@sint32 : L0x20019956_f = r8 && L0x20019956_f = r8;
split discard L0x20019956_u r8 16;
cast L0x20019956@sint16 L0x20019956_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019996; PC = 0x8004c7c *)
ghost L0x20019996_f@sint32 : L0x20019996_f = r9 && L0x20019996_f = r9;
split discard L0x20019996_u r9 16;
cast L0x20019996@sint16 L0x20019996_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199d6; PC = 0x8004c80 *)
ghost L0x200199d6_f@sint32 : L0x200199d6_f = r10 && L0x200199d6_f = r10;
split discard L0x200199d6_u r10 16;
cast L0x200199d6@sint16 L0x200199d6_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a16; PC = 0x8004c84 *)
ghost L0x20019a16_f@sint32 : L0x20019a16_f = r11 && L0x20019a16_f = r11;
split discard L0x20019a16_u r11 16;
cast L0x20019a16@sint16 L0x20019a16_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019856; PC = 0x8004c88 *)
ghost L0x20019856_f@sint32 : L0x20019856_f = r4 && L0x20019856_f = r4;
split discard L0x20019856_u r4 16;
cast L0x20019856@sint16 L0x20019856_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2e8; Value = 0x00257402; PC = 0x80048c8 *)
mov r5 L0x2001a2e8;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a368; Value = 0xfff859ab; PC = 0x80048cc *)
mov r6 L0x2001a368;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3e8; Value = 0x0059af72; PC = 0x80048d0 *)
mov r7 L0x2001a3e8;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a468; Value = 0xff681c50; PC = 0x80048d4 *)
mov r8 L0x2001a468;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4e8; Value = 0xff89bf91; PC = 0x80048d8 *)
mov r9 L0x2001a4e8;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a568; Value = 0x008c92d4; PC = 0x80048dc *)
mov r10 L0x2001a568;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5e8; Value = 0x000abc8c; PC = 0x80048e0 *)
mov r11 L0x2001a5e8;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a268; Value = 0xff235380; PC = 0x80048e4 *)
mov r4 L0x2001a268;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x20019898; PC = 0x8004a88 *)
ghost L0x20019898_f@sint32 : L0x20019898_f = r5 && L0x20019898_f = r5;
split discard L0x20019898_u r5 16;
cast L0x20019898@sint16 L0x20019898_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198d8; PC = 0x8004a8c *)
ghost L0x200198d8_f@sint32 : L0x200198d8_f = r6 && L0x200198d8_f = r6;
split discard L0x200198d8_u r6 16;
cast L0x200198d8@sint16 L0x200198d8_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019918; PC = 0x8004a90 *)
ghost L0x20019918_f@sint32 : L0x20019918_f = r7 && L0x20019918_f = r7;
split discard L0x20019918_u r7 16;
cast L0x20019918@sint16 L0x20019918_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019958; PC = 0x8004a94 *)
ghost L0x20019958_f@sint32 : L0x20019958_f = r8 && L0x20019958_f = r8;
split discard L0x20019958_u r8 16;
cast L0x20019958@sint16 L0x20019958_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x20019998; PC = 0x8004a98 *)
ghost L0x20019998_f@sint32 : L0x20019998_f = r9 && L0x20019998_f = r9;
split discard L0x20019998_u r9 16;
cast L0x20019998@sint16 L0x20019998_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199d8; PC = 0x8004a9c *)
ghost L0x200199d8_f@sint32 : L0x200199d8_f = r10 && L0x200199d8_f = r10;
split discard L0x200199d8_u r10 16;
cast L0x200199d8@sint16 L0x200199d8_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a18; PC = 0x8004aa0 *)
ghost L0x20019a18_f@sint32 : L0x20019a18_f = r11 && L0x20019a18_f = r11;
split discard L0x20019a18_u r11 16;
cast L0x20019a18@sint16 L0x20019a18_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019858; PC = 0x8004aa4 *)
ghost L0x20019858_f@sint32 : L0x20019858_f = r4 && L0x20019858_f = r4;
split discard L0x20019858_u r4 16;
cast L0x20019858@sint16 L0x20019858_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2ec; Value = 0x00aedee1; PC = 0x8004aac *)
mov r5 L0x2001a2ec;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a36c; Value = 0x0030d79d; PC = 0x8004ab0 *)
mov r6 L0x2001a36c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3ec; Value = 0x000180f0; PC = 0x8004ab4 *)
mov r7 L0x2001a3ec;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a46c; Value = 0x00adc64a; PC = 0x8004ab8 *)
mov r8 L0x2001a46c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4ec; Value = 0xffe0e67d; PC = 0x8004abc *)
mov r9 L0x2001a4ec;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a56c; Value = 0x004f0181; PC = 0x8004ac0 *)
mov r10 L0x2001a56c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5ec; Value = 0x00e66ab6; PC = 0x8004ac4 *)
mov r11 L0x2001a5ec;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a26c; Value = 0xffa2b8d9; PC = 0x8004ac8 *)
mov r4 L0x2001a26c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001989a; PC = 0x8004c6c *)
ghost L0x2001989a_f@sint32 : L0x2001989a_f = r5 && L0x2001989a_f = r5;
split discard L0x2001989a_u r5 16;
cast L0x2001989a@sint16 L0x2001989a_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198da; PC = 0x8004c70 *)
ghost L0x200198da_f@sint32 : L0x200198da_f = r6 && L0x200198da_f = r6;
split discard L0x200198da_u r6 16;
cast L0x200198da@sint16 L0x200198da_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001991a; PC = 0x8004c74 *)
ghost L0x2001991a_f@sint32 : L0x2001991a_f = r7 && L0x2001991a_f = r7;
split discard L0x2001991a_u r7 16;
cast L0x2001991a@sint16 L0x2001991a_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001995a; PC = 0x8004c78 *)
ghost L0x2001995a_f@sint32 : L0x2001995a_f = r8 && L0x2001995a_f = r8;
split discard L0x2001995a_u r8 16;
cast L0x2001995a@sint16 L0x2001995a_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001999a; PC = 0x8004c7c *)
ghost L0x2001999a_f@sint32 : L0x2001999a_f = r9 && L0x2001999a_f = r9;
split discard L0x2001999a_u r9 16;
cast L0x2001999a@sint16 L0x2001999a_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199da; PC = 0x8004c80 *)
ghost L0x200199da_f@sint32 : L0x200199da_f = r10 && L0x200199da_f = r10;
split discard L0x200199da_u r10 16;
cast L0x200199da@sint16 L0x200199da_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a1a; PC = 0x8004c84 *)
ghost L0x20019a1a_f@sint32 : L0x20019a1a_f = r11 && L0x20019a1a_f = r11;
split discard L0x20019a1a_u r11 16;
cast L0x20019a1a@sint16 L0x20019a1a_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001985a; PC = 0x8004c88 *)
ghost L0x2001985a_f@sint32 : L0x2001985a_f = r4 && L0x2001985a_f = r4;
split discard L0x2001985a_u r4 16;
cast L0x2001985a@sint16 L0x2001985a_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2f0; Value = 0xfffa8849; PC = 0x80048c8 *)
mov r5 L0x2001a2f0;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a370; Value = 0x0008db9d; PC = 0x80048cc *)
mov r6 L0x2001a370;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3f0; Value = 0x013a8085; PC = 0x80048d0 *)
mov r7 L0x2001a3f0;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a470; Value = 0xffe7f239; PC = 0x80048d4 *)
mov r8 L0x2001a470;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4f0; Value = 0xff8a82a0; PC = 0x80048d8 *)
mov r9 L0x2001a4f0;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a570; Value = 0xff950b09; PC = 0x80048dc *)
mov r10 L0x2001a570;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5f0; Value = 0xff7a8d9a; PC = 0x80048e0 *)
mov r11 L0x2001a5f0;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a270; Value = 0xfff5e797; PC = 0x80048e4 *)
mov r4 L0x2001a270;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001989c; PC = 0x8004a88 *)
ghost L0x2001989c_f@sint32 : L0x2001989c_f = r5 && L0x2001989c_f = r5;
split discard L0x2001989c_u r5 16;
cast L0x2001989c@sint16 L0x2001989c_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198dc; PC = 0x8004a8c *)
ghost L0x200198dc_f@sint32 : L0x200198dc_f = r6 && L0x200198dc_f = r6;
split discard L0x200198dc_u r6 16;
cast L0x200198dc@sint16 L0x200198dc_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001991c; PC = 0x8004a90 *)
ghost L0x2001991c_f@sint32 : L0x2001991c_f = r7 && L0x2001991c_f = r7;
split discard L0x2001991c_u r7 16;
cast L0x2001991c@sint16 L0x2001991c_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001995c; PC = 0x8004a94 *)
ghost L0x2001995c_f@sint32 : L0x2001995c_f = r8 && L0x2001995c_f = r8;
split discard L0x2001995c_u r8 16;
cast L0x2001995c@sint16 L0x2001995c_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001999c; PC = 0x8004a98 *)
ghost L0x2001999c_f@sint32 : L0x2001999c_f = r9 && L0x2001999c_f = r9;
split discard L0x2001999c_u r9 16;
cast L0x2001999c@sint16 L0x2001999c_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199dc; PC = 0x8004a9c *)
ghost L0x200199dc_f@sint32 : L0x200199dc_f = r10 && L0x200199dc_f = r10;
split discard L0x200199dc_u r10 16;
cast L0x200199dc@sint16 L0x200199dc_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a1c; PC = 0x8004aa0 *)
ghost L0x20019a1c_f@sint32 : L0x20019a1c_f = r11 && L0x20019a1c_f = r11;
split discard L0x20019a1c_u r11 16;
cast L0x20019a1c@sint16 L0x20019a1c_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001985c; PC = 0x8004aa4 *)
ghost L0x2001985c_f@sint32 : L0x2001985c_f = r4 && L0x2001985c_f = r4;
split discard L0x2001985c_u r4 16;
cast L0x2001985c@sint16 L0x2001985c_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2f4; Value = 0x001e964b; PC = 0x8004aac *)
mov r5 L0x2001a2f4;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a374; Value = 0xff687966; PC = 0x8004ab0 *)
mov r6 L0x2001a374;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3f4; Value = 0x004de9f1; PC = 0x8004ab4 *)
mov r7 L0x2001a3f4;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a474; Value = 0x012f3be4; PC = 0x8004ab8 *)
mov r8 L0x2001a474;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4f4; Value = 0xff569aa1; PC = 0x8004abc *)
mov r9 L0x2001a4f4;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a574; Value = 0xfff9cc4c; PC = 0x8004ac0 *)
mov r10 L0x2001a574;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5f4; Value = 0x00e7a811; PC = 0x8004ac4 *)
mov r11 L0x2001a5f4;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a274; Value = 0xff345af6; PC = 0x8004ac8 *)
mov r4 L0x2001a274;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x2001989e; PC = 0x8004c6c *)
ghost L0x2001989e_f@sint32 : L0x2001989e_f = r5 && L0x2001989e_f = r5;
split discard L0x2001989e_u r5 16;
cast L0x2001989e@sint16 L0x2001989e_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198de; PC = 0x8004c70 *)
ghost L0x200198de_f@sint32 : L0x200198de_f = r6 && L0x200198de_f = r6;
split discard L0x200198de_u r6 16;
cast L0x200198de@sint16 L0x200198de_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001991e; PC = 0x8004c74 *)
ghost L0x2001991e_f@sint32 : L0x2001991e_f = r7 && L0x2001991e_f = r7;
split discard L0x2001991e_u r7 16;
cast L0x2001991e@sint16 L0x2001991e_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001995e; PC = 0x8004c78 *)
ghost L0x2001995e_f@sint32 : L0x2001995e_f = r8 && L0x2001995e_f = r8;
split discard L0x2001995e_u r8 16;
cast L0x2001995e@sint16 L0x2001995e_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x2001999e; PC = 0x8004c7c *)
ghost L0x2001999e_f@sint32 : L0x2001999e_f = r9 && L0x2001999e_f = r9;
split discard L0x2001999e_u r9 16;
cast L0x2001999e@sint16 L0x2001999e_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199de; PC = 0x8004c80 *)
ghost L0x200199de_f@sint32 : L0x200199de_f = r10 && L0x200199de_f = r10;
split discard L0x200199de_u r10 16;
cast L0x200199de@sint16 L0x200199de_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a1e; PC = 0x8004c84 *)
ghost L0x20019a1e_f@sint32 : L0x20019a1e_f = r11 && L0x20019a1e_f = r11;
split discard L0x20019a1e_u r11 16;
cast L0x20019a1e@sint16 L0x20019a1e_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001985e; PC = 0x8004c88 *)
ghost L0x2001985e_f@sint32 : L0x2001985e_f = r4 && L0x2001985e_f = r4;
split discard L0x2001985e_u r4 16;
cast L0x2001985e@sint16 L0x2001985e_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2f8; Value = 0x013365b9; PC = 0x80048c8 *)
mov r5 L0x2001a2f8;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a378; Value = 0xff63ce2f; PC = 0x80048cc *)
mov r6 L0x2001a378;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3f8; Value = 0x00ac5280; PC = 0x80048d0 *)
mov r7 L0x2001a3f8;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a478; Value = 0xffb21c9c; PC = 0x80048d4 *)
mov r8 L0x2001a478;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4f8; Value = 0xffc0a9de; PC = 0x80048d8 *)
mov r9 L0x2001a4f8;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a578; Value = 0xffc3f599; PC = 0x80048dc *)
mov r10 L0x2001a578;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5f8; Value = 0x009a5b5b; PC = 0x80048e0 *)
mov r11 L0x2001a5f8;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a278; Value = 0xff7b929b; PC = 0x80048e4 *)
mov r4 L0x2001a278;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198a0; PC = 0x8004a88 *)
ghost L0x200198a0_f@sint32 : L0x200198a0_f = r5 && L0x200198a0_f = r5;
split discard L0x200198a0_u r5 16;
cast L0x200198a0@sint16 L0x200198a0_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198e0; PC = 0x8004a8c *)
ghost L0x200198e0_f@sint32 : L0x200198e0_f = r6 && L0x200198e0_f = r6;
split discard L0x200198e0_u r6 16;
cast L0x200198e0@sint16 L0x200198e0_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019920; PC = 0x8004a90 *)
ghost L0x20019920_f@sint32 : L0x20019920_f = r7 && L0x20019920_f = r7;
split discard L0x20019920_u r7 16;
cast L0x20019920@sint16 L0x20019920_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019960; PC = 0x8004a94 *)
ghost L0x20019960_f@sint32 : L0x20019960_f = r8 && L0x20019960_f = r8;
split discard L0x20019960_u r8 16;
cast L0x20019960@sint16 L0x20019960_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199a0; PC = 0x8004a98 *)
ghost L0x200199a0_f@sint32 : L0x200199a0_f = r9 && L0x200199a0_f = r9;
split discard L0x200199a0_u r9 16;
cast L0x200199a0@sint16 L0x200199a0_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199e0; PC = 0x8004a9c *)
ghost L0x200199e0_f@sint32 : L0x200199e0_f = r10 && L0x200199e0_f = r10;
split discard L0x200199e0_u r10 16;
cast L0x200199e0@sint16 L0x200199e0_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a20; PC = 0x8004aa0 *)
ghost L0x20019a20_f@sint32 : L0x20019a20_f = r11 && L0x20019a20_f = r11;
split discard L0x20019a20_u r11 16;
cast L0x20019a20@sint16 L0x20019a20_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019860; PC = 0x8004aa4 *)
ghost L0x20019860_f@sint32 : L0x20019860_f = r4 && L0x20019860_f = r4;
split discard L0x20019860_u r4 16;
cast L0x20019860@sint16 L0x20019860_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a2fc; Value = 0x00d669a9; PC = 0x8004aac *)
mov r5 L0x2001a2fc;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a37c; Value = 0xfff3b239; PC = 0x8004ab0 *)
mov r6 L0x2001a37c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a3fc; Value = 0x009107f9; PC = 0x8004ab4 *)
mov r7 L0x2001a3fc;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a47c; Value = 0x00c9a477; PC = 0x8004ab8 *)
mov r8 L0x2001a47c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a4fc; Value = 0xffe2511a; PC = 0x8004abc *)
mov r9 L0x2001a4fc;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a57c; Value = 0x002de970; PC = 0x8004ac0 *)
mov r10 L0x2001a57c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a5fc; Value = 0x00bf42f6; PC = 0x8004ac4 *)
mov r11 L0x2001a5fc;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a27c; Value = 0x00923605; PC = 0x8004ac8 *)
mov r4 L0x2001a27c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198a2; PC = 0x8004c6c *)
ghost L0x200198a2_f@sint32 : L0x200198a2_f = r5 && L0x200198a2_f = r5;
split discard L0x200198a2_u r5 16;
cast L0x200198a2@sint16 L0x200198a2_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198e2; PC = 0x8004c70 *)
ghost L0x200198e2_f@sint32 : L0x200198e2_f = r6 && L0x200198e2_f = r6;
split discard L0x200198e2_u r6 16;
cast L0x200198e2@sint16 L0x200198e2_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019922; PC = 0x8004c74 *)
ghost L0x20019922_f@sint32 : L0x20019922_f = r7 && L0x20019922_f = r7;
split discard L0x20019922_u r7 16;
cast L0x20019922@sint16 L0x20019922_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019962; PC = 0x8004c78 *)
ghost L0x20019962_f@sint32 : L0x20019962_f = r8 && L0x20019962_f = r8;
split discard L0x20019962_u r8 16;
cast L0x20019962@sint16 L0x20019962_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199a2; PC = 0x8004c7c *)
ghost L0x200199a2_f@sint32 : L0x200199a2_f = r9 && L0x200199a2_f = r9;
split discard L0x200199a2_u r9 16;
cast L0x200199a2@sint16 L0x200199a2_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199e2; PC = 0x8004c80 *)
ghost L0x200199e2_f@sint32 : L0x200199e2_f = r10 && L0x200199e2_f = r10;
split discard L0x200199e2_u r10 16;
cast L0x200199e2@sint16 L0x200199e2_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a22; PC = 0x8004c84 *)
ghost L0x20019a22_f@sint32 : L0x20019a22_f = r11 && L0x20019a22_f = r11;
split discard L0x20019a22_u r11 16;
cast L0x20019a22@sint16 L0x20019a22_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019862; PC = 0x8004c88 *)
ghost L0x20019862_f@sint32 : L0x20019862_f = r4 && L0x20019862_f = r4;
split discard L0x20019862_u r4 16;
cast L0x20019862@sint16 L0x20019862_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a300; Value = 0x004f4233; PC = 0x80048c8 *)
mov r5 L0x2001a300;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a380; Value = 0xff0f7409; PC = 0x80048cc *)
mov r6 L0x2001a380;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a400; Value = 0xffb0fbee; PC = 0x80048d0 *)
mov r7 L0x2001a400;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a480; Value = 0xff4377cd; PC = 0x80048d4 *)
mov r8 L0x2001a480;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a500; Value = 0x004da33a; PC = 0x80048d8 *)
mov r9 L0x2001a500;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a580; Value = 0x001113c7; PC = 0x80048dc *)
mov r10 L0x2001a580;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a600; Value = 0xff241894; PC = 0x80048e0 *)
mov r11 L0x2001a600;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a280; Value = 0x00ee3140; PC = 0x80048e4 *)
mov r4 L0x2001a280;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198a4; PC = 0x8004a88 *)
ghost L0x200198a4_f@sint32 : L0x200198a4_f = r5 && L0x200198a4_f = r5;
split discard L0x200198a4_u r5 16;
cast L0x200198a4@sint16 L0x200198a4_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198e4; PC = 0x8004a8c *)
ghost L0x200198e4_f@sint32 : L0x200198e4_f = r6 && L0x200198e4_f = r6;
split discard L0x200198e4_u r6 16;
cast L0x200198e4@sint16 L0x200198e4_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019924; PC = 0x8004a90 *)
ghost L0x20019924_f@sint32 : L0x20019924_f = r7 && L0x20019924_f = r7;
split discard L0x20019924_u r7 16;
cast L0x20019924@sint16 L0x20019924_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019964; PC = 0x8004a94 *)
ghost L0x20019964_f@sint32 : L0x20019964_f = r8 && L0x20019964_f = r8;
split discard L0x20019964_u r8 16;
cast L0x20019964@sint16 L0x20019964_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199a4; PC = 0x8004a98 *)
ghost L0x200199a4_f@sint32 : L0x200199a4_f = r9 && L0x200199a4_f = r9;
split discard L0x200199a4_u r9 16;
cast L0x200199a4@sint16 L0x200199a4_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199e4; PC = 0x8004a9c *)
ghost L0x200199e4_f@sint32 : L0x200199e4_f = r10 && L0x200199e4_f = r10;
split discard L0x200199e4_u r10 16;
cast L0x200199e4@sint16 L0x200199e4_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a24; PC = 0x8004aa0 *)
ghost L0x20019a24_f@sint32 : L0x20019a24_f = r11 && L0x20019a24_f = r11;
split discard L0x20019a24_u r11 16;
cast L0x20019a24@sint16 L0x20019a24_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019864; PC = 0x8004aa4 *)
ghost L0x20019864_f@sint32 : L0x20019864_f = r4 && L0x20019864_f = r4;
split discard L0x20019864_u r4 16;
cast L0x20019864@sint16 L0x20019864_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a304; Value = 0xfeb7596d; PC = 0x8004aac *)
mov r5 L0x2001a304;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a384; Value = 0xfed791de; PC = 0x8004ab0 *)
mov r6 L0x2001a384;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a404; Value = 0x01551571; PC = 0x8004ab4 *)
mov r7 L0x2001a404;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a484; Value = 0x00a4993f; PC = 0x8004ab8 *)
mov r8 L0x2001a484;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a504; Value = 0x013fed54; PC = 0x8004abc *)
mov r9 L0x2001a504;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a584; Value = 0xff6d5ab4; PC = 0x8004ac0 *)
mov r10 L0x2001a584;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a604; Value = 0x010c3bad; PC = 0x8004ac4 *)
mov r11 L0x2001a604;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a284; Value = 0xff78a7dd; PC = 0x8004ac8 *)
mov r4 L0x2001a284;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198a6; PC = 0x8004c6c *)
ghost L0x200198a6_f@sint32 : L0x200198a6_f = r5 && L0x200198a6_f = r5;
split discard L0x200198a6_u r5 16;
cast L0x200198a6@sint16 L0x200198a6_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198e6; PC = 0x8004c70 *)
ghost L0x200198e6_f@sint32 : L0x200198e6_f = r6 && L0x200198e6_f = r6;
split discard L0x200198e6_u r6 16;
cast L0x200198e6@sint16 L0x200198e6_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019926; PC = 0x8004c74 *)
ghost L0x20019926_f@sint32 : L0x20019926_f = r7 && L0x20019926_f = r7;
split discard L0x20019926_u r7 16;
cast L0x20019926@sint16 L0x20019926_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019966; PC = 0x8004c78 *)
ghost L0x20019966_f@sint32 : L0x20019966_f = r8 && L0x20019966_f = r8;
split discard L0x20019966_u r8 16;
cast L0x20019966@sint16 L0x20019966_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199a6; PC = 0x8004c7c *)
ghost L0x200199a6_f@sint32 : L0x200199a6_f = r9 && L0x200199a6_f = r9;
split discard L0x200199a6_u r9 16;
cast L0x200199a6@sint16 L0x200199a6_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199e6; PC = 0x8004c80 *)
ghost L0x200199e6_f@sint32 : L0x200199e6_f = r10 && L0x200199e6_f = r10;
split discard L0x200199e6_u r10 16;
cast L0x200199e6@sint16 L0x200199e6_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a26; PC = 0x8004c84 *)
ghost L0x20019a26_f@sint32 : L0x20019a26_f = r11 && L0x20019a26_f = r11;
split discard L0x20019a26_u r11 16;
cast L0x20019a26@sint16 L0x20019a26_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019866; PC = 0x8004c88 *)
ghost L0x20019866_f@sint32 : L0x20019866_f = r4 && L0x20019866_f = r4;
split discard L0x20019866_u r4 16;
cast L0x20019866@sint16 L0x20019866_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a308; Value = 0xff69c517; PC = 0x80048c8 *)
mov r5 L0x2001a308;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a388; Value = 0x00156164; PC = 0x80048cc *)
mov r6 L0x2001a388;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a408; Value = 0x008fc9e1; PC = 0x80048d0 *)
mov r7 L0x2001a408;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a488; Value = 0x005fc30c; PC = 0x80048d4 *)
mov r8 L0x2001a488;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a508; Value = 0xffea1a62; PC = 0x80048d8 *)
mov r9 L0x2001a508;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a588; Value = 0xffa7be40; PC = 0x80048dc *)
mov r10 L0x2001a588;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a608; Value = 0x0083486f; PC = 0x80048e0 *)
mov r11 L0x2001a608;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a288; Value = 0xff6b2cb0; PC = 0x80048e4 *)
mov r4 L0x2001a288;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198a8; PC = 0x8004a88 *)
ghost L0x200198a8_f@sint32 : L0x200198a8_f = r5 && L0x200198a8_f = r5;
split discard L0x200198a8_u r5 16;
cast L0x200198a8@sint16 L0x200198a8_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198e8; PC = 0x8004a8c *)
ghost L0x200198e8_f@sint32 : L0x200198e8_f = r6 && L0x200198e8_f = r6;
split discard L0x200198e8_u r6 16;
cast L0x200198e8@sint16 L0x200198e8_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019928; PC = 0x8004a90 *)
ghost L0x20019928_f@sint32 : L0x20019928_f = r7 && L0x20019928_f = r7;
split discard L0x20019928_u r7 16;
cast L0x20019928@sint16 L0x20019928_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019968; PC = 0x8004a94 *)
ghost L0x20019968_f@sint32 : L0x20019968_f = r8 && L0x20019968_f = r8;
split discard L0x20019968_u r8 16;
cast L0x20019968@sint16 L0x20019968_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199a8; PC = 0x8004a98 *)
ghost L0x200199a8_f@sint32 : L0x200199a8_f = r9 && L0x200199a8_f = r9;
split discard L0x200199a8_u r9 16;
cast L0x200199a8@sint16 L0x200199a8_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199e8; PC = 0x8004a9c *)
ghost L0x200199e8_f@sint32 : L0x200199e8_f = r10 && L0x200199e8_f = r10;
split discard L0x200199e8_u r10 16;
cast L0x200199e8@sint16 L0x200199e8_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a28; PC = 0x8004aa0 *)
ghost L0x20019a28_f@sint32 : L0x20019a28_f = r11 && L0x20019a28_f = r11;
split discard L0x20019a28_u r11 16;
cast L0x20019a28@sint16 L0x20019a28_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019868; PC = 0x8004aa4 *)
ghost L0x20019868_f@sint32 : L0x20019868_f = r4 && L0x20019868_f = r4;
split discard L0x20019868_u r4 16;
cast L0x20019868@sint16 L0x20019868_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a30c; Value = 0xff8c1a59; PC = 0x8004aac *)
mov r5 L0x2001a30c;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a38c; Value = 0x00bea945; PC = 0x8004ab0 *)
mov r6 L0x2001a38c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a40c; Value = 0x003952cc; PC = 0x8004ab4 *)
mov r7 L0x2001a40c;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a48c; Value = 0x009853c3; PC = 0x8004ab8 *)
mov r8 L0x2001a48c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a50c; Value = 0x0050d44b; PC = 0x8004abc *)
mov r9 L0x2001a50c;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a58c; Value = 0xffed77a4; PC = 0x8004ac0 *)
mov r10 L0x2001a58c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a60c; Value = 0xff853fd5; PC = 0x8004ac4 *)
mov r11 L0x2001a60c;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a28c; Value = 0xff56638e; PC = 0x8004ac8 *)
mov r4 L0x2001a28c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198aa; PC = 0x8004c6c *)
ghost L0x200198aa_f@sint32 : L0x200198aa_f = r5 && L0x200198aa_f = r5;
split discard L0x200198aa_u r5 16;
cast L0x200198aa@sint16 L0x200198aa_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198ea; PC = 0x8004c70 *)
ghost L0x200198ea_f@sint32 : L0x200198ea_f = r6 && L0x200198ea_f = r6;
split discard L0x200198ea_u r6 16;
cast L0x200198ea@sint16 L0x200198ea_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001992a; PC = 0x8004c74 *)
ghost L0x2001992a_f@sint32 : L0x2001992a_f = r7 && L0x2001992a_f = r7;
split discard L0x2001992a_u r7 16;
cast L0x2001992a@sint16 L0x2001992a_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001996a; PC = 0x8004c78 *)
ghost L0x2001996a_f@sint32 : L0x2001996a_f = r8 && L0x2001996a_f = r8;
split discard L0x2001996a_u r8 16;
cast L0x2001996a@sint16 L0x2001996a_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199aa; PC = 0x8004c7c *)
ghost L0x200199aa_f@sint32 : L0x200199aa_f = r9 && L0x200199aa_f = r9;
split discard L0x200199aa_u r9 16;
cast L0x200199aa@sint16 L0x200199aa_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199ea; PC = 0x8004c80 *)
ghost L0x200199ea_f@sint32 : L0x200199ea_f = r10 && L0x200199ea_f = r10;
split discard L0x200199ea_u r10 16;
cast L0x200199ea@sint16 L0x200199ea_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a2a; PC = 0x8004c84 *)
ghost L0x20019a2a_f@sint32 : L0x20019a2a_f = r11 && L0x20019a2a_f = r11;
split discard L0x20019a2a_u r11 16;
cast L0x20019a2a@sint16 L0x20019a2a_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001986a; PC = 0x8004c88 *)
ghost L0x2001986a_f@sint32 : L0x2001986a_f = r4 && L0x2001986a_f = r4;
split discard L0x2001986a_u r4 16;
cast L0x2001986a@sint16 L0x2001986a_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a310; Value = 0xfff21a45; PC = 0x80048c8 *)
mov r5 L0x2001a310;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a390; Value = 0xffb35f2e; PC = 0x80048cc *)
mov r6 L0x2001a390;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a410; Value = 0xffce3a36; PC = 0x80048d0 *)
mov r7 L0x2001a410;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a490; Value = 0xffb9ee1c; PC = 0x80048d4 *)
mov r8 L0x2001a490;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a510; Value = 0x006ead93; PC = 0x80048d8 *)
mov r9 L0x2001a510;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a590; Value = 0xffc55cdf; PC = 0x80048dc *)
mov r10 L0x2001a590;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a610; Value = 0xffe95ed2; PC = 0x80048e0 *)
mov r11 L0x2001a610;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a290; Value = 0xff75f36a; PC = 0x80048e4 *)
mov r4 L0x2001a290;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198ac; PC = 0x8004a88 *)
ghost L0x200198ac_f@sint32 : L0x200198ac_f = r5 && L0x200198ac_f = r5;
split discard L0x200198ac_u r5 16;
cast L0x200198ac@sint16 L0x200198ac_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198ec; PC = 0x8004a8c *)
ghost L0x200198ec_f@sint32 : L0x200198ec_f = r6 && L0x200198ec_f = r6;
split discard L0x200198ec_u r6 16;
cast L0x200198ec@sint16 L0x200198ec_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001992c; PC = 0x8004a90 *)
ghost L0x2001992c_f@sint32 : L0x2001992c_f = r7 && L0x2001992c_f = r7;
split discard L0x2001992c_u r7 16;
cast L0x2001992c@sint16 L0x2001992c_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001996c; PC = 0x8004a94 *)
ghost L0x2001996c_f@sint32 : L0x2001996c_f = r8 && L0x2001996c_f = r8;
split discard L0x2001996c_u r8 16;
cast L0x2001996c@sint16 L0x2001996c_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199ac; PC = 0x8004a98 *)
ghost L0x200199ac_f@sint32 : L0x200199ac_f = r9 && L0x200199ac_f = r9;
split discard L0x200199ac_u r9 16;
cast L0x200199ac@sint16 L0x200199ac_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199ec; PC = 0x8004a9c *)
ghost L0x200199ec_f@sint32 : L0x200199ec_f = r10 && L0x200199ec_f = r10;
split discard L0x200199ec_u r10 16;
cast L0x200199ec@sint16 L0x200199ec_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a2c; PC = 0x8004aa0 *)
ghost L0x20019a2c_f@sint32 : L0x20019a2c_f = r11 && L0x20019a2c_f = r11;
split discard L0x20019a2c_u r11 16;
cast L0x20019a2c@sint16 L0x20019a2c_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001986c; PC = 0x8004aa4 *)
ghost L0x2001986c_f@sint32 : L0x2001986c_f = r4 && L0x2001986c_f = r4;
split discard L0x2001986c_u r4 16;
cast L0x2001986c@sint16 L0x2001986c_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a314; Value = 0x006b39e4; PC = 0x8004aac *)
mov r5 L0x2001a314;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a394; Value = 0x005c76b1; PC = 0x8004ab0 *)
mov r6 L0x2001a394;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a414; Value = 0x000bce4e; PC = 0x8004ab4 *)
mov r7 L0x2001a414;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a494; Value = 0xff87b6a9; PC = 0x8004ab8 *)
mov r8 L0x2001a494;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a514; Value = 0xff4c1a38; PC = 0x8004abc *)
mov r9 L0x2001a514;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a594; Value = 0x0043a72d; PC = 0x8004ac0 *)
mov r10 L0x2001a594;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a614; Value = 0x00615a8f; PC = 0x8004ac4 *)
mov r11 L0x2001a614;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a294; Value = 0x0089598e; PC = 0x8004ac8 *)
mov r4 L0x2001a294;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198ae; PC = 0x8004c6c *)
ghost L0x200198ae_f@sint32 : L0x200198ae_f = r5 && L0x200198ae_f = r5;
split discard L0x200198ae_u r5 16;
cast L0x200198ae@sint16 L0x200198ae_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198ee; PC = 0x8004c70 *)
ghost L0x200198ee_f@sint32 : L0x200198ee_f = r6 && L0x200198ee_f = r6;
split discard L0x200198ee_u r6 16;
cast L0x200198ee@sint16 L0x200198ee_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001992e; PC = 0x8004c74 *)
ghost L0x2001992e_f@sint32 : L0x2001992e_f = r7 && L0x2001992e_f = r7;
split discard L0x2001992e_u r7 16;
cast L0x2001992e@sint16 L0x2001992e_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001996e; PC = 0x8004c78 *)
ghost L0x2001996e_f@sint32 : L0x2001996e_f = r8 && L0x2001996e_f = r8;
split discard L0x2001996e_u r8 16;
cast L0x2001996e@sint16 L0x2001996e_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199ae; PC = 0x8004c7c *)
ghost L0x200199ae_f@sint32 : L0x200199ae_f = r9 && L0x200199ae_f = r9;
split discard L0x200199ae_u r9 16;
cast L0x200199ae@sint16 L0x200199ae_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199ee; PC = 0x8004c80 *)
ghost L0x200199ee_f@sint32 : L0x200199ee_f = r10 && L0x200199ee_f = r10;
split discard L0x200199ee_u r10 16;
cast L0x200199ee@sint16 L0x200199ee_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a2e; PC = 0x8004c84 *)
ghost L0x20019a2e_f@sint32 : L0x20019a2e_f = r11 && L0x20019a2e_f = r11;
split discard L0x20019a2e_u r11 16;
cast L0x20019a2e@sint16 L0x20019a2e_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001986e; PC = 0x8004c88 *)
ghost L0x2001986e_f@sint32 : L0x2001986e_f = r4 && L0x2001986e_f = r4;
split discard L0x2001986e_u r4 16;
cast L0x2001986e@sint16 L0x2001986e_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a318; Value = 0x00a7c3cb; PC = 0x80048c8 *)
mov r5 L0x2001a318;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a398; Value = 0x00148e2b; PC = 0x80048cc *)
mov r6 L0x2001a398;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a418; Value = 0x0089a4af; PC = 0x80048d0 *)
mov r7 L0x2001a418;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a498; Value = 0x003cd8e1; PC = 0x80048d4 *)
mov r8 L0x2001a498;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a518; Value = 0x003d1600; PC = 0x80048d8 *)
mov r9 L0x2001a518;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a598; Value = 0xffe8762b; PC = 0x80048dc *)
mov r10 L0x2001a598;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a618; Value = 0x00816944; PC = 0x80048e0 *)
mov r11 L0x2001a618;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a298; Value = 0xfffd94d6; PC = 0x80048e4 *)
mov r4 L0x2001a298;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198b0; PC = 0x8004a88 *)
ghost L0x200198b0_f@sint32 : L0x200198b0_f = r5 && L0x200198b0_f = r5;
split discard L0x200198b0_u r5 16;
cast L0x200198b0@sint16 L0x200198b0_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198f0; PC = 0x8004a8c *)
ghost L0x200198f0_f@sint32 : L0x200198f0_f = r6 && L0x200198f0_f = r6;
split discard L0x200198f0_u r6 16;
cast L0x200198f0@sint16 L0x200198f0_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019930; PC = 0x8004a90 *)
ghost L0x20019930_f@sint32 : L0x20019930_f = r7 && L0x20019930_f = r7;
split discard L0x20019930_u r7 16;
cast L0x20019930@sint16 L0x20019930_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019970; PC = 0x8004a94 *)
ghost L0x20019970_f@sint32 : L0x20019970_f = r8 && L0x20019970_f = r8;
split discard L0x20019970_u r8 16;
cast L0x20019970@sint16 L0x20019970_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199b0; PC = 0x8004a98 *)
ghost L0x200199b0_f@sint32 : L0x200199b0_f = r9 && L0x200199b0_f = r9;
split discard L0x200199b0_u r9 16;
cast L0x200199b0@sint16 L0x200199b0_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199f0; PC = 0x8004a9c *)
ghost L0x200199f0_f@sint32 : L0x200199f0_f = r10 && L0x200199f0_f = r10;
split discard L0x200199f0_u r10 16;
cast L0x200199f0@sint16 L0x200199f0_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a30; PC = 0x8004aa0 *)
ghost L0x20019a30_f@sint32 : L0x20019a30_f = r11 && L0x20019a30_f = r11;
split discard L0x20019a30_u r11 16;
cast L0x20019a30@sint16 L0x20019a30_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019870; PC = 0x8004aa4 *)
ghost L0x20019870_f@sint32 : L0x20019870_f = r4 && L0x20019870_f = r4;
split discard L0x20019870_u r4 16;
cast L0x20019870@sint16 L0x20019870_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a31c; Value = 0x007c74a1; PC = 0x8004aac *)
mov r5 L0x2001a31c;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a39c; Value = 0x009f83a7; PC = 0x8004ab0 *)
mov r6 L0x2001a39c;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a41c; Value = 0x00acbb25; PC = 0x8004ab4 *)
mov r7 L0x2001a41c;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a49c; Value = 0xff81a82c; PC = 0x8004ab8 *)
mov r8 L0x2001a49c;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a51c; Value = 0x0073ba0c; PC = 0x8004abc *)
mov r9 L0x2001a51c;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a59c; Value = 0x00adcb00; PC = 0x8004ac0 *)
mov r10 L0x2001a59c;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a61c; Value = 0x006b9391; PC = 0x8004ac4 *)
mov r11 L0x2001a61c;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a29c; Value = 0xffecc9ad; PC = 0x8004ac8 *)
mov r4 L0x2001a29c;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198b2; PC = 0x8004c6c *)
ghost L0x200198b2_f@sint32 : L0x200198b2_f = r5 && L0x200198b2_f = r5;
split discard L0x200198b2_u r5 16;
cast L0x200198b2@sint16 L0x200198b2_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198f2; PC = 0x8004c70 *)
ghost L0x200198f2_f@sint32 : L0x200198f2_f = r6 && L0x200198f2_f = r6;
split discard L0x200198f2_u r6 16;
cast L0x200198f2@sint16 L0x200198f2_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019932; PC = 0x8004c74 *)
ghost L0x20019932_f@sint32 : L0x20019932_f = r7 && L0x20019932_f = r7;
split discard L0x20019932_u r7 16;
cast L0x20019932@sint16 L0x20019932_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019972; PC = 0x8004c78 *)
ghost L0x20019972_f@sint32 : L0x20019972_f = r8 && L0x20019972_f = r8;
split discard L0x20019972_u r8 16;
cast L0x20019972@sint16 L0x20019972_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199b2; PC = 0x8004c7c *)
ghost L0x200199b2_f@sint32 : L0x200199b2_f = r9 && L0x200199b2_f = r9;
split discard L0x200199b2_u r9 16;
cast L0x200199b2@sint16 L0x200199b2_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199f2; PC = 0x8004c80 *)
ghost L0x200199f2_f@sint32 : L0x200199f2_f = r10 && L0x200199f2_f = r10;
split discard L0x200199f2_u r10 16;
cast L0x200199f2@sint16 L0x200199f2_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a32; PC = 0x8004c84 *)
ghost L0x20019a32_f@sint32 : L0x20019a32_f = r11 && L0x20019a32_f = r11;
split discard L0x20019a32_u r11 16;
cast L0x20019a32@sint16 L0x20019a32_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019872; PC = 0x8004c88 *)
ghost L0x20019872_f@sint32 : L0x20019872_f = r4 && L0x20019872_f = r4;
split discard L0x20019872_u r4 16;
cast L0x20019872@sint16 L0x20019872_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a320; Value = 0xff6036e6; PC = 0x80048c8 *)
mov r5 L0x2001a320;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3a0; Value = 0x0038d910; PC = 0x80048cc *)
mov r6 L0x2001a3a0;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a420; Value = 0x00b97918; PC = 0x80048d0 *)
mov r7 L0x2001a420;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4a0; Value = 0x004afc63; PC = 0x80048d4 *)
mov r8 L0x2001a4a0;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a520; Value = 0x00a76a61; PC = 0x80048d8 *)
mov r9 L0x2001a520;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5a0; Value = 0x007cc868; PC = 0x80048dc *)
mov r10 L0x2001a5a0;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a620; Value = 0x003ba448; PC = 0x80048e0 *)
mov r11 L0x2001a620;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2a0; Value = 0xfffa8cbb; PC = 0x80048e4 *)
mov r4 L0x2001a2a0;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198b4; PC = 0x8004a88 *)
ghost L0x200198b4_f@sint32 : L0x200198b4_f = r5 && L0x200198b4_f = r5;
split discard L0x200198b4_u r5 16;
cast L0x200198b4@sint16 L0x200198b4_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198f4; PC = 0x8004a8c *)
ghost L0x200198f4_f@sint32 : L0x200198f4_f = r6 && L0x200198f4_f = r6;
split discard L0x200198f4_u r6 16;
cast L0x200198f4@sint16 L0x200198f4_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019934; PC = 0x8004a90 *)
ghost L0x20019934_f@sint32 : L0x20019934_f = r7 && L0x20019934_f = r7;
split discard L0x20019934_u r7 16;
cast L0x20019934@sint16 L0x20019934_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019974; PC = 0x8004a94 *)
ghost L0x20019974_f@sint32 : L0x20019974_f = r8 && L0x20019974_f = r8;
split discard L0x20019974_u r8 16;
cast L0x20019974@sint16 L0x20019974_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199b4; PC = 0x8004a98 *)
ghost L0x200199b4_f@sint32 : L0x200199b4_f = r9 && L0x200199b4_f = r9;
split discard L0x200199b4_u r9 16;
cast L0x200199b4@sint16 L0x200199b4_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199f4; PC = 0x8004a9c *)
ghost L0x200199f4_f@sint32 : L0x200199f4_f = r10 && L0x200199f4_f = r10;
split discard L0x200199f4_u r10 16;
cast L0x200199f4@sint16 L0x200199f4_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a34; PC = 0x8004aa0 *)
ghost L0x20019a34_f@sint32 : L0x20019a34_f = r11 && L0x20019a34_f = r11;
split discard L0x20019a34_u r11 16;
cast L0x20019a34@sint16 L0x20019a34_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019874; PC = 0x8004aa4 *)
ghost L0x20019874_f@sint32 : L0x20019874_f = r4 && L0x20019874_f = r4;
split discard L0x20019874_u r4 16;
cast L0x20019874@sint16 L0x20019874_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a324; Value = 0x005fc0f9; PC = 0x8004aac *)
mov r5 L0x2001a324;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3a4; Value = 0x0011194c; PC = 0x8004ab0 *)
mov r6 L0x2001a3a4;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a424; Value = 0x007ade34; PC = 0x8004ab4 *)
mov r7 L0x2001a424;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4a4; Value = 0x0006791e; PC = 0x8004ab8 *)
mov r8 L0x2001a4a4;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a524; Value = 0xffa67d7c; PC = 0x8004abc *)
mov r9 L0x2001a524;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5a4; Value = 0x0048bec4; PC = 0x8004ac0 *)
mov r10 L0x2001a5a4;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a624; Value = 0x0065a971; PC = 0x8004ac4 *)
mov r11 L0x2001a624;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2a4; Value = 0xff654d1a; PC = 0x8004ac8 *)
mov r4 L0x2001a2a4;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198b6; PC = 0x8004c6c *)
ghost L0x200198b6_f@sint32 : L0x200198b6_f = r5 && L0x200198b6_f = r5;
split discard L0x200198b6_u r5 16;
cast L0x200198b6@sint16 L0x200198b6_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198f6; PC = 0x8004c70 *)
ghost L0x200198f6_f@sint32 : L0x200198f6_f = r6 && L0x200198f6_f = r6;
split discard L0x200198f6_u r6 16;
cast L0x200198f6@sint16 L0x200198f6_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019936; PC = 0x8004c74 *)
ghost L0x20019936_f@sint32 : L0x20019936_f = r7 && L0x20019936_f = r7;
split discard L0x20019936_u r7 16;
cast L0x20019936@sint16 L0x20019936_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019976; PC = 0x8004c78 *)
ghost L0x20019976_f@sint32 : L0x20019976_f = r8 && L0x20019976_f = r8;
split discard L0x20019976_u r8 16;
cast L0x20019976@sint16 L0x20019976_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199b6; PC = 0x8004c7c *)
ghost L0x200199b6_f@sint32 : L0x200199b6_f = r9 && L0x200199b6_f = r9;
split discard L0x200199b6_u r9 16;
cast L0x200199b6@sint16 L0x200199b6_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199f6; PC = 0x8004c80 *)
ghost L0x200199f6_f@sint32 : L0x200199f6_f = r10 && L0x200199f6_f = r10;
split discard L0x200199f6_u r10 16;
cast L0x200199f6@sint16 L0x200199f6_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a36; PC = 0x8004c84 *)
ghost L0x20019a36_f@sint32 : L0x20019a36_f = r11 && L0x20019a36_f = r11;
split discard L0x20019a36_u r11 16;
cast L0x20019a36@sint16 L0x20019a36_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019876; PC = 0x8004c88 *)
ghost L0x20019876_f@sint32 : L0x20019876_f = r4 && L0x20019876_f = r4;
split discard L0x20019876_u r4 16;
cast L0x20019876@sint16 L0x20019876_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a328; Value = 0xff705e77; PC = 0x80048c8 *)
mov r5 L0x2001a328;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3a8; Value = 0x00648990; PC = 0x80048cc *)
mov r6 L0x2001a3a8;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a428; Value = 0xff52dd4d; PC = 0x80048d0 *)
mov r7 L0x2001a428;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4a8; Value = 0xff67a475; PC = 0x80048d4 *)
mov r8 L0x2001a4a8;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a528; Value = 0x00bcbd0e; PC = 0x80048d8 *)
mov r9 L0x2001a528;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5a8; Value = 0xffbab2b3; PC = 0x80048dc *)
mov r10 L0x2001a5a8;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a628; Value = 0x00b9e7ce; PC = 0x80048e0 *)
mov r11 L0x2001a628;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2a8; Value = 0xff4469ae; PC = 0x80048e4 *)
mov r4 L0x2001a2a8;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198b8; PC = 0x8004a88 *)
ghost L0x200198b8_f@sint32 : L0x200198b8_f = r5 && L0x200198b8_f = r5;
split discard L0x200198b8_u r5 16;
cast L0x200198b8@sint16 L0x200198b8_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198f8; PC = 0x8004a8c *)
ghost L0x200198f8_f@sint32 : L0x200198f8_f = r6 && L0x200198f8_f = r6;
split discard L0x200198f8_u r6 16;
cast L0x200198f8@sint16 L0x200198f8_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019938; PC = 0x8004a90 *)
ghost L0x20019938_f@sint32 : L0x20019938_f = r7 && L0x20019938_f = r7;
split discard L0x20019938_u r7 16;
cast L0x20019938@sint16 L0x20019938_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019978; PC = 0x8004a94 *)
ghost L0x20019978_f@sint32 : L0x20019978_f = r8 && L0x20019978_f = r8;
split discard L0x20019978_u r8 16;
cast L0x20019978@sint16 L0x20019978_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199b8; PC = 0x8004a98 *)
ghost L0x200199b8_f@sint32 : L0x200199b8_f = r9 && L0x200199b8_f = r9;
split discard L0x200199b8_u r9 16;
cast L0x200199b8@sint16 L0x200199b8_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199f8; PC = 0x8004a9c *)
ghost L0x200199f8_f@sint32 : L0x200199f8_f = r10 && L0x200199f8_f = r10;
split discard L0x200199f8_u r10 16;
cast L0x200199f8@sint16 L0x200199f8_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a38; PC = 0x8004aa0 *)
ghost L0x20019a38_f@sint32 : L0x20019a38_f = r11 && L0x20019a38_f = r11;
split discard L0x20019a38_u r11 16;
cast L0x20019a38@sint16 L0x20019a38_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019878; PC = 0x8004aa4 *)
ghost L0x20019878_f@sint32 : L0x20019878_f = r4 && L0x20019878_f = r4;
split discard L0x20019878_u r4 16;
cast L0x20019878@sint16 L0x20019878_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a32c; Value = 0x001de55f; PC = 0x8004aac *)
mov r5 L0x2001a32c;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3ac; Value = 0xff4e2e4f; PC = 0x8004ab0 *)
mov r6 L0x2001a3ac;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a42c; Value = 0xff5e80bf; PC = 0x8004ab4 *)
mov r7 L0x2001a42c;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4ac; Value = 0x0021a108; PC = 0x8004ab8 *)
mov r8 L0x2001a4ac;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a52c; Value = 0xffc5190e; PC = 0x8004abc *)
mov r9 L0x2001a52c;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5ac; Value = 0x007fa401; PC = 0x8004ac0 *)
mov r10 L0x2001a5ac;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a62c; Value = 0xffc8cfef; PC = 0x8004ac4 *)
mov r11 L0x2001a62c;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2ac; Value = 0x0093c003; PC = 0x8004ac8 *)
mov r4 L0x2001a2ac;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198ba; PC = 0x8004c6c *)
ghost L0x200198ba_f@sint32 : L0x200198ba_f = r5 && L0x200198ba_f = r5;
split discard L0x200198ba_u r5 16;
cast L0x200198ba@sint16 L0x200198ba_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198fa; PC = 0x8004c70 *)
ghost L0x200198fa_f@sint32 : L0x200198fa_f = r6 && L0x200198fa_f = r6;
split discard L0x200198fa_u r6 16;
cast L0x200198fa@sint16 L0x200198fa_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001993a; PC = 0x8004c74 *)
ghost L0x2001993a_f@sint32 : L0x2001993a_f = r7 && L0x2001993a_f = r7;
split discard L0x2001993a_u r7 16;
cast L0x2001993a@sint16 L0x2001993a_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001997a; PC = 0x8004c78 *)
ghost L0x2001997a_f@sint32 : L0x2001997a_f = r8 && L0x2001997a_f = r8;
split discard L0x2001997a_u r8 16;
cast L0x2001997a@sint16 L0x2001997a_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199ba; PC = 0x8004c7c *)
ghost L0x200199ba_f@sint32 : L0x200199ba_f = r9 && L0x200199ba_f = r9;
split discard L0x200199ba_u r9 16;
cast L0x200199ba@sint16 L0x200199ba_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199fa; PC = 0x8004c80 *)
ghost L0x200199fa_f@sint32 : L0x200199fa_f = r10 && L0x200199fa_f = r10;
split discard L0x200199fa_u r10 16;
cast L0x200199fa@sint16 L0x200199fa_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a3a; PC = 0x8004c84 *)
ghost L0x20019a3a_f@sint32 : L0x20019a3a_f = r11 && L0x20019a3a_f = r11;
split discard L0x20019a3a_u r11 16;
cast L0x20019a3a@sint16 L0x20019a3a_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001987a; PC = 0x8004c88 *)
ghost L0x2001987a_f@sint32 : L0x2001987a_f = r4 && L0x2001987a_f = r4;
split discard L0x2001987a_u r4 16;
cast L0x2001987a@sint16 L0x2001987a_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a330; Value = 0x00bad9e3; PC = 0x80048c8 *)
mov r5 L0x2001a330;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3b0; Value = 0x00520fed; PC = 0x80048cc *)
mov r6 L0x2001a3b0;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a430; Value = 0x00803698; PC = 0x80048d0 *)
mov r7 L0x2001a430;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4b0; Value = 0xffe64d8d; PC = 0x80048d4 *)
mov r8 L0x2001a4b0;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a530; Value = 0x008dca64; PC = 0x80048d8 *)
mov r9 L0x2001a530;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5b0; Value = 0x0049017e; PC = 0x80048dc *)
mov r10 L0x2001a5b0;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a630; Value = 0xffecd2c6; PC = 0x80048e0 *)
mov r11 L0x2001a630;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2b0; Value = 0x005ac2fc; PC = 0x80048e4 *)
mov r4 L0x2001a2b0;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198bc; PC = 0x8004a88 *)
ghost L0x200198bc_f@sint32 : L0x200198bc_f = r5 && L0x200198bc_f = r5;
split discard L0x200198bc_u r5 16;
cast L0x200198bc@sint16 L0x200198bc_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198fc; PC = 0x8004a8c *)
ghost L0x200198fc_f@sint32 : L0x200198fc_f = r6 && L0x200198fc_f = r6;
split discard L0x200198fc_u r6 16;
cast L0x200198fc@sint16 L0x200198fc_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001993c; PC = 0x8004a90 *)
ghost L0x2001993c_f@sint32 : L0x2001993c_f = r7 && L0x2001993c_f = r7;
split discard L0x2001993c_u r7 16;
cast L0x2001993c@sint16 L0x2001993c_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001997c; PC = 0x8004a94 *)
ghost L0x2001997c_f@sint32 : L0x2001997c_f = r8 && L0x2001997c_f = r8;
split discard L0x2001997c_u r8 16;
cast L0x2001997c@sint16 L0x2001997c_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199bc; PC = 0x8004a98 *)
ghost L0x200199bc_f@sint32 : L0x200199bc_f = r9 && L0x200199bc_f = r9;
split discard L0x200199bc_u r9 16;
cast L0x200199bc@sint16 L0x200199bc_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199fc; PC = 0x8004a9c *)
ghost L0x200199fc_f@sint32 : L0x200199fc_f = r10 && L0x200199fc_f = r10;
split discard L0x200199fc_u r10 16;
cast L0x200199fc@sint16 L0x200199fc_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a3c; PC = 0x8004aa0 *)
ghost L0x20019a3c_f@sint32 : L0x20019a3c_f = r11 && L0x20019a3c_f = r11;
split discard L0x20019a3c_u r11 16;
cast L0x20019a3c@sint16 L0x20019a3c_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001987c; PC = 0x8004aa4 *)
ghost L0x2001987c_f@sint32 : L0x2001987c_f = r4 && L0x2001987c_f = r4;
split discard L0x2001987c_u r4 16;
cast L0x2001987c@sint16 L0x2001987c_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a334; Value = 0x0050cea3; PC = 0x8004aac *)
mov r5 L0x2001a334;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3b4; Value = 0x007f516e; PC = 0x8004ab0 *)
mov r6 L0x2001a3b4;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a434; Value = 0xff6ff96e; PC = 0x8004ab4 *)
mov r7 L0x2001a434;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4b4; Value = 0xffec4ef9; PC = 0x8004ab8 *)
mov r8 L0x2001a4b4;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a534; Value = 0xff7c7a18; PC = 0x8004abc *)
mov r9 L0x2001a534;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5b4; Value = 0xff5b1c5d; PC = 0x8004ac0 *)
mov r10 L0x2001a5b4;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a634; Value = 0x006928ea; PC = 0x8004ac4 *)
mov r11 L0x2001a634;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2b4; Value = 0xff9564ab; PC = 0x8004ac8 *)
mov r4 L0x2001a2b4;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198be; PC = 0x8004c6c *)
ghost L0x200198be_f@sint32 : L0x200198be_f = r5 && L0x200198be_f = r5;
split discard L0x200198be_u r5 16;
cast L0x200198be@sint16 L0x200198be_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x200198fe; PC = 0x8004c70 *)
ghost L0x200198fe_f@sint32 : L0x200198fe_f = r6 && L0x200198fe_f = r6;
split discard L0x200198fe_u r6 16;
cast L0x200198fe@sint16 L0x200198fe_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x2001993e; PC = 0x8004c74 *)
ghost L0x2001993e_f@sint32 : L0x2001993e_f = r7 && L0x2001993e_f = r7;
split discard L0x2001993e_u r7 16;
cast L0x2001993e@sint16 L0x2001993e_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x2001997e; PC = 0x8004c78 *)
ghost L0x2001997e_f@sint32 : L0x2001997e_f = r8 && L0x2001997e_f = r8;
split discard L0x2001997e_u r8 16;
cast L0x2001997e@sint16 L0x2001997e_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199be; PC = 0x8004c7c *)
ghost L0x200199be_f@sint32 : L0x200199be_f = r9 && L0x200199be_f = r9;
split discard L0x200199be_u r9 16;
cast L0x200199be@sint16 L0x200199be_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x200199fe; PC = 0x8004c80 *)
ghost L0x200199fe_f@sint32 : L0x200199fe_f = r10 && L0x200199fe_f = r10;
split discard L0x200199fe_u r10 16;
cast L0x200199fe@sint16 L0x200199fe_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a3e; PC = 0x8004c84 *)
ghost L0x20019a3e_f@sint32 : L0x20019a3e_f = r11 && L0x20019a3e_f = r11;
split discard L0x20019a3e_u r11 16;
cast L0x20019a3e@sint16 L0x20019a3e_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x2001987e; PC = 0x8004c88 *)
ghost L0x2001987e_f@sint32 : L0x2001987e_f = r4 && L0x2001987e_f = r4;
split discard L0x2001987e_u r4 16;
cast L0x2001987e@sint16 L0x2001987e_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a338; Value = 0x00305261; PC = 0x80048c8 *)
mov r5 L0x2001a338;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3b8; Value = 0x00655d6a; PC = 0x80048cc *)
mov r6 L0x2001a3b8;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a438; Value = 0x008ac825; PC = 0x80048d0 *)
mov r7 L0x2001a438;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4b8; Value = 0x008b803f; PC = 0x80048d4 *)
mov r8 L0x2001a4b8;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a538; Value = 0x005c2c5f; PC = 0x80048d8 *)
mov r9 L0x2001a538;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5b8; Value = 0x00013c5b; PC = 0x80048dc *)
mov r10 L0x2001a5b8;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a638; Value = 0x0047b2b5; PC = 0x80048e0 *)
mov r11 L0x2001a638;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2b8; Value = 0x000cffe6; PC = 0x80048e4 *)
mov r4 L0x2001a2b8;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198c0; PC = 0x8004a88 *)
ghost L0x200198c0_f@sint32 : L0x200198c0_f = r5 && L0x200198c0_f = r5;
split discard L0x200198c0_u r5 16;
cast L0x200198c0@sint16 L0x200198c0_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x20019900; PC = 0x8004a8c *)
ghost L0x20019900_f@sint32 : L0x20019900_f = r6 && L0x20019900_f = r6;
split discard L0x20019900_u r6 16;
cast L0x20019900@sint16 L0x20019900_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019940; PC = 0x8004a90 *)
ghost L0x20019940_f@sint32 : L0x20019940_f = r7 && L0x20019940_f = r7;
split discard L0x20019940_u r7 16;
cast L0x20019940@sint16 L0x20019940_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019980; PC = 0x8004a94 *)
ghost L0x20019980_f@sint32 : L0x20019980_f = r8 && L0x20019980_f = r8;
split discard L0x20019980_u r8 16;
cast L0x20019980@sint16 L0x20019980_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199c0; PC = 0x8004a98 *)
ghost L0x200199c0_f@sint32 : L0x200199c0_f = r9 && L0x200199c0_f = r9;
split discard L0x200199c0_u r9 16;
cast L0x200199c0@sint16 L0x200199c0_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x20019a00; PC = 0x8004a9c *)
ghost L0x20019a00_f@sint32 : L0x20019a00_f = r10 && L0x20019a00_f = r10;
split discard L0x20019a00_u r10 16;
cast L0x20019a00@sint16 L0x20019a00_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a40; PC = 0x8004aa0 *)
ghost L0x20019a40_f@sint32 : L0x20019a40_f = r11 && L0x20019a40_f = r11;
split discard L0x20019a40_u r11 16;
cast L0x20019a40@sint16 L0x20019a40_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019880; PC = 0x8004aa4 *)
ghost L0x20019880_f@sint32 : L0x20019880_f = r4 && L0x20019880_f = r4;
split discard L0x20019880_u r4 16;
cast L0x20019880@sint16 L0x20019880_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a33c; Value = 0xff97edd9; PC = 0x8004aac *)
mov r5 L0x2001a33c;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3bc; Value = 0xffac559d; PC = 0x8004ab0 *)
mov r6 L0x2001a3bc;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a43c; Value = 0xffe2ad64; PC = 0x8004ab4 *)
mov r7 L0x2001a43c;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4bc; Value = 0xff43325f; PC = 0x8004ab8 *)
mov r8 L0x2001a4bc;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a53c; Value = 0xffae9fa9; PC = 0x8004abc *)
mov r9 L0x2001a53c;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5bc; Value = 0xffbb4814; PC = 0x8004ac0 *)
mov r10 L0x2001a5bc;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a63c; Value = 0xffe4ca89; PC = 0x8004ac4 *)
mov r11 L0x2001a63c;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2bc; Value = 0xffd2ada1; PC = 0x8004ac8 *)
mov r4 L0x2001a2bc;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198c2; PC = 0x8004c6c *)
ghost L0x200198c2_f@sint32 : L0x200198c2_f = r5 && L0x200198c2_f = r5;
split discard L0x200198c2_u r5 16;
cast L0x200198c2@sint16 L0x200198c2_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x20019902; PC = 0x8004c70 *)
ghost L0x20019902_f@sint32 : L0x20019902_f = r6 && L0x20019902_f = r6;
split discard L0x20019902_u r6 16;
cast L0x20019902@sint16 L0x20019902_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019942; PC = 0x8004c74 *)
ghost L0x20019942_f@sint32 : L0x20019942_f = r7 && L0x20019942_f = r7;
split discard L0x20019942_u r7 16;
cast L0x20019942@sint16 L0x20019942_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019982; PC = 0x8004c78 *)
ghost L0x20019982_f@sint32 : L0x20019982_f = r8 && L0x20019982_f = r8;
split discard L0x20019982_u r8 16;
cast L0x20019982@sint16 L0x20019982_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199c2; PC = 0x8004c7c *)
ghost L0x200199c2_f@sint32 : L0x200199c2_f = r9 && L0x200199c2_f = r9;
split discard L0x200199c2_u r9 16;
cast L0x200199c2@sint16 L0x200199c2_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x20019a02; PC = 0x8004c80 *)
ghost L0x20019a02_f@sint32 : L0x20019a02_f = r10 && L0x20019a02_f = r10;
split discard L0x20019a02_u r10 16;
cast L0x20019a02@sint16 L0x20019a02_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a42; PC = 0x8004c84 *)
ghost L0x20019a42_f@sint32 : L0x20019a42_f = r11 && L0x20019a42_f = r11;
split discard L0x20019a42_u r11 16;
cast L0x20019a42@sint16 L0x20019a42_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019882; PC = 0x8004c88 *)
ghost L0x20019882_f@sint32 : L0x20019882_f = r4 && L0x20019882_f = r4;
split discard L0x20019882_u r4 16;
cast L0x20019882@sint16 L0x20019882_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a340; Value = 0x0002381f; PC = 0x80048c8 *)
mov r5 L0x2001a340;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3c0; Value = 0xff55d32b; PC = 0x80048cc *)
mov r6 L0x2001a3c0;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a440; Value = 0x00883565; PC = 0x80048d0 *)
mov r7 L0x2001a440;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4c0; Value = 0x00695eb8; PC = 0x80048d4 *)
mov r8 L0x2001a4c0;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a540; Value = 0xff951116; PC = 0x80048d8 *)
mov r9 L0x2001a540;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5c0; Value = 0xff439686; PC = 0x80048dc *)
mov r10 L0x2001a5c0;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a640; Value = 0xff969066; PC = 0x80048e0 *)
mov r11 L0x2001a640;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2c0; Value = 0x0005e881; PC = 0x80048e4 *)
mov r4 L0x2001a2c0;
(* add	r4, r5                                      #! PC = 0x80048e8 *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x80048ea *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x80048ec *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x80048ee *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x80048f0 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x80048f4 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x80048f8 *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x80048fc *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004900 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004904 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004908 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x800490c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004910 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004914 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004918 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x800491c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004920 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004924 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004928 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x800492c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004930 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004934 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004938 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800493c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004940 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004942 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004944 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004946 *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004948 *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x800494c *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004950 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004954 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004958 *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x800495c *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004960 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004964 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004968 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800496c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004970 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004974 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004978 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x800497c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004980 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004984 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004988 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x800498c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004990 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004992 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004994 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004996 *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004998 *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x800499c *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x80049a0 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x80049a4 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x80049a8 *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x80049ac *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049b0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x80049b4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x80049b8 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049bc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x80049c0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x80049c4 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049c8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x80049cc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x80049d0 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049d4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x80049d8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x80049dc *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x80049e0 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049e4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x80049e8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x80049ec *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049f0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x80049f4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x80049f8 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x80049fc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004a00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004a04 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004a08 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004a0c *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004a10 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004a14 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004a1a *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004a20 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004a26 *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004a2c *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004a32 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004a38 *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004a3e *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004a44 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004a4c *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004a54 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004a5c *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004a64 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004a6c *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004a74 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004a7c *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004a84 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198c4; PC = 0x8004a88 *)
ghost L0x200198c4_f@sint32 : L0x200198c4_f = r5 && L0x200198c4_f = r5;
split discard L0x200198c4_u r5 16;
cast L0x200198c4@sint16 L0x200198c4_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x20019904; PC = 0x8004a8c *)
ghost L0x20019904_f@sint32 : L0x20019904_f = r6 && L0x20019904_f = r6;
split discard L0x20019904_u r6 16;
cast L0x20019904@sint16 L0x20019904_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019944; PC = 0x8004a90 *)
ghost L0x20019944_f@sint32 : L0x20019944_f = r7 && L0x20019944_f = r7;
split discard L0x20019944_u r7 16;
cast L0x20019944@sint16 L0x20019944_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019984; PC = 0x8004a94 *)
ghost L0x20019984_f@sint32 : L0x20019984_f = r8 && L0x20019984_f = r8;
split discard L0x20019984_u r8 16;
cast L0x20019984@sint16 L0x20019984_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199c4; PC = 0x8004a98 *)
ghost L0x200199c4_f@sint32 : L0x200199c4_f = r9 && L0x200199c4_f = r9;
split discard L0x200199c4_u r9 16;
cast L0x200199c4@sint16 L0x200199c4_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x20019a04; PC = 0x8004a9c *)
ghost L0x20019a04_f@sint32 : L0x20019a04_f = r10 && L0x20019a04_f = r10;
split discard L0x20019a04_u r10 16;
cast L0x20019a04@sint16 L0x20019a04_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a44; PC = 0x8004aa0 *)
ghost L0x20019a44_f@sint32 : L0x20019a44_f = r11 && L0x20019a44_f = r11;
split discard L0x20019a44_u r11 16;
cast L0x20019a44@sint16 L0x20019a44_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019884; PC = 0x8004aa4 *)
ghost L0x20019884_f@sint32 : L0x20019884_f = r4 && L0x20019884_f = r4;
split discard L0x20019884_u r4 16;
cast L0x20019884@sint16 L0x20019884_u;
(* vmov	s0, lr                                     #! PC = 0x8004aa8 *)
mov s0 lr;
(* ldr.w	r5, [r0, #128]	; 0x80                     #! EA = L0x2001a344; Value = 0x0043067f; PC = 0x8004aac *)
mov r5 L0x2001a344;
(* ldr.w	r6, [r0, #256]	; 0x100                    #! EA = L0x2001a3c4; Value = 0xffeb281e; PC = 0x8004ab0 *)
mov r6 L0x2001a3c4;
(* ldr.w	r7, [r0, #384]	; 0x180                    #! EA = L0x2001a444; Value = 0x0036aebf; PC = 0x8004ab4 *)
mov r7 L0x2001a444;
(* ldr.w	r8, [r0, #512]	; 0x200                    #! EA = L0x2001a4c4; Value = 0x0098fefa; PC = 0x8004ab8 *)
mov r8 L0x2001a4c4;
(* ldr.w	r9, [r0, #640]	; 0x280                    #! EA = L0x2001a544; Value = 0xffa72ebd; PC = 0x8004abc *)
mov r9 L0x2001a544;
(* ldr.w	r10, [r0, #768]	; 0x300                   #! EA = L0x2001a5c4; Value = 0xffd85068; PC = 0x8004ac0 *)
mov r10 L0x2001a5c4;
(* ldr.w	r11, [r0, #896]	; 0x380                   #! EA = L0x2001a644; Value = 0xff5d48f0; PC = 0x8004ac4 *)
mov r11 L0x2001a644;
(* ldr.w	r4, [r0], #4                              #! EA = L0x2001a2c4; Value = 0x00bac6b3; PC = 0x8004ac8 *)
mov r4 L0x2001a2c4;
(* add	r4, r5                                      #! PC = 0x8004acc *)
adds discard r4 r4 r5;
(* add	r6, r7                                      #! PC = 0x8004ace *)
adds discard r6 r6 r7;
(* add	r8, r9                                      #! PC = 0x8004ad0 *)
adds discard r8 r8 r9;
(* add	r10, r11                                    #! PC = 0x8004ad2 *)
adds discard r10 r10 r11;
(* sub.w	r5, r4, r5, lsl #1                        #! PC = 0x8004ad4 *)
shl tmp r5 1;
subs discard r5 r4 tmp;
(* sub.w	r7, r6, r7, lsl #1                        #! PC = 0x8004ad8 *)
shl tmp r7 1;
subs discard r7 r6 tmp;
(* sub.w	r9, r8, r9, lsl #1                        #! PC = 0x8004adc *)
shl tmp r9 1;
subs discard r9 r8 tmp;
(* sub.w	r11, r10, r11, lsl #1                     #! PC = 0x8004ae0 *)
shl tmp r11 1;
subs discard r11 r10 tmp;
(* vmov	r1, s7                                     #! PC = 0x8004ae4 *)
mov r1 s7;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004ae8 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004aec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004af0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s8                                     #! PC = 0x8004af4 *)
mov r1 s8;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004af8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004afc *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b00 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s9                                     #! PC = 0x8004b04 *)
mov r1 s9;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b08 *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b0c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004b10 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s10                                    #! PC = 0x8004b14 *)
mov r1 s10;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b18 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b1c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b20 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r6                                      #! PC = 0x8004b24 *)
adds discard r4 r4 r6;
(* add	r5, r7                                      #! PC = 0x8004b26 *)
adds discard r5 r5 r7;
(* add	r8, r10                                     #! PC = 0x8004b28 *)
adds discard r8 r8 r10;
(* add	r9, r11                                     #! PC = 0x8004b2a *)
adds discard r9 r9 r11;
(* sub.w	r6, r4, r6, lsl #1                        #! PC = 0x8004b2c *)
shl tmp r6 1;
subs discard r6 r4 tmp;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x8004b30 *)
shl tmp r7 1;
subs discard r7 r5 tmp;
(* sub.w	r10, r8, r10, lsl #1                      #! PC = 0x8004b34 *)
shl tmp r10 1;
subs discard r10 r8 tmp;
(* sub.w	r11, r9, r11, lsl #1                      #! PC = 0x8004b38 *)
shl tmp r11 1;
subs discard r11 r9 tmp;
(* vmov	r1, s5                                     #! PC = 0x8004b3c *)
mov r1 s5;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004b40 *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b44 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004b48 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004b4c *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b50 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004b54 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s6                                     #! PC = 0x8004b58 *)
mov r1 s6;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004b5c *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b60 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004b64 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004b68 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b6c *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004b70 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* add	r4, r8                                      #! PC = 0x8004b74 *)
adds discard r4 r4 r8;
(* add	r5, r9                                      #! PC = 0x8004b76 *)
adds discard r5 r5 r9;
(* add	r6, r10                                     #! PC = 0x8004b78 *)
adds discard r6 r6 r10;
(* add	r7, r11                                     #! PC = 0x8004b7a *)
adds discard r7 r7 r11;
(* sub.w	r8, r4, r8, lsl #1                        #! PC = 0x8004b7c *)
shl tmp r8 1;
subs discard r8 r4 tmp;
(* sub.w	r9, r5, r9, lsl #1                        #! PC = 0x8004b80 *)
shl tmp r9 1;
subs discard r9 r5 tmp;
(* sub.w	r10, r6, r10, lsl #1                      #! PC = 0x8004b84 *)
shl tmp r10 1;
subs discard r10 r6 tmp;
(* sub.w	r11, r7, r11, lsl #1                      #! PC = 0x8004b88 *)
shl tmp r11 1;
subs discard r11 r7 tmp;
(* vmov	r1, s4                                     #! PC = 0x8004b8c *)
mov r1 s4;
(* smull	r12, r8, r8, r1                           #! PC = 0x8004b90 *)
smull r8 r12 r8 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004b94 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r8, lr, r3                           #! PC = 0x8004b98 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r8 tmp_h r8 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r9, r9, r1                           #! PC = 0x8004b9c *)
smull r9 r12 r9 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004ba0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r9, lr, r3                           #! PC = 0x8004ba4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r9 tmp_h r9 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r10, r10, r1                         #! PC = 0x8004ba8 *)
smull r10 r12 r10 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bac *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r10, lr, r3                          #! PC = 0x8004bb0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r10 tmp_h r10 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r11, r11, r1                         #! PC = 0x8004bb4 *)
smull r11 r12 r11 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bb8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r11, lr, r3                          #! PC = 0x8004bbc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r11 tmp_h r11 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* vmov	r1, s15                                    #! PC = 0x8004bc0 *)
mov r1 s15;
(* smull	r12, r4, r4, r1                           #! PC = 0x8004bc4 *)
smull r4 r12 r4 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bc8 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r4, lr, r3                           #! PC = 0x8004bcc *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r4 tmp_h r4 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r5, r5, r1                           #! PC = 0x8004bd0 *)
smull r5 r12 r5 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bd4 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r5, lr, r3                           #! PC = 0x8004bd8 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r5 tmp_h r5 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r6, r6, r1                           #! PC = 0x8004bdc *)
smull r6 r12 r6 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004be0 *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r6, lr, r3                           #! PC = 0x8004be4 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r6 tmp_h r6 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* smull	r12, r7, r7, r1                           #! PC = 0x8004be8 *)
smull r7 r12 r7 r1;
(* mul.w	lr, r12, r2                               #! PC = 0x8004bec *)
cast r12_s@sint32 r12;
mull discard lr r12_s r2;
(* smlal	r12, r7, lr, r3                           #! PC = 0x8004bf0 *)
cast lr@sint32 lr;
smull tmp_h tmp_l lr r3;
uadds carry r12 tmp_l r12;
sadc r7 tmp_h r7 carry;
assert eqmod r12 0 (2**32) && true;
assume eq r12 0 && true;
(* mov.w	r1, r3, lsr #1                            #! PC = 0x8004bf4 *)
split r1 discard r3 1;
(* cmp	r4, r1                                      #! PC = 0x8004bf8 *)
sub cmp r4 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r4 r4 tmp;
(* cmn	r4, r1                                      #! PC = 0x8004bfe *)
add cmn r4 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r4 r4 tmp;
(* cmp	r5, r1                                      #! PC = 0x8004c04 *)
sub cmp r5 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r5 r5 tmp;
(* cmn	r5, r1                                      #! PC = 0x8004c0a *)
add cmn r5 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r5 r5 tmp;
(* cmp	r6, r1                                      #! PC = 0x8004c10 *)
sub cmp r6 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r6 r6 tmp;
(* cmn	r6, r1                                      #! PC = 0x8004c16 *)
add cmn r6 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r6 r6 tmp;
(* cmp	r7, r1                                      #! PC = 0x8004c1c *)
sub cmp r7 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r7 r7 tmp;
(* cmn	r7, r1                                      #! PC = 0x8004c22 *)
add cmn r7 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r7 r7 tmp;
(* cmp	r8, r1                                      #! PC = 0x8004c28 *)
sub cmp r8 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r8 r8 tmp;
(* cmn.w	r8, r1                                    #! PC = 0x8004c30 *)
add cmn r8 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r8 r8 tmp;
(* cmp	r9, r1                                      #! PC = 0x8004c38 *)
sub cmp r9 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r9 r9 tmp;
(* cmn.w	r9, r1                                    #! PC = 0x8004c40 *)
add cmn r9 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r9 r9 tmp;
(* cmp	r10, r1                                     #! PC = 0x8004c48 *)
sub cmp r10 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r10 r10 tmp;
(* cmn.w	r10, r1                                   #! PC = 0x8004c50 *)
add cmn r10 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r10 r10 tmp;
(* cmp	r11, r1                                     #! PC = 0x8004c58 *)
sub cmp r11 r1;
split sign discard cmp 31;
cast sign@bit sign;
cmov tmp sign 0@sint32 r3;
sub r11 r11 tmp;
(* cmn.w	r11, r1                                   #! PC = 0x8004c60 *)
add cmn r11 r1;
split sign discard cmn 31;
cast sign@bit sign;
cmov tmp sign r3 0@sint32;
add r11 r11 tmp;
(* vmov	lr, s0                                     #! PC = 0x8004c68 *)
mov lr s0;
(* strh.w	r5, [lr, #64]	; 0x40                     #! EA = L0x200198c6; PC = 0x8004c6c *)
ghost L0x200198c6_f@sint32 : L0x200198c6_f = r5 && L0x200198c6_f = r5;
split discard L0x200198c6_u r5 16;
cast L0x200198c6@sint16 L0x200198c6_u;
(* strh.w	r6, [lr, #128]	; 0x80                    #! EA = L0x20019906; PC = 0x8004c70 *)
ghost L0x20019906_f@sint32 : L0x20019906_f = r6 && L0x20019906_f = r6;
split discard L0x20019906_u r6 16;
cast L0x20019906@sint16 L0x20019906_u;
(* strh.w	r7, [lr, #192]	; 0xc0                    #! EA = L0x20019946; PC = 0x8004c74 *)
ghost L0x20019946_f@sint32 : L0x20019946_f = r7 && L0x20019946_f = r7;
split discard L0x20019946_u r7 16;
cast L0x20019946@sint16 L0x20019946_u;
(* strh.w	r8, [lr, #256]	; 0x100                   #! EA = L0x20019986; PC = 0x8004c78 *)
ghost L0x20019986_f@sint32 : L0x20019986_f = r8 && L0x20019986_f = r8;
split discard L0x20019986_u r8 16;
cast L0x20019986@sint16 L0x20019986_u;
(* strh.w	r9, [lr, #320]	; 0x140                   #! EA = L0x200199c6; PC = 0x8004c7c *)
ghost L0x200199c6_f@sint32 : L0x200199c6_f = r9 && L0x200199c6_f = r9;
split discard L0x200199c6_u r9 16;
cast L0x200199c6@sint16 L0x200199c6_u;
(* strh.w	r10, [lr, #384]	; 0x180                  #! EA = L0x20019a06; PC = 0x8004c80 *)
ghost L0x20019a06_f@sint32 : L0x20019a06_f = r10 && L0x20019a06_f = r10;
split discard L0x20019a06_u r10 16;
cast L0x20019a06@sint16 L0x20019a06_u;
(* strh.w	r11, [lr, #448]	; 0x1c0                  #! EA = L0x20019a46; PC = 0x8004c84 *)
ghost L0x20019a46_f@sint32 : L0x20019a46_f = r11 && L0x20019a46_f = r11;
split discard L0x20019a46_u r11 16;
cast L0x20019a46@sint16 L0x20019a46_u;
(* strh.w	r4, [lr], #2                             #! EA = L0x20019886; PC = 0x8004c88 *)
ghost L0x20019886_f@sint32 : L0x20019886_f = r4 && L0x20019886_f = r4;
split discard L0x20019886_u r4 16;
cast L0x20019886@sint16 L0x20019886_u;
(* vmov	s0, lr                                     #! PC = 0x8004c8c *)
mov s0 lr;
(* vmov	r12, s2                                    #! PC = 0x8004c90 *)
mov r12 s2;


(* === layer 3_2_1 === *)
cut
  (* algebraic *)
  and [
    (* inp_poly_0 *)
    eqmod (2**32) * (inp_poly_0 * inp_poly_0)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 9849271],
    (* inp_poly_1 *)
    eqmod (2**32) * (inp_poly_1 * inp_poly_1)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 15316810],
    (* inp_poly_2 *)
    eqmod (2**32) * (inp_poly_2 * inp_poly_2)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 3773600],
    (* inp_poly_3 *)
    eqmod (2**32) * (inp_poly_3 * inp_poly_3)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 21392481],
    (* inp_poly_4 *)
    eqmod (2**32) * (inp_poly_4 * inp_poly_4)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 21715468],
    (* inp_poly_5 *)
    eqmod (2**32) * (inp_poly_5 * inp_poly_5)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 3450613],
    (* inp_poly_6 *)
    eqmod (2**32) * (inp_poly_6 * inp_poly_6)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 22783829],
    (* inp_poly_7 *)
    eqmod (2**32) * (inp_poly_7 * inp_poly_7)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 2382252],
    (* inp_poly_8 *)
    eqmod (2**32) * (inp_poly_8 * inp_poly_8)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 22990379],
    (* inp_poly_9 *)
    eqmod (2**32) * (inp_poly_9 * inp_poly_9)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 2175702],
    (* inp_poly_10 *)
    eqmod (2**32) * (inp_poly_10 * inp_poly_10)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 20348569],
    (* inp_poly_11 *)
    eqmod (2**32) * (inp_poly_11 * inp_poly_11)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 4817512],
    (* inp_poly_12 *)
    eqmod (2**32) * (inp_poly_12 * inp_poly_12)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 11666526],
    (* inp_poly_13 *)
    eqmod (2**32) * (inp_poly_13 * inp_poly_13)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13499555],
    (* inp_poly_14 *)
    eqmod (2**32) * (inp_poly_14 * inp_poly_14)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 91549],
    (* inp_poly_15 *)
    eqmod (2**32) * (inp_poly_15 * inp_poly_15)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 25074532],
    (* inp_poly_16 *)
    eqmod (2**32) * (inp_poly_16 * inp_poly_16)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13586079],
    (* inp_poly_17 *)
    eqmod (2**32) * (inp_poly_17 * inp_poly_17)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 11580002],
    (* inp_poly_18 *)
    eqmod (2**32) * (inp_poly_18 * inp_poly_18)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13600017],
    (* inp_poly_19 *)
    eqmod (2**32) * (inp_poly_19 * inp_poly_19)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 11566064],
    (* inp_poly_20 *)
    eqmod (2**32) * (inp_poly_20 * inp_poly_20)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 7063743],
    (* inp_poly_21 *)
    eqmod (2**32) * (inp_poly_21 * inp_poly_21)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18102338],
    (* inp_poly_22 *)
    eqmod (2**32) * (inp_poly_22 * inp_poly_22)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 14966334],
    (* inp_poly_23 *)
    eqmod (2**32) * (inp_poly_23 * inp_poly_23)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 10199747],
    (* inp_poly_24 *)
    eqmod (2**32) * (inp_poly_24 * inp_poly_24)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 6767963],
    (* inp_poly_25 *)
    eqmod (2**32) * (inp_poly_25 * inp_poly_25)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18398118],
    (* inp_poly_26 *)
    eqmod (2**32) * (inp_poly_26 * inp_poly_26)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 6836706],
    (* inp_poly_27 *)
    eqmod (2**32) * (inp_poly_27 * inp_poly_27)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18329375],
    (* inp_poly_28 *)
    eqmod (2**32) * (inp_poly_28 * inp_poly_28)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 2376375],
    (* inp_poly_29 *)
    eqmod (2**32) * (inp_poly_29 * inp_poly_29)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 22789706],
    (* inp_poly_30 *)
    eqmod (2**32) * (inp_poly_30 * inp_poly_30)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 17372579],
    (* inp_poly_31 *)
    eqmod (2**32) * (inp_poly_31 * inp_poly_31)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 7793502],
    (* inp_poly_32 *)
    eqmod (2**32) * (inp_poly_32 * inp_poly_32)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 11257497],
    (* inp_poly_33 *)
    eqmod (2**32) * (inp_poly_33 * inp_poly_33)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13908584],
    (* inp_poly_34 *)
    eqmod (2**32) * (inp_poly_34 * inp_poly_34)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 3205585],
    (* inp_poly_35 *)
    eqmod (2**32) * (inp_poly_35 * inp_poly_35)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 21960496],
    (* inp_poly_36 *)
    eqmod (2**32) * (inp_poly_36 * inp_poly_36)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13138404],
    (* inp_poly_37 *)
    eqmod (2**32) * (inp_poly_37 * inp_poly_37)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 12027677],
    (* inp_poly_38 *)
    eqmod (2**32) * (inp_poly_38 * inp_poly_38)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 13052373],
    (* inp_poly_39 *)
    eqmod (2**32) * (inp_poly_39 * inp_poly_39)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 12113708],
    (* inp_poly_40 *)
    eqmod (2**32) * (inp_poly_40 * inp_poly_40)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 19474337],
    (* inp_poly_41 *)
    eqmod (2**32) * (inp_poly_41 * inp_poly_41)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 5691744],
    (* inp_poly_42 *)
    eqmod (2**32) * (inp_poly_42 * inp_poly_42)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 12583566],
    (* inp_poly_43 *)
    eqmod (2**32) * (inp_poly_43 * inp_poly_43)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 12582515],
    (* inp_poly_44 *)
    eqmod (2**32) * (inp_poly_44 * inp_poly_44)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 4283752],
    (* inp_poly_45 *)
    eqmod (2**32) * (inp_poly_45 * inp_poly_45)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 20882329],
    (* inp_poly_46 *)
    eqmod (2**32) * (inp_poly_46 * inp_poly_46)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18295001],
    (* inp_poly_47 *)
    eqmod (2**32) * (inp_poly_47 * inp_poly_47)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 6871080],
    (* inp_poly_48 *)
    eqmod (2**32) * (inp_poly_48 * inp_poly_48)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 7038058],
    (* inp_poly_49 *)
    eqmod (2**32) * (inp_poly_49 * inp_poly_49)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18128023],
    (* inp_poly_50 *)
    eqmod (2**32) * (inp_poly_50 * inp_poly_50)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18026180],
    (* inp_poly_51 *)
    eqmod (2**32) * (inp_poly_51 * inp_poly_51)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 7139901],
    (* inp_poly_52 *)
    eqmod (2**32) * (inp_poly_52 * inp_poly_52)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 14761830],
    (* inp_poly_53 *)
    eqmod (2**32) * (inp_poly_53 * inp_poly_53)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 10404251],
    (* inp_poly_54 *)
    eqmod (2**32) * (inp_poly_54 * inp_poly_54)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 21664729],
    (* inp_poly_55 *)
    eqmod (2**32) * (inp_poly_55 * inp_poly_55)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 3501352],
    (* inp_poly_56 *)
    eqmod (2**32) * (inp_poly_56 * inp_poly_56)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 8242393],
    (* inp_poly_57 *)
    eqmod (2**32) * (inp_poly_57 * inp_poly_57)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 16923688],
    (* inp_poly_58 *)
    eqmod (2**32) * (inp_poly_58 * inp_poly_58)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 9868967],
    (* inp_poly_59 *)
    eqmod (2**32) * (inp_poly_59 * inp_poly_59)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 15297114],
    (* inp_poly_60 *)
    eqmod (2**32) * (inp_poly_60 * inp_poly_60)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 18216472],
    (* inp_poly_61 *)
    eqmod (2**32) * (inp_poly_61 * inp_poly_61)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 6949609],
    (* inp_poly_62 *)
    eqmod (2**32) * (inp_poly_62 * inp_poly_62)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 2603275],
    (* inp_poly_63 *)
    eqmod (2**32) * (inp_poly_63 * inp_poly_63)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [25166081, x**4 - 22562806],
    (* mod q *)
    eqmod L0x20019848_f L0x20019848 (2**13),
    eqmod L0x2001984a_f L0x2001984a (2**13),
    eqmod L0x2001984c_f L0x2001984c (2**13),
    eqmod L0x2001984e_f L0x2001984e (2**13),
    eqmod L0x20019850_f L0x20019850 (2**13),
    eqmod L0x20019852_f L0x20019852 (2**13),
    eqmod L0x20019854_f L0x20019854 (2**13),
    eqmod L0x20019856_f L0x20019856 (2**13),
    eqmod L0x20019858_f L0x20019858 (2**13),
    eqmod L0x2001985a_f L0x2001985a (2**13),
    eqmod L0x2001985c_f L0x2001985c (2**13),
    eqmod L0x2001985e_f L0x2001985e (2**13),
    eqmod L0x20019860_f L0x20019860 (2**13),
    eqmod L0x20019862_f L0x20019862 (2**13),
    eqmod L0x20019864_f L0x20019864 (2**13),
    eqmod L0x20019866_f L0x20019866 (2**13),
    eqmod L0x20019868_f L0x20019868 (2**13),
    eqmod L0x2001986a_f L0x2001986a (2**13),
    eqmod L0x2001986c_f L0x2001986c (2**13),
    eqmod L0x2001986e_f L0x2001986e (2**13),
    eqmod L0x20019870_f L0x20019870 (2**13),
    eqmod L0x20019872_f L0x20019872 (2**13),
    eqmod L0x20019874_f L0x20019874 (2**13),
    eqmod L0x20019876_f L0x20019876 (2**13),
    eqmod L0x20019878_f L0x20019878 (2**13),
    eqmod L0x2001987a_f L0x2001987a (2**13),
    eqmod L0x2001987c_f L0x2001987c (2**13),
    eqmod L0x2001987e_f L0x2001987e (2**13),
    eqmod L0x20019880_f L0x20019880 (2**13),
    eqmod L0x20019882_f L0x20019882 (2**13),
    eqmod L0x20019884_f L0x20019884 (2**13),
    eqmod L0x20019886_f L0x20019886 (2**13),
    eqmod L0x20019888_f L0x20019888 (2**13),
    eqmod L0x2001988a_f L0x2001988a (2**13),
    eqmod L0x2001988c_f L0x2001988c (2**13),
    eqmod L0x2001988e_f L0x2001988e (2**13),
    eqmod L0x20019890_f L0x20019890 (2**13),
    eqmod L0x20019892_f L0x20019892 (2**13),
    eqmod L0x20019894_f L0x20019894 (2**13),
    eqmod L0x20019896_f L0x20019896 (2**13),
    eqmod L0x20019898_f L0x20019898 (2**13),
    eqmod L0x2001989a_f L0x2001989a (2**13),
    eqmod L0x2001989c_f L0x2001989c (2**13),
    eqmod L0x2001989e_f L0x2001989e (2**13),
    eqmod L0x200198a0_f L0x200198a0 (2**13),
    eqmod L0x200198a2_f L0x200198a2 (2**13),
    eqmod L0x200198a4_f L0x200198a4 (2**13),
    eqmod L0x200198a6_f L0x200198a6 (2**13),
    eqmod L0x200198a8_f L0x200198a8 (2**13),
    eqmod L0x200198aa_f L0x200198aa (2**13),
    eqmod L0x200198ac_f L0x200198ac (2**13),
    eqmod L0x200198ae_f L0x200198ae (2**13),
    eqmod L0x200198b0_f L0x200198b0 (2**13),
    eqmod L0x200198b2_f L0x200198b2 (2**13),
    eqmod L0x200198b4_f L0x200198b4 (2**13),
    eqmod L0x200198b6_f L0x200198b6 (2**13),
    eqmod L0x200198b8_f L0x200198b8 (2**13),
    eqmod L0x200198ba_f L0x200198ba (2**13),
    eqmod L0x200198bc_f L0x200198bc (2**13),
    eqmod L0x200198be_f L0x200198be (2**13),
    eqmod L0x200198c0_f L0x200198c0 (2**13),
    eqmod L0x200198c2_f L0x200198c2 (2**13),
    eqmod L0x200198c4_f L0x200198c4 (2**13),
    eqmod L0x200198c6_f L0x200198c6 (2**13),
    eqmod L0x200198c8_f L0x200198c8 (2**13),
    eqmod L0x200198ca_f L0x200198ca (2**13),
    eqmod L0x200198cc_f L0x200198cc (2**13),
    eqmod L0x200198ce_f L0x200198ce (2**13),
    eqmod L0x200198d0_f L0x200198d0 (2**13),
    eqmod L0x200198d2_f L0x200198d2 (2**13),
    eqmod L0x200198d4_f L0x200198d4 (2**13),
    eqmod L0x200198d6_f L0x200198d6 (2**13),
    eqmod L0x200198d8_f L0x200198d8 (2**13),
    eqmod L0x200198da_f L0x200198da (2**13),
    eqmod L0x200198dc_f L0x200198dc (2**13),
    eqmod L0x200198de_f L0x200198de (2**13),
    eqmod L0x200198e0_f L0x200198e0 (2**13),
    eqmod L0x200198e2_f L0x200198e2 (2**13),
    eqmod L0x200198e4_f L0x200198e4 (2**13),
    eqmod L0x200198e6_f L0x200198e6 (2**13),
    eqmod L0x200198e8_f L0x200198e8 (2**13),
    eqmod L0x200198ea_f L0x200198ea (2**13),
    eqmod L0x200198ec_f L0x200198ec (2**13),
    eqmod L0x200198ee_f L0x200198ee (2**13),
    eqmod L0x200198f0_f L0x200198f0 (2**13),
    eqmod L0x200198f2_f L0x200198f2 (2**13),
    eqmod L0x200198f4_f L0x200198f4 (2**13),
    eqmod L0x200198f6_f L0x200198f6 (2**13),
    eqmod L0x200198f8_f L0x200198f8 (2**13),
    eqmod L0x200198fa_f L0x200198fa (2**13),
    eqmod L0x200198fc_f L0x200198fc (2**13),
    eqmod L0x200198fe_f L0x200198fe (2**13),
    eqmod L0x20019900_f L0x20019900 (2**13),
    eqmod L0x20019902_f L0x20019902 (2**13),
    eqmod L0x20019904_f L0x20019904 (2**13),
    eqmod L0x20019906_f L0x20019906 (2**13),
    eqmod L0x20019908_f L0x20019908 (2**13),
    eqmod L0x2001990a_f L0x2001990a (2**13),
    eqmod L0x2001990c_f L0x2001990c (2**13),
    eqmod L0x2001990e_f L0x2001990e (2**13),
    eqmod L0x20019910_f L0x20019910 (2**13),
    eqmod L0x20019912_f L0x20019912 (2**13),
    eqmod L0x20019914_f L0x20019914 (2**13),
    eqmod L0x20019916_f L0x20019916 (2**13),
    eqmod L0x20019918_f L0x20019918 (2**13),
    eqmod L0x2001991a_f L0x2001991a (2**13),
    eqmod L0x2001991c_f L0x2001991c (2**13),
    eqmod L0x2001991e_f L0x2001991e (2**13),
    eqmod L0x20019920_f L0x20019920 (2**13),
    eqmod L0x20019922_f L0x20019922 (2**13),
    eqmod L0x20019924_f L0x20019924 (2**13),
    eqmod L0x20019926_f L0x20019926 (2**13),
    eqmod L0x20019928_f L0x20019928 (2**13),
    eqmod L0x2001992a_f L0x2001992a (2**13),
    eqmod L0x2001992c_f L0x2001992c (2**13),
    eqmod L0x2001992e_f L0x2001992e (2**13),
    eqmod L0x20019930_f L0x20019930 (2**13),
    eqmod L0x20019932_f L0x20019932 (2**13),
    eqmod L0x20019934_f L0x20019934 (2**13),
    eqmod L0x20019936_f L0x20019936 (2**13),
    eqmod L0x20019938_f L0x20019938 (2**13),
    eqmod L0x2001993a_f L0x2001993a (2**13),
    eqmod L0x2001993c_f L0x2001993c (2**13),
    eqmod L0x2001993e_f L0x2001993e (2**13),
    eqmod L0x20019940_f L0x20019940 (2**13),
    eqmod L0x20019942_f L0x20019942 (2**13),
    eqmod L0x20019944_f L0x20019944 (2**13),
    eqmod L0x20019946_f L0x20019946 (2**13),
    eqmod L0x20019948_f L0x20019948 (2**13),
    eqmod L0x2001994a_f L0x2001994a (2**13),
    eqmod L0x2001994c_f L0x2001994c (2**13),
    eqmod L0x2001994e_f L0x2001994e (2**13),
    eqmod L0x20019950_f L0x20019950 (2**13),
    eqmod L0x20019952_f L0x20019952 (2**13),
    eqmod L0x20019954_f L0x20019954 (2**13),
    eqmod L0x20019956_f L0x20019956 (2**13),
    eqmod L0x20019958_f L0x20019958 (2**13),
    eqmod L0x2001995a_f L0x2001995a (2**13),
    eqmod L0x2001995c_f L0x2001995c (2**13),
    eqmod L0x2001995e_f L0x2001995e (2**13),
    eqmod L0x20019960_f L0x20019960 (2**13),
    eqmod L0x20019962_f L0x20019962 (2**13),
    eqmod L0x20019964_f L0x20019964 (2**13),
    eqmod L0x20019966_f L0x20019966 (2**13),
    eqmod L0x20019968_f L0x20019968 (2**13),
    eqmod L0x2001996a_f L0x2001996a (2**13),
    eqmod L0x2001996c_f L0x2001996c (2**13),
    eqmod L0x2001996e_f L0x2001996e (2**13),
    eqmod L0x20019970_f L0x20019970 (2**13),
    eqmod L0x20019972_f L0x20019972 (2**13),
    eqmod L0x20019974_f L0x20019974 (2**13),
    eqmod L0x20019976_f L0x20019976 (2**13),
    eqmod L0x20019978_f L0x20019978 (2**13),
    eqmod L0x2001997a_f L0x2001997a (2**13),
    eqmod L0x2001997c_f L0x2001997c (2**13),
    eqmod L0x2001997e_f L0x2001997e (2**13),
    eqmod L0x20019980_f L0x20019980 (2**13),
    eqmod L0x20019982_f L0x20019982 (2**13),
    eqmod L0x20019984_f L0x20019984 (2**13),
    eqmod L0x20019986_f L0x20019986 (2**13),
    eqmod L0x20019988_f L0x20019988 (2**13),
    eqmod L0x2001998a_f L0x2001998a (2**13),
    eqmod L0x2001998c_f L0x2001998c (2**13),
    eqmod L0x2001998e_f L0x2001998e (2**13),
    eqmod L0x20019990_f L0x20019990 (2**13),
    eqmod L0x20019992_f L0x20019992 (2**13),
    eqmod L0x20019994_f L0x20019994 (2**13),
    eqmod L0x20019996_f L0x20019996 (2**13),
    eqmod L0x20019998_f L0x20019998 (2**13),
    eqmod L0x2001999a_f L0x2001999a (2**13),
    eqmod L0x2001999c_f L0x2001999c (2**13),
    eqmod L0x2001999e_f L0x2001999e (2**13),
    eqmod L0x200199a0_f L0x200199a0 (2**13),
    eqmod L0x200199a2_f L0x200199a2 (2**13),
    eqmod L0x200199a4_f L0x200199a4 (2**13),
    eqmod L0x200199a6_f L0x200199a6 (2**13),
    eqmod L0x200199a8_f L0x200199a8 (2**13),
    eqmod L0x200199aa_f L0x200199aa (2**13),
    eqmod L0x200199ac_f L0x200199ac (2**13),
    eqmod L0x200199ae_f L0x200199ae (2**13),
    eqmod L0x200199b0_f L0x200199b0 (2**13),
    eqmod L0x200199b2_f L0x200199b2 (2**13),
    eqmod L0x200199b4_f L0x200199b4 (2**13),
    eqmod L0x200199b6_f L0x200199b6 (2**13),
    eqmod L0x200199b8_f L0x200199b8 (2**13),
    eqmod L0x200199ba_f L0x200199ba (2**13),
    eqmod L0x200199bc_f L0x200199bc (2**13),
    eqmod L0x200199be_f L0x200199be (2**13),
    eqmod L0x200199c0_f L0x200199c0 (2**13),
    eqmod L0x200199c2_f L0x200199c2 (2**13),
    eqmod L0x200199c4_f L0x200199c4 (2**13),
    eqmod L0x200199c6_f L0x200199c6 (2**13),
    eqmod L0x200199c8_f L0x200199c8 (2**13),
    eqmod L0x200199ca_f L0x200199ca (2**13),
    eqmod L0x200199cc_f L0x200199cc (2**13),
    eqmod L0x200199ce_f L0x200199ce (2**13),
    eqmod L0x200199d0_f L0x200199d0 (2**13),
    eqmod L0x200199d2_f L0x200199d2 (2**13),
    eqmod L0x200199d4_f L0x200199d4 (2**13),
    eqmod L0x200199d6_f L0x200199d6 (2**13),
    eqmod L0x200199d8_f L0x200199d8 (2**13),
    eqmod L0x200199da_f L0x200199da (2**13),
    eqmod L0x200199dc_f L0x200199dc (2**13),
    eqmod L0x200199de_f L0x200199de (2**13),
    eqmod L0x200199e0_f L0x200199e0 (2**13),
    eqmod L0x200199e2_f L0x200199e2 (2**13),
    eqmod L0x200199e4_f L0x200199e4 (2**13),
    eqmod L0x200199e6_f L0x200199e6 (2**13),
    eqmod L0x200199e8_f L0x200199e8 (2**13),
    eqmod L0x200199ea_f L0x200199ea (2**13),
    eqmod L0x200199ec_f L0x200199ec (2**13),
    eqmod L0x200199ee_f L0x200199ee (2**13),
    eqmod L0x200199f0_f L0x200199f0 (2**13),
    eqmod L0x200199f2_f L0x200199f2 (2**13),
    eqmod L0x200199f4_f L0x200199f4 (2**13),
    eqmod L0x200199f6_f L0x200199f6 (2**13),
    eqmod L0x200199f8_f L0x200199f8 (2**13),
    eqmod L0x200199fa_f L0x200199fa (2**13),
    eqmod L0x200199fc_f L0x200199fc (2**13),
    eqmod L0x200199fe_f L0x200199fe (2**13),
    eqmod L0x20019a00_f L0x20019a00 (2**13),
    eqmod L0x20019a02_f L0x20019a02 (2**13),
    eqmod L0x20019a04_f L0x20019a04 (2**13),
    eqmod L0x20019a06_f L0x20019a06 (2**13),
    eqmod L0x20019a08_f L0x20019a08 (2**13),
    eqmod L0x20019a0a_f L0x20019a0a (2**13),
    eqmod L0x20019a0c_f L0x20019a0c (2**13),
    eqmod L0x20019a0e_f L0x20019a0e (2**13),
    eqmod L0x20019a10_f L0x20019a10 (2**13),
    eqmod L0x20019a12_f L0x20019a12 (2**13),
    eqmod L0x20019a14_f L0x20019a14 (2**13),
    eqmod L0x20019a16_f L0x20019a16 (2**13),
    eqmod L0x20019a18_f L0x20019a18 (2**13),
    eqmod L0x20019a1a_f L0x20019a1a (2**13),
    eqmod L0x20019a1c_f L0x20019a1c (2**13),
    eqmod L0x20019a1e_f L0x20019a1e (2**13),
    eqmod L0x20019a20_f L0x20019a20 (2**13),
    eqmod L0x20019a22_f L0x20019a22 (2**13),
    eqmod L0x20019a24_f L0x20019a24 (2**13),
    eqmod L0x20019a26_f L0x20019a26 (2**13),
    eqmod L0x20019a28_f L0x20019a28 (2**13),
    eqmod L0x20019a2a_f L0x20019a2a (2**13),
    eqmod L0x20019a2c_f L0x20019a2c (2**13),
    eqmod L0x20019a2e_f L0x20019a2e (2**13),
    eqmod L0x20019a30_f L0x20019a30 (2**13),
    eqmod L0x20019a32_f L0x20019a32 (2**13),
    eqmod L0x20019a34_f L0x20019a34 (2**13),
    eqmod L0x20019a36_f L0x20019a36 (2**13),
    eqmod L0x20019a38_f L0x20019a38 (2**13),
    eqmod L0x20019a3a_f L0x20019a3a (2**13),
    eqmod L0x20019a3c_f L0x20019a3c (2**13),
    eqmod L0x20019a3e_f L0x20019a3e (2**13),
    eqmod L0x20019a40_f L0x20019a40 (2**13),
    eqmod L0x20019a42_f L0x20019a42 (2**13),
    eqmod L0x20019a44_f L0x20019a44 (2**13),
    eqmod L0x20019a46_f L0x20019a46 (2**13)
  ]
  &&
  (* range *)
  and [
    (-12583040)@32 <=s L0x20019848_f, L0x20019848_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001984a_f, L0x2001984a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001984c_f, L0x2001984c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001984e_f, L0x2001984e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019850_f, L0x20019850_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019852_f, L0x20019852_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019854_f, L0x20019854_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019856_f, L0x20019856_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019858_f, L0x20019858_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001985a_f, L0x2001985a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001985c_f, L0x2001985c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001985e_f, L0x2001985e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019860_f, L0x20019860_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019862_f, L0x20019862_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019864_f, L0x20019864_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019866_f, L0x20019866_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019868_f, L0x20019868_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001986a_f, L0x2001986a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001986c_f, L0x2001986c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001986e_f, L0x2001986e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019870_f, L0x20019870_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019872_f, L0x20019872_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019874_f, L0x20019874_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019876_f, L0x20019876_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019878_f, L0x20019878_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001987a_f, L0x2001987a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001987c_f, L0x2001987c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001987e_f, L0x2001987e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019880_f, L0x20019880_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019882_f, L0x20019882_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019884_f, L0x20019884_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019886_f, L0x20019886_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019888_f, L0x20019888_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001988a_f, L0x2001988a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001988c_f, L0x2001988c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001988e_f, L0x2001988e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019890_f, L0x20019890_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019892_f, L0x20019892_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019894_f, L0x20019894_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019896_f, L0x20019896_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019898_f, L0x20019898_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001989a_f, L0x2001989a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001989c_f, L0x2001989c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001989e_f, L0x2001989e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198a0_f, L0x200198a0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198a2_f, L0x200198a2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198a4_f, L0x200198a4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198a6_f, L0x200198a6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198a8_f, L0x200198a8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198aa_f, L0x200198aa_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ac_f, L0x200198ac_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ae_f, L0x200198ae_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198b0_f, L0x200198b0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198b2_f, L0x200198b2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198b4_f, L0x200198b4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198b6_f, L0x200198b6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198b8_f, L0x200198b8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ba_f, L0x200198ba_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198bc_f, L0x200198bc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198be_f, L0x200198be_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198c0_f, L0x200198c0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198c2_f, L0x200198c2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198c4_f, L0x200198c4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198c6_f, L0x200198c6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198c8_f, L0x200198c8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ca_f, L0x200198ca_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198cc_f, L0x200198cc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ce_f, L0x200198ce_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198d0_f, L0x200198d0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198d2_f, L0x200198d2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198d4_f, L0x200198d4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198d6_f, L0x200198d6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198d8_f, L0x200198d8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198da_f, L0x200198da_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198dc_f, L0x200198dc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198de_f, L0x200198de_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198e0_f, L0x200198e0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198e2_f, L0x200198e2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198e4_f, L0x200198e4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198e6_f, L0x200198e6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198e8_f, L0x200198e8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ea_f, L0x200198ea_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ec_f, L0x200198ec_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198ee_f, L0x200198ee_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198f0_f, L0x200198f0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198f2_f, L0x200198f2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198f4_f, L0x200198f4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198f6_f, L0x200198f6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198f8_f, L0x200198f8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198fa_f, L0x200198fa_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198fc_f, L0x200198fc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200198fe_f, L0x200198fe_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019900_f, L0x20019900_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019902_f, L0x20019902_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019904_f, L0x20019904_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019906_f, L0x20019906_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019908_f, L0x20019908_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001990a_f, L0x2001990a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001990c_f, L0x2001990c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001990e_f, L0x2001990e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019910_f, L0x20019910_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019912_f, L0x20019912_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019914_f, L0x20019914_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019916_f, L0x20019916_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019918_f, L0x20019918_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001991a_f, L0x2001991a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001991c_f, L0x2001991c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001991e_f, L0x2001991e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019920_f, L0x20019920_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019922_f, L0x20019922_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019924_f, L0x20019924_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019926_f, L0x20019926_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019928_f, L0x20019928_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001992a_f, L0x2001992a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001992c_f, L0x2001992c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001992e_f, L0x2001992e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019930_f, L0x20019930_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019932_f, L0x20019932_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019934_f, L0x20019934_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019936_f, L0x20019936_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019938_f, L0x20019938_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001993a_f, L0x2001993a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001993c_f, L0x2001993c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001993e_f, L0x2001993e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019940_f, L0x20019940_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019942_f, L0x20019942_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019944_f, L0x20019944_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019946_f, L0x20019946_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019948_f, L0x20019948_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001994a_f, L0x2001994a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001994c_f, L0x2001994c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001994e_f, L0x2001994e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019950_f, L0x20019950_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019952_f, L0x20019952_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019954_f, L0x20019954_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019956_f, L0x20019956_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019958_f, L0x20019958_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001995a_f, L0x2001995a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001995c_f, L0x2001995c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001995e_f, L0x2001995e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019960_f, L0x20019960_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019962_f, L0x20019962_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019964_f, L0x20019964_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019966_f, L0x20019966_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019968_f, L0x20019968_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001996a_f, L0x2001996a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001996c_f, L0x2001996c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001996e_f, L0x2001996e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019970_f, L0x20019970_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019972_f, L0x20019972_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019974_f, L0x20019974_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019976_f, L0x20019976_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019978_f, L0x20019978_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001997a_f, L0x2001997a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001997c_f, L0x2001997c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001997e_f, L0x2001997e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019980_f, L0x20019980_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019982_f, L0x20019982_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019984_f, L0x20019984_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019986_f, L0x20019986_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019988_f, L0x20019988_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001998a_f, L0x2001998a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001998c_f, L0x2001998c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001998e_f, L0x2001998e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019990_f, L0x20019990_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019992_f, L0x20019992_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019994_f, L0x20019994_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019996_f, L0x20019996_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019998_f, L0x20019998_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001999a_f, L0x2001999a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001999c_f, L0x2001999c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x2001999e_f, L0x2001999e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199a0_f, L0x200199a0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199a2_f, L0x200199a2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199a4_f, L0x200199a4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199a6_f, L0x200199a6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199a8_f, L0x200199a8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199aa_f, L0x200199aa_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ac_f, L0x200199ac_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ae_f, L0x200199ae_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199b0_f, L0x200199b0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199b2_f, L0x200199b2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199b4_f, L0x200199b4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199b6_f, L0x200199b6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199b8_f, L0x200199b8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ba_f, L0x200199ba_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199bc_f, L0x200199bc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199be_f, L0x200199be_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199c0_f, L0x200199c0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199c2_f, L0x200199c2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199c4_f, L0x200199c4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199c6_f, L0x200199c6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199c8_f, L0x200199c8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ca_f, L0x200199ca_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199cc_f, L0x200199cc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ce_f, L0x200199ce_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199d0_f, L0x200199d0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199d2_f, L0x200199d2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199d4_f, L0x200199d4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199d6_f, L0x200199d6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199d8_f, L0x200199d8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199da_f, L0x200199da_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199dc_f, L0x200199dc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199de_f, L0x200199de_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199e0_f, L0x200199e0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199e2_f, L0x200199e2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199e4_f, L0x200199e4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199e6_f, L0x200199e6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199e8_f, L0x200199e8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ea_f, L0x200199ea_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ec_f, L0x200199ec_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199ee_f, L0x200199ee_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199f0_f, L0x200199f0_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199f2_f, L0x200199f2_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199f4_f, L0x200199f4_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199f6_f, L0x200199f6_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199f8_f, L0x200199f8_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199fa_f, L0x200199fa_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199fc_f, L0x200199fc_f <=s 12583040@32,
    (-12583040)@32 <=s L0x200199fe_f, L0x200199fe_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a00_f, L0x20019a00_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a02_f, L0x20019a02_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a04_f, L0x20019a04_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a06_f, L0x20019a06_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a08_f, L0x20019a08_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a0a_f, L0x20019a0a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a0c_f, L0x20019a0c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a0e_f, L0x20019a0e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a10_f, L0x20019a10_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a12_f, L0x20019a12_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a14_f, L0x20019a14_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a16_f, L0x20019a16_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a18_f, L0x20019a18_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a1a_f, L0x20019a1a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a1c_f, L0x20019a1c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a1e_f, L0x20019a1e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a20_f, L0x20019a20_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a22_f, L0x20019a22_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a24_f, L0x20019a24_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a26_f, L0x20019a26_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a28_f, L0x20019a28_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a2a_f, L0x20019a2a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a2c_f, L0x20019a2c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a2e_f, L0x20019a2e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a30_f, L0x20019a30_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a32_f, L0x20019a32_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a34_f, L0x20019a34_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a36_f, L0x20019a36_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a38_f, L0x20019a38_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a3a_f, L0x20019a3a_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a3c_f, L0x20019a3c_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a3e_f, L0x20019a3e_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a40_f, L0x20019a40_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a42_f, L0x20019a42_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a44_f, L0x20019a44_f <=s 12583040@32,
    (-12583040)@32 <=s L0x20019a46_f, L0x20019a46_f <=s 12583040@32
  ]
;

(* === applying Chinese Remainder Theorem === *)
cut true && true;
assume
  (* algebraic *)
  and [
    (* inp_poly_0 *)
    eqmod (2**32) * (inp_poly_0 * inp_poly_0)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 9849271],
    (* inp_poly_1 *)
    eqmod (2**32) * (inp_poly_1 * inp_poly_1)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 15316810],
    (* inp_poly_2 *)
    eqmod (2**32) * (inp_poly_2 * inp_poly_2)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 3773600],
    (* inp_poly_3 *)
    eqmod (2**32) * (inp_poly_3 * inp_poly_3)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 21392481],
    (* inp_poly_4 *)
    eqmod (2**32) * (inp_poly_4 * inp_poly_4)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 21715468],
    (* inp_poly_5 *)
    eqmod (2**32) * (inp_poly_5 * inp_poly_5)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 3450613],
    (* inp_poly_6 *)
    eqmod (2**32) * (inp_poly_6 * inp_poly_6)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 22783829],
    (* inp_poly_7 *)
    eqmod (2**32) * (inp_poly_7 * inp_poly_7)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 2382252],
    (* inp_poly_8 *)
    eqmod (2**32) * (inp_poly_8 * inp_poly_8)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 22990379],
    (* inp_poly_9 *)
    eqmod (2**32) * (inp_poly_9 * inp_poly_9)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 2175702],
    (* inp_poly_10 *)
    eqmod (2**32) * (inp_poly_10 * inp_poly_10)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 20348569],
    (* inp_poly_11 *)
    eqmod (2**32) * (inp_poly_11 * inp_poly_11)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 4817512],
    (* inp_poly_12 *)
    eqmod (2**32) * (inp_poly_12 * inp_poly_12)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 11666526],
    (* inp_poly_13 *)
    eqmod (2**32) * (inp_poly_13 * inp_poly_13)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13499555],
    (* inp_poly_14 *)
    eqmod (2**32) * (inp_poly_14 * inp_poly_14)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 91549],
    (* inp_poly_15 *)
    eqmod (2**32) * (inp_poly_15 * inp_poly_15)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 25074532],
    (* inp_poly_16 *)
    eqmod (2**32) * (inp_poly_16 * inp_poly_16)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13586079],
    (* inp_poly_17 *)
    eqmod (2**32) * (inp_poly_17 * inp_poly_17)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 11580002],
    (* inp_poly_18 *)
    eqmod (2**32) * (inp_poly_18 * inp_poly_18)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13600017],
    (* inp_poly_19 *)
    eqmod (2**32) * (inp_poly_19 * inp_poly_19)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 11566064],
    (* inp_poly_20 *)
    eqmod (2**32) * (inp_poly_20 * inp_poly_20)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 7063743],
    (* inp_poly_21 *)
    eqmod (2**32) * (inp_poly_21 * inp_poly_21)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18102338],
    (* inp_poly_22 *)
    eqmod (2**32) * (inp_poly_22 * inp_poly_22)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 14966334],
    (* inp_poly_23 *)
    eqmod (2**32) * (inp_poly_23 * inp_poly_23)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 10199747],
    (* inp_poly_24 *)
    eqmod (2**32) * (inp_poly_24 * inp_poly_24)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 6767963],
    (* inp_poly_25 *)
    eqmod (2**32) * (inp_poly_25 * inp_poly_25)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18398118],
    (* inp_poly_26 *)
    eqmod (2**32) * (inp_poly_26 * inp_poly_26)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 6836706],
    (* inp_poly_27 *)
    eqmod (2**32) * (inp_poly_27 * inp_poly_27)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18329375],
    (* inp_poly_28 *)
    eqmod (2**32) * (inp_poly_28 * inp_poly_28)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 2376375],
    (* inp_poly_29 *)
    eqmod (2**32) * (inp_poly_29 * inp_poly_29)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 22789706],
    (* inp_poly_30 *)
    eqmod (2**32) * (inp_poly_30 * inp_poly_30)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 17372579],
    (* inp_poly_31 *)
    eqmod (2**32) * (inp_poly_31 * inp_poly_31)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 7793502],
    (* inp_poly_32 *)
    eqmod (2**32) * (inp_poly_32 * inp_poly_32)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 11257497],
    (* inp_poly_33 *)
    eqmod (2**32) * (inp_poly_33 * inp_poly_33)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13908584],
    (* inp_poly_34 *)
    eqmod (2**32) * (inp_poly_34 * inp_poly_34)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 3205585],
    (* inp_poly_35 *)
    eqmod (2**32) * (inp_poly_35 * inp_poly_35)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 21960496],
    (* inp_poly_36 *)
    eqmod (2**32) * (inp_poly_36 * inp_poly_36)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13138404],
    (* inp_poly_37 *)
    eqmod (2**32) * (inp_poly_37 * inp_poly_37)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 12027677],
    (* inp_poly_38 *)
    eqmod (2**32) * (inp_poly_38 * inp_poly_38)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 13052373],
    (* inp_poly_39 *)
    eqmod (2**32) * (inp_poly_39 * inp_poly_39)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 12113708],
    (* inp_poly_40 *)
    eqmod (2**32) * (inp_poly_40 * inp_poly_40)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 19474337],
    (* inp_poly_41 *)
    eqmod (2**32) * (inp_poly_41 * inp_poly_41)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 5691744],
    (* inp_poly_42 *)
    eqmod (2**32) * (inp_poly_42 * inp_poly_42)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 12583566],
    (* inp_poly_43 *)
    eqmod (2**32) * (inp_poly_43 * inp_poly_43)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 12582515],
    (* inp_poly_44 *)
    eqmod (2**32) * (inp_poly_44 * inp_poly_44)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 4283752],
    (* inp_poly_45 *)
    eqmod (2**32) * (inp_poly_45 * inp_poly_45)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 20882329],
    (* inp_poly_46 *)
    eqmod (2**32) * (inp_poly_46 * inp_poly_46)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18295001],
    (* inp_poly_47 *)
    eqmod (2**32) * (inp_poly_47 * inp_poly_47)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 6871080],
    (* inp_poly_48 *)
    eqmod (2**32) * (inp_poly_48 * inp_poly_48)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 7038058],
    (* inp_poly_49 *)
    eqmod (2**32) * (inp_poly_49 * inp_poly_49)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18128023],
    (* inp_poly_50 *)
    eqmod (2**32) * (inp_poly_50 * inp_poly_50)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18026180],
    (* inp_poly_51 *)
    eqmod (2**32) * (inp_poly_51 * inp_poly_51)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 7139901],
    (* inp_poly_52 *)
    eqmod (2**32) * (inp_poly_52 * inp_poly_52)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 14761830],
    (* inp_poly_53 *)
    eqmod (2**32) * (inp_poly_53 * inp_poly_53)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 10404251],
    (* inp_poly_54 *)
    eqmod (2**32) * (inp_poly_54 * inp_poly_54)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 21664729],
    (* inp_poly_55 *)
    eqmod (2**32) * (inp_poly_55 * inp_poly_55)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 3501352],
    (* inp_poly_56 *)
    eqmod (2**32) * (inp_poly_56 * inp_poly_56)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 8242393],
    (* inp_poly_57 *)
    eqmod (2**32) * (inp_poly_57 * inp_poly_57)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 16923688],
    (* inp_poly_58 *)
    eqmod (2**32) * (inp_poly_58 * inp_poly_58)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 9868967],
    (* inp_poly_59 *)
    eqmod (2**32) * (inp_poly_59 * inp_poly_59)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 15297114],
    (* inp_poly_60 *)
    eqmod (2**32) * (inp_poly_60 * inp_poly_60)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 18216472],
    (* inp_poly_61 *)
    eqmod (2**32) * (inp_poly_61 * inp_poly_61)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 6949609],
    (* inp_poly_62 *)
    eqmod (2**32) * (inp_poly_62 * inp_poly_62)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 2603275],
    (* inp_poly_63 *)
    eqmod (2**32) * (inp_poly_63 * inp_poly_63)
          (
            L0x20019848_f * (x**0) + L0x2001984a_f * (x**1) + 
            L0x2001984c_f * (x**2) + L0x2001984e_f * (x**3) + 
            L0x20019850_f * (x**4) + L0x20019852_f * (x**5) + 
            L0x20019854_f * (x**6) + L0x20019856_f * (x**7) + 
            L0x20019858_f * (x**8) + L0x2001985a_f * (x**9) + 
            L0x2001985c_f * (x**10) + L0x2001985e_f * (x**11) + 
            L0x20019860_f * (x**12) + L0x20019862_f * (x**13) + 
            L0x20019864_f * (x**14) + L0x20019866_f * (x**15) + 
            L0x20019868_f * (x**16) + L0x2001986a_f * (x**17) + 
            L0x2001986c_f * (x**18) + L0x2001986e_f * (x**19) + 
            L0x20019870_f * (x**20) + L0x20019872_f * (x**21) + 
            L0x20019874_f * (x**22) + L0x20019876_f * (x**23) + 
            L0x20019878_f * (x**24) + L0x2001987a_f * (x**25) + 
            L0x2001987c_f * (x**26) + L0x2001987e_f * (x**27) + 
            L0x20019880_f * (x**28) + L0x20019882_f * (x**29) + 
            L0x20019884_f * (x**30) + L0x20019886_f * (x**31) + 
            L0x20019888_f * (x**32) + L0x2001988a_f * (x**33) + 
            L0x2001988c_f * (x**34) + L0x2001988e_f * (x**35) + 
            L0x20019890_f * (x**36) + L0x20019892_f * (x**37) + 
            L0x20019894_f * (x**38) + L0x20019896_f * (x**39) + 
            L0x20019898_f * (x**40) + L0x2001989a_f * (x**41) + 
            L0x2001989c_f * (x**42) + L0x2001989e_f * (x**43) + 
            L0x200198a0_f * (x**44) + L0x200198a2_f * (x**45) + 
            L0x200198a4_f * (x**46) + L0x200198a6_f * (x**47) + 
            L0x200198a8_f * (x**48) + L0x200198aa_f * (x**49) + 
            L0x200198ac_f * (x**50) + L0x200198ae_f * (x**51) + 
            L0x200198b0_f * (x**52) + L0x200198b2_f * (x**53) + 
            L0x200198b4_f * (x**54) + L0x200198b6_f * (x**55) + 
            L0x200198b8_f * (x**56) + L0x200198ba_f * (x**57) + 
            L0x200198bc_f * (x**58) + L0x200198be_f * (x**59) + 
            L0x200198c0_f * (x**60) + L0x200198c2_f * (x**61) + 
            L0x200198c4_f * (x**62) + L0x200198c6_f * (x**63) + 
            L0x200198c8_f * (x**64) + L0x200198ca_f * (x**65) + 
            L0x200198cc_f * (x**66) + L0x200198ce_f * (x**67) + 
            L0x200198d0_f * (x**68) + L0x200198d2_f * (x**69) + 
            L0x200198d4_f * (x**70) + L0x200198d6_f * (x**71) + 
            L0x200198d8_f * (x**72) + L0x200198da_f * (x**73) + 
            L0x200198dc_f * (x**74) + L0x200198de_f * (x**75) + 
            L0x200198e0_f * (x**76) + L0x200198e2_f * (x**77) + 
            L0x200198e4_f * (x**78) + L0x200198e6_f * (x**79) + 
            L0x200198e8_f * (x**80) + L0x200198ea_f * (x**81) + 
            L0x200198ec_f * (x**82) + L0x200198ee_f * (x**83) + 
            L0x200198f0_f * (x**84) + L0x200198f2_f * (x**85) + 
            L0x200198f4_f * (x**86) + L0x200198f6_f * (x**87) + 
            L0x200198f8_f * (x**88) + L0x200198fa_f * (x**89) + 
            L0x200198fc_f * (x**90) + L0x200198fe_f * (x**91) + 
            L0x20019900_f * (x**92) + L0x20019902_f * (x**93) + 
            L0x20019904_f * (x**94) + L0x20019906_f * (x**95) + 
            L0x20019908_f * (x**96) + L0x2001990a_f * (x**97) + 
            L0x2001990c_f * (x**98) + L0x2001990e_f * (x**99) + 
            L0x20019910_f * (x**100) + L0x20019912_f * (x**101) + 
            L0x20019914_f * (x**102) + L0x20019916_f * (x**103) + 
            L0x20019918_f * (x**104) + L0x2001991a_f * (x**105) + 
            L0x2001991c_f * (x**106) + L0x2001991e_f * (x**107) + 
            L0x20019920_f * (x**108) + L0x20019922_f * (x**109) + 
            L0x20019924_f * (x**110) + L0x20019926_f * (x**111) + 
            L0x20019928_f * (x**112) + L0x2001992a_f * (x**113) + 
            L0x2001992c_f * (x**114) + L0x2001992e_f * (x**115) + 
            L0x20019930_f * (x**116) + L0x20019932_f * (x**117) + 
            L0x20019934_f * (x**118) + L0x20019936_f * (x**119) + 
            L0x20019938_f * (x**120) + L0x2001993a_f * (x**121) + 
            L0x2001993c_f * (x**122) + L0x2001993e_f * (x**123) + 
            L0x20019940_f * (x**124) + L0x20019942_f * (x**125) + 
            L0x20019944_f * (x**126) + L0x20019946_f * (x**127) + 
            L0x20019948_f * (x**128) + L0x2001994a_f * (x**129) + 
            L0x2001994c_f * (x**130) + L0x2001994e_f * (x**131) + 
            L0x20019950_f * (x**132) + L0x20019952_f * (x**133) + 
            L0x20019954_f * (x**134) + L0x20019956_f * (x**135) + 
            L0x20019958_f * (x**136) + L0x2001995a_f * (x**137) + 
            L0x2001995c_f * (x**138) + L0x2001995e_f * (x**139) + 
            L0x20019960_f * (x**140) + L0x20019962_f * (x**141) + 
            L0x20019964_f * (x**142) + L0x20019966_f * (x**143) + 
            L0x20019968_f * (x**144) + L0x2001996a_f * (x**145) + 
            L0x2001996c_f * (x**146) + L0x2001996e_f * (x**147) + 
            L0x20019970_f * (x**148) + L0x20019972_f * (x**149) + 
            L0x20019974_f * (x**150) + L0x20019976_f * (x**151) + 
            L0x20019978_f * (x**152) + L0x2001997a_f * (x**153) + 
            L0x2001997c_f * (x**154) + L0x2001997e_f * (x**155) + 
            L0x20019980_f * (x**156) + L0x20019982_f * (x**157) + 
            L0x20019984_f * (x**158) + L0x20019986_f * (x**159) + 
            L0x20019988_f * (x**160) + L0x2001998a_f * (x**161) + 
            L0x2001998c_f * (x**162) + L0x2001998e_f * (x**163) + 
            L0x20019990_f * (x**164) + L0x20019992_f * (x**165) + 
            L0x20019994_f * (x**166) + L0x20019996_f * (x**167) + 
            L0x20019998_f * (x**168) + L0x2001999a_f * (x**169) + 
            L0x2001999c_f * (x**170) + L0x2001999e_f * (x**171) + 
            L0x200199a0_f * (x**172) + L0x200199a2_f * (x**173) + 
            L0x200199a4_f * (x**174) + L0x200199a6_f * (x**175) + 
            L0x200199a8_f * (x**176) + L0x200199aa_f * (x**177) + 
            L0x200199ac_f * (x**178) + L0x200199ae_f * (x**179) + 
            L0x200199b0_f * (x**180) + L0x200199b2_f * (x**181) + 
            L0x200199b4_f * (x**182) + L0x200199b6_f * (x**183) + 
            L0x200199b8_f * (x**184) + L0x200199ba_f * (x**185) + 
            L0x200199bc_f * (x**186) + L0x200199be_f * (x**187) + 
            L0x200199c0_f * (x**188) + L0x200199c2_f * (x**189) + 
            L0x200199c4_f * (x**190) + L0x200199c6_f * (x**191) + 
            L0x200199c8_f * (x**192) + L0x200199ca_f * (x**193) + 
            L0x200199cc_f * (x**194) + L0x200199ce_f * (x**195) + 
            L0x200199d0_f * (x**196) + L0x200199d2_f * (x**197) + 
            L0x200199d4_f * (x**198) + L0x200199d6_f * (x**199) + 
            L0x200199d8_f * (x**200) + L0x200199da_f * (x**201) + 
            L0x200199dc_f * (x**202) + L0x200199de_f * (x**203) + 
            L0x200199e0_f * (x**204) + L0x200199e2_f * (x**205) + 
            L0x200199e4_f * (x**206) + L0x200199e6_f * (x**207) + 
            L0x200199e8_f * (x**208) + L0x200199ea_f * (x**209) + 
            L0x200199ec_f * (x**210) + L0x200199ee_f * (x**211) + 
            L0x200199f0_f * (x**212) + L0x200199f2_f * (x**213) + 
            L0x200199f4_f * (x**214) + L0x200199f6_f * (x**215) + 
            L0x200199f8_f * (x**216) + L0x200199fa_f * (x**217) + 
            L0x200199fc_f * (x**218) + L0x200199fe_f * (x**219) + 
            L0x20019a00_f * (x**220) + L0x20019a02_f * (x**221) + 
            L0x20019a04_f * (x**222) + L0x20019a06_f * (x**223) + 
            L0x20019a08_f * (x**224) + L0x20019a0a_f * (x**225) + 
            L0x20019a0c_f * (x**226) + L0x20019a0e_f * (x**227) + 
            L0x20019a10_f * (x**228) + L0x20019a12_f * (x**229) + 
            L0x20019a14_f * (x**230) + L0x20019a16_f * (x**231) + 
            L0x20019a18_f * (x**232) + L0x20019a1a_f * (x**233) + 
            L0x20019a1c_f * (x**234) + L0x20019a1e_f * (x**235) + 
            L0x20019a20_f * (x**236) + L0x20019a22_f * (x**237) + 
            L0x20019a24_f * (x**238) + L0x20019a26_f * (x**239) + 
            L0x20019a28_f * (x**240) + L0x20019a2a_f * (x**241) + 
            L0x20019a2c_f * (x**242) + L0x20019a2e_f * (x**243) + 
            L0x20019a30_f * (x**244) + L0x20019a32_f * (x**245) + 
            L0x20019a34_f * (x**246) + L0x20019a36_f * (x**247) + 
            L0x20019a38_f * (x**248) + L0x20019a3a_f * (x**249) + 
            L0x20019a3c_f * (x**250) + L0x20019a3e_f * (x**251) + 
            L0x20019a40_f * (x**252) + L0x20019a42_f * (x**253) + 
            L0x20019a44_f * (x**254) + L0x20019a46_f * (x**255)
          )
          [x**4 - 22562806],
    (* mod q *)
    eqmod L0x20019848_f L0x20019848 (2**13),
    eqmod L0x2001984a_f L0x2001984a (2**13),
    eqmod L0x2001984c_f L0x2001984c (2**13),
    eqmod L0x2001984e_f L0x2001984e (2**13),
    eqmod L0x20019850_f L0x20019850 (2**13),
    eqmod L0x20019852_f L0x20019852 (2**13),
    eqmod L0x20019854_f L0x20019854 (2**13),
    eqmod L0x20019856_f L0x20019856 (2**13),
    eqmod L0x20019858_f L0x20019858 (2**13),
    eqmod L0x2001985a_f L0x2001985a (2**13),
    eqmod L0x2001985c_f L0x2001985c (2**13),
    eqmod L0x2001985e_f L0x2001985e (2**13),
    eqmod L0x20019860_f L0x20019860 (2**13),
    eqmod L0x20019862_f L0x20019862 (2**13),
    eqmod L0x20019864_f L0x20019864 (2**13),
    eqmod L0x20019866_f L0x20019866 (2**13),
    eqmod L0x20019868_f L0x20019868 (2**13),
    eqmod L0x2001986a_f L0x2001986a (2**13),
    eqmod L0x2001986c_f L0x2001986c (2**13),
    eqmod L0x2001986e_f L0x2001986e (2**13),
    eqmod L0x20019870_f L0x20019870 (2**13),
    eqmod L0x20019872_f L0x20019872 (2**13),
    eqmod L0x20019874_f L0x20019874 (2**13),
    eqmod L0x20019876_f L0x20019876 (2**13),
    eqmod L0x20019878_f L0x20019878 (2**13),
    eqmod L0x2001987a_f L0x2001987a (2**13),
    eqmod L0x2001987c_f L0x2001987c (2**13),
    eqmod L0x2001987e_f L0x2001987e (2**13),
    eqmod L0x20019880_f L0x20019880 (2**13),
    eqmod L0x20019882_f L0x20019882 (2**13),
    eqmod L0x20019884_f L0x20019884 (2**13),
    eqmod L0x20019886_f L0x20019886 (2**13),
    eqmod L0x20019888_f L0x20019888 (2**13),
    eqmod L0x2001988a_f L0x2001988a (2**13),
    eqmod L0x2001988c_f L0x2001988c (2**13),
    eqmod L0x2001988e_f L0x2001988e (2**13),
    eqmod L0x20019890_f L0x20019890 (2**13),
    eqmod L0x20019892_f L0x20019892 (2**13),
    eqmod L0x20019894_f L0x20019894 (2**13),
    eqmod L0x20019896_f L0x20019896 (2**13),
    eqmod L0x20019898_f L0x20019898 (2**13),
    eqmod L0x2001989a_f L0x2001989a (2**13),
    eqmod L0x2001989c_f L0x2001989c (2**13),
    eqmod L0x2001989e_f L0x2001989e (2**13),
    eqmod L0x200198a0_f L0x200198a0 (2**13),
    eqmod L0x200198a2_f L0x200198a2 (2**13),
    eqmod L0x200198a4_f L0x200198a4 (2**13),
    eqmod L0x200198a6_f L0x200198a6 (2**13),
    eqmod L0x200198a8_f L0x200198a8 (2**13),
    eqmod L0x200198aa_f L0x200198aa (2**13),
    eqmod L0x200198ac_f L0x200198ac (2**13),
    eqmod L0x200198ae_f L0x200198ae (2**13),
    eqmod L0x200198b0_f L0x200198b0 (2**13),
    eqmod L0x200198b2_f L0x200198b2 (2**13),
    eqmod L0x200198b4_f L0x200198b4 (2**13),
    eqmod L0x200198b6_f L0x200198b6 (2**13),
    eqmod L0x200198b8_f L0x200198b8 (2**13),
    eqmod L0x200198ba_f L0x200198ba (2**13),
    eqmod L0x200198bc_f L0x200198bc (2**13),
    eqmod L0x200198be_f L0x200198be (2**13),
    eqmod L0x200198c0_f L0x200198c0 (2**13),
    eqmod L0x200198c2_f L0x200198c2 (2**13),
    eqmod L0x200198c4_f L0x200198c4 (2**13),
    eqmod L0x200198c6_f L0x200198c6 (2**13),
    eqmod L0x200198c8_f L0x200198c8 (2**13),
    eqmod L0x200198ca_f L0x200198ca (2**13),
    eqmod L0x200198cc_f L0x200198cc (2**13),
    eqmod L0x200198ce_f L0x200198ce (2**13),
    eqmod L0x200198d0_f L0x200198d0 (2**13),
    eqmod L0x200198d2_f L0x200198d2 (2**13),
    eqmod L0x200198d4_f L0x200198d4 (2**13),
    eqmod L0x200198d6_f L0x200198d6 (2**13),
    eqmod L0x200198d8_f L0x200198d8 (2**13),
    eqmod L0x200198da_f L0x200198da (2**13),
    eqmod L0x200198dc_f L0x200198dc (2**13),
    eqmod L0x200198de_f L0x200198de (2**13),
    eqmod L0x200198e0_f L0x200198e0 (2**13),
    eqmod L0x200198e2_f L0x200198e2 (2**13),
    eqmod L0x200198e4_f L0x200198e4 (2**13),
    eqmod L0x200198e6_f L0x200198e6 (2**13),
    eqmod L0x200198e8_f L0x200198e8 (2**13),
    eqmod L0x200198ea_f L0x200198ea (2**13),
    eqmod L0x200198ec_f L0x200198ec (2**13),
    eqmod L0x200198ee_f L0x200198ee (2**13),
    eqmod L0x200198f0_f L0x200198f0 (2**13),
    eqmod L0x200198f2_f L0x200198f2 (2**13),
    eqmod L0x200198f4_f L0x200198f4 (2**13),
    eqmod L0x200198f6_f L0x200198f6 (2**13),
    eqmod L0x200198f8_f L0x200198f8 (2**13),
    eqmod L0x200198fa_f L0x200198fa (2**13),
    eqmod L0x200198fc_f L0x200198fc (2**13),
    eqmod L0x200198fe_f L0x200198fe (2**13),
    eqmod L0x20019900_f L0x20019900 (2**13),
    eqmod L0x20019902_f L0x20019902 (2**13),
    eqmod L0x20019904_f L0x20019904 (2**13),
    eqmod L0x20019906_f L0x20019906 (2**13),
    eqmod L0x20019908_f L0x20019908 (2**13),
    eqmod L0x2001990a_f L0x2001990a (2**13),
    eqmod L0x2001990c_f L0x2001990c (2**13),
    eqmod L0x2001990e_f L0x2001990e (2**13),
    eqmod L0x20019910_f L0x20019910 (2**13),
    eqmod L0x20019912_f L0x20019912 (2**13),
    eqmod L0x20019914_f L0x20019914 (2**13),
    eqmod L0x20019916_f L0x20019916 (2**13),
    eqmod L0x20019918_f L0x20019918 (2**13),
    eqmod L0x2001991a_f L0x2001991a (2**13),
    eqmod L0x2001991c_f L0x2001991c (2**13),
    eqmod L0x2001991e_f L0x2001991e (2**13),
    eqmod L0x20019920_f L0x20019920 (2**13),
    eqmod L0x20019922_f L0x20019922 (2**13),
    eqmod L0x20019924_f L0x20019924 (2**13),
    eqmod L0x20019926_f L0x20019926 (2**13),
    eqmod L0x20019928_f L0x20019928 (2**13),
    eqmod L0x2001992a_f L0x2001992a (2**13),
    eqmod L0x2001992c_f L0x2001992c (2**13),
    eqmod L0x2001992e_f L0x2001992e (2**13),
    eqmod L0x20019930_f L0x20019930 (2**13),
    eqmod L0x20019932_f L0x20019932 (2**13),
    eqmod L0x20019934_f L0x20019934 (2**13),
    eqmod L0x20019936_f L0x20019936 (2**13),
    eqmod L0x20019938_f L0x20019938 (2**13),
    eqmod L0x2001993a_f L0x2001993a (2**13),
    eqmod L0x2001993c_f L0x2001993c (2**13),
    eqmod L0x2001993e_f L0x2001993e (2**13),
    eqmod L0x20019940_f L0x20019940 (2**13),
    eqmod L0x20019942_f L0x20019942 (2**13),
    eqmod L0x20019944_f L0x20019944 (2**13),
    eqmod L0x20019946_f L0x20019946 (2**13),
    eqmod L0x20019948_f L0x20019948 (2**13),
    eqmod L0x2001994a_f L0x2001994a (2**13),
    eqmod L0x2001994c_f L0x2001994c (2**13),
    eqmod L0x2001994e_f L0x2001994e (2**13),
    eqmod L0x20019950_f L0x20019950 (2**13),
    eqmod L0x20019952_f L0x20019952 (2**13),
    eqmod L0x20019954_f L0x20019954 (2**13),
    eqmod L0x20019956_f L0x20019956 (2**13),
    eqmod L0x20019958_f L0x20019958 (2**13),
    eqmod L0x2001995a_f L0x2001995a (2**13),
    eqmod L0x2001995c_f L0x2001995c (2**13),
    eqmod L0x2001995e_f L0x2001995e (2**13),
    eqmod L0x20019960_f L0x20019960 (2**13),
    eqmod L0x20019962_f L0x20019962 (2**13),
    eqmod L0x20019964_f L0x20019964 (2**13),
    eqmod L0x20019966_f L0x20019966 (2**13),
    eqmod L0x20019968_f L0x20019968 (2**13),
    eqmod L0x2001996a_f L0x2001996a (2**13),
    eqmod L0x2001996c_f L0x2001996c (2**13),
    eqmod L0x2001996e_f L0x2001996e (2**13),
    eqmod L0x20019970_f L0x20019970 (2**13),
    eqmod L0x20019972_f L0x20019972 (2**13),
    eqmod L0x20019974_f L0x20019974 (2**13),
    eqmod L0x20019976_f L0x20019976 (2**13),
    eqmod L0x20019978_f L0x20019978 (2**13),
    eqmod L0x2001997a_f L0x2001997a (2**13),
    eqmod L0x2001997c_f L0x2001997c (2**13),
    eqmod L0x2001997e_f L0x2001997e (2**13),
    eqmod L0x20019980_f L0x20019980 (2**13),
    eqmod L0x20019982_f L0x20019982 (2**13),
    eqmod L0x20019984_f L0x20019984 (2**13),
    eqmod L0x20019986_f L0x20019986 (2**13),
    eqmod L0x20019988_f L0x20019988 (2**13),
    eqmod L0x2001998a_f L0x2001998a (2**13),
    eqmod L0x2001998c_f L0x2001998c (2**13),
    eqmod L0x2001998e_f L0x2001998e (2**13),
    eqmod L0x20019990_f L0x20019990 (2**13),
    eqmod L0x20019992_f L0x20019992 (2**13),
    eqmod L0x20019994_f L0x20019994 (2**13),
    eqmod L0x20019996_f L0x20019996 (2**13),
    eqmod L0x20019998_f L0x20019998 (2**13),
    eqmod L0x2001999a_f L0x2001999a (2**13),
    eqmod L0x2001999c_f L0x2001999c (2**13),
    eqmod L0x2001999e_f L0x2001999e (2**13),
    eqmod L0x200199a0_f L0x200199a0 (2**13),
    eqmod L0x200199a2_f L0x200199a2 (2**13),
    eqmod L0x200199a4_f L0x200199a4 (2**13),
    eqmod L0x200199a6_f L0x200199a6 (2**13),
    eqmod L0x200199a8_f L0x200199a8 (2**13),
    eqmod L0x200199aa_f L0x200199aa (2**13),
    eqmod L0x200199ac_f L0x200199ac (2**13),
    eqmod L0x200199ae_f L0x200199ae (2**13),
    eqmod L0x200199b0_f L0x200199b0 (2**13),
    eqmod L0x200199b2_f L0x200199b2 (2**13),
    eqmod L0x200199b4_f L0x200199b4 (2**13),
    eqmod L0x200199b6_f L0x200199b6 (2**13),
    eqmod L0x200199b8_f L0x200199b8 (2**13),
    eqmod L0x200199ba_f L0x200199ba (2**13),
    eqmod L0x200199bc_f L0x200199bc (2**13),
    eqmod L0x200199be_f L0x200199be (2**13),
    eqmod L0x200199c0_f L0x200199c0 (2**13),
    eqmod L0x200199c2_f L0x200199c2 (2**13),
    eqmod L0x200199c4_f L0x200199c4 (2**13),
    eqmod L0x200199c6_f L0x200199c6 (2**13),
    eqmod L0x200199c8_f L0x200199c8 (2**13),
    eqmod L0x200199ca_f L0x200199ca (2**13),
    eqmod L0x200199cc_f L0x200199cc (2**13),
    eqmod L0x200199ce_f L0x200199ce (2**13),
    eqmod L0x200199d0_f L0x200199d0 (2**13),
    eqmod L0x200199d2_f L0x200199d2 (2**13),
    eqmod L0x200199d4_f L0x200199d4 (2**13),
    eqmod L0x200199d6_f L0x200199d6 (2**13),
    eqmod L0x200199d8_f L0x200199d8 (2**13),
    eqmod L0x200199da_f L0x200199da (2**13),
    eqmod L0x200199dc_f L0x200199dc (2**13),
    eqmod L0x200199de_f L0x200199de (2**13),
    eqmod L0x200199e0_f L0x200199e0 (2**13),
    eqmod L0x200199e2_f L0x200199e2 (2**13),
    eqmod L0x200199e4_f L0x200199e4 (2**13),
    eqmod L0x200199e6_f L0x200199e6 (2**13),
    eqmod L0x200199e8_f L0x200199e8 (2**13),
    eqmod L0x200199ea_f L0x200199ea (2**13),
    eqmod L0x200199ec_f L0x200199ec (2**13),
    eqmod L0x200199ee_f L0x200199ee (2**13),
    eqmod L0x200199f0_f L0x200199f0 (2**13),
    eqmod L0x200199f2_f L0x200199f2 (2**13),
    eqmod L0x200199f4_f L0x200199f4 (2**13),
    eqmod L0x200199f6_f L0x200199f6 (2**13),
    eqmod L0x200199f8_f L0x200199f8 (2**13),
    eqmod L0x200199fa_f L0x200199fa (2**13),
    eqmod L0x200199fc_f L0x200199fc (2**13),
    eqmod L0x200199fe_f L0x200199fe (2**13),
    eqmod L0x20019a00_f L0x20019a00 (2**13),
    eqmod L0x20019a02_f L0x20019a02 (2**13),
    eqmod L0x20019a04_f L0x20019a04 (2**13),
    eqmod L0x20019a06_f L0x20019a06 (2**13),
    eqmod L0x20019a08_f L0x20019a08 (2**13),
    eqmod L0x20019a0a_f L0x20019a0a (2**13),
    eqmod L0x20019a0c_f L0x20019a0c (2**13),
    eqmod L0x20019a0e_f L0x20019a0e (2**13),
    eqmod L0x20019a10_f L0x20019a10 (2**13),
    eqmod L0x20019a12_f L0x20019a12 (2**13),
    eqmod L0x20019a14_f L0x20019a14 (2**13),
    eqmod L0x20019a16_f L0x20019a16 (2**13),
    eqmod L0x20019a18_f L0x20019a18 (2**13),
    eqmod L0x20019a1a_f L0x20019a1a (2**13),
    eqmod L0x20019a1c_f L0x20019a1c (2**13),
    eqmod L0x20019a1e_f L0x20019a1e (2**13),
    eqmod L0x20019a20_f L0x20019a20 (2**13),
    eqmod L0x20019a22_f L0x20019a22 (2**13),
    eqmod L0x20019a24_f L0x20019a24 (2**13),
    eqmod L0x20019a26_f L0x20019a26 (2**13),
    eqmod L0x20019a28_f L0x20019a28 (2**13),
    eqmod L0x20019a2a_f L0x20019a2a (2**13),
    eqmod L0x20019a2c_f L0x20019a2c (2**13),
    eqmod L0x20019a2e_f L0x20019a2e (2**13),
    eqmod L0x20019a30_f L0x20019a30 (2**13),
    eqmod L0x20019a32_f L0x20019a32 (2**13),
    eqmod L0x20019a34_f L0x20019a34 (2**13),
    eqmod L0x20019a36_f L0x20019a36 (2**13),
    eqmod L0x20019a38_f L0x20019a38 (2**13),
    eqmod L0x20019a3a_f L0x20019a3a (2**13),
    eqmod L0x20019a3c_f L0x20019a3c (2**13),
    eqmod L0x20019a3e_f L0x20019a3e (2**13),
    eqmod L0x20019a40_f L0x20019a40 (2**13),
    eqmod L0x20019a42_f L0x20019a42 (2**13),
    eqmod L0x20019a44_f L0x20019a44 (2**13),
    eqmod L0x20019a46_f L0x20019a46 (2**13)
  ]
  &&
  true
;

(* === post condition === *)
{
  (* algebraic *)
  and [
    (* inp_poly_0 *)
    eqmod (2**32) * (inp_poly_0 * inp_poly_0)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 9849271],
    (* inp_poly_1 *)
    eqmod (2**32) * (inp_poly_1 * inp_poly_1)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 15316810],
    (* inp_poly_2 *)
    eqmod (2**32) * (inp_poly_2 * inp_poly_2)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 3773600],
    (* inp_poly_3 *)
    eqmod (2**32) * (inp_poly_3 * inp_poly_3)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 21392481],
    (* inp_poly_4 *)
    eqmod (2**32) * (inp_poly_4 * inp_poly_4)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 21715468],
    (* inp_poly_5 *)
    eqmod (2**32) * (inp_poly_5 * inp_poly_5)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 3450613],
    (* inp_poly_6 *)
    eqmod (2**32) * (inp_poly_6 * inp_poly_6)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 22783829],
    (* inp_poly_7 *)
    eqmod (2**32) * (inp_poly_7 * inp_poly_7)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 2382252],
    (* inp_poly_8 *)
    eqmod (2**32) * (inp_poly_8 * inp_poly_8)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 22990379],
    (* inp_poly_9 *)
    eqmod (2**32) * (inp_poly_9 * inp_poly_9)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 2175702],
    (* inp_poly_10 *)
    eqmod (2**32) * (inp_poly_10 * inp_poly_10)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 20348569],
    (* inp_poly_11 *)
    eqmod (2**32) * (inp_poly_11 * inp_poly_11)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 4817512],
    (* inp_poly_12 *)
    eqmod (2**32) * (inp_poly_12 * inp_poly_12)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 11666526],
    (* inp_poly_13 *)
    eqmod (2**32) * (inp_poly_13 * inp_poly_13)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13499555],
    (* inp_poly_14 *)
    eqmod (2**32) * (inp_poly_14 * inp_poly_14)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 91549],
    (* inp_poly_15 *)
    eqmod (2**32) * (inp_poly_15 * inp_poly_15)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 25074532],
    (* inp_poly_16 *)
    eqmod (2**32) * (inp_poly_16 * inp_poly_16)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13586079],
    (* inp_poly_17 *)
    eqmod (2**32) * (inp_poly_17 * inp_poly_17)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 11580002],
    (* inp_poly_18 *)
    eqmod (2**32) * (inp_poly_18 * inp_poly_18)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13600017],
    (* inp_poly_19 *)
    eqmod (2**32) * (inp_poly_19 * inp_poly_19)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 11566064],
    (* inp_poly_20 *)
    eqmod (2**32) * (inp_poly_20 * inp_poly_20)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 7063743],
    (* inp_poly_21 *)
    eqmod (2**32) * (inp_poly_21 * inp_poly_21)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18102338],
    (* inp_poly_22 *)
    eqmod (2**32) * (inp_poly_22 * inp_poly_22)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 14966334],
    (* inp_poly_23 *)
    eqmod (2**32) * (inp_poly_23 * inp_poly_23)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 10199747],
    (* inp_poly_24 *)
    eqmod (2**32) * (inp_poly_24 * inp_poly_24)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 6767963],
    (* inp_poly_25 *)
    eqmod (2**32) * (inp_poly_25 * inp_poly_25)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18398118],
    (* inp_poly_26 *)
    eqmod (2**32) * (inp_poly_26 * inp_poly_26)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 6836706],
    (* inp_poly_27 *)
    eqmod (2**32) * (inp_poly_27 * inp_poly_27)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18329375],
    (* inp_poly_28 *)
    eqmod (2**32) * (inp_poly_28 * inp_poly_28)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 2376375],
    (* inp_poly_29 *)
    eqmod (2**32) * (inp_poly_29 * inp_poly_29)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 22789706],
    (* inp_poly_30 *)
    eqmod (2**32) * (inp_poly_30 * inp_poly_30)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 17372579],
    (* inp_poly_31 *)
    eqmod (2**32) * (inp_poly_31 * inp_poly_31)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 7793502],
    (* inp_poly_32 *)
    eqmod (2**32) * (inp_poly_32 * inp_poly_32)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 11257497],
    (* inp_poly_33 *)
    eqmod (2**32) * (inp_poly_33 * inp_poly_33)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13908584],
    (* inp_poly_34 *)
    eqmod (2**32) * (inp_poly_34 * inp_poly_34)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 3205585],
    (* inp_poly_35 *)
    eqmod (2**32) * (inp_poly_35 * inp_poly_35)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 21960496],
    (* inp_poly_36 *)
    eqmod (2**32) * (inp_poly_36 * inp_poly_36)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13138404],
    (* inp_poly_37 *)
    eqmod (2**32) * (inp_poly_37 * inp_poly_37)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 12027677],
    (* inp_poly_38 *)
    eqmod (2**32) * (inp_poly_38 * inp_poly_38)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 13052373],
    (* inp_poly_39 *)
    eqmod (2**32) * (inp_poly_39 * inp_poly_39)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 12113708],
    (* inp_poly_40 *)
    eqmod (2**32) * (inp_poly_40 * inp_poly_40)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 19474337],
    (* inp_poly_41 *)
    eqmod (2**32) * (inp_poly_41 * inp_poly_41)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 5691744],
    (* inp_poly_42 *)
    eqmod (2**32) * (inp_poly_42 * inp_poly_42)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 12583566],
    (* inp_poly_43 *)
    eqmod (2**32) * (inp_poly_43 * inp_poly_43)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 12582515],
    (* inp_poly_44 *)
    eqmod (2**32) * (inp_poly_44 * inp_poly_44)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 4283752],
    (* inp_poly_45 *)
    eqmod (2**32) * (inp_poly_45 * inp_poly_45)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 20882329],
    (* inp_poly_46 *)
    eqmod (2**32) * (inp_poly_46 * inp_poly_46)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18295001],
    (* inp_poly_47 *)
    eqmod (2**32) * (inp_poly_47 * inp_poly_47)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 6871080],
    (* inp_poly_48 *)
    eqmod (2**32) * (inp_poly_48 * inp_poly_48)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 7038058],
    (* inp_poly_49 *)
    eqmod (2**32) * (inp_poly_49 * inp_poly_49)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18128023],
    (* inp_poly_50 *)
    eqmod (2**32) * (inp_poly_50 * inp_poly_50)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18026180],
    (* inp_poly_51 *)
    eqmod (2**32) * (inp_poly_51 * inp_poly_51)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 7139901],
    (* inp_poly_52 *)
    eqmod (2**32) * (inp_poly_52 * inp_poly_52)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 14761830],
    (* inp_poly_53 *)
    eqmod (2**32) * (inp_poly_53 * inp_poly_53)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 10404251],
    (* inp_poly_54 *)
    eqmod (2**32) * (inp_poly_54 * inp_poly_54)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 21664729],
    (* inp_poly_55 *)
    eqmod (2**32) * (inp_poly_55 * inp_poly_55)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 3501352],
    (* inp_poly_56 *)
    eqmod (2**32) * (inp_poly_56 * inp_poly_56)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 8242393],
    (* inp_poly_57 *)
    eqmod (2**32) * (inp_poly_57 * inp_poly_57)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 16923688],
    (* inp_poly_58 *)
    eqmod (2**32) * (inp_poly_58 * inp_poly_58)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 9868967],
    (* inp_poly_59 *)
    eqmod (2**32) * (inp_poly_59 * inp_poly_59)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 15297114],
    (* inp_poly_60 *)
    eqmod (2**32) * (inp_poly_60 * inp_poly_60)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 18216472],
    (* inp_poly_61 *)
    eqmod (2**32) * (inp_poly_61 * inp_poly_61)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 6949609],
    (* inp_poly_62 *)
    eqmod (2**32) * (inp_poly_62 * inp_poly_62)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 2603275],
    (* inp_poly_63 *)
    eqmod (2**32) * (inp_poly_63 * inp_poly_63)
          (
            L0x20019848 * (x**0) + L0x2001984a * (x**1) + 
            L0x2001984c * (x**2) + L0x2001984e * (x**3) + 
            L0x20019850 * (x**4) + L0x20019852 * (x**5) + 
            L0x20019854 * (x**6) + L0x20019856 * (x**7) + 
            L0x20019858 * (x**8) + L0x2001985a * (x**9) + 
            L0x2001985c * (x**10) + L0x2001985e * (x**11) + 
            L0x20019860 * (x**12) + L0x20019862 * (x**13) + 
            L0x20019864 * (x**14) + L0x20019866 * (x**15) + 
            L0x20019868 * (x**16) + L0x2001986a * (x**17) + 
            L0x2001986c * (x**18) + L0x2001986e * (x**19) + 
            L0x20019870 * (x**20) + L0x20019872 * (x**21) + 
            L0x20019874 * (x**22) + L0x20019876 * (x**23) + 
            L0x20019878 * (x**24) + L0x2001987a * (x**25) + 
            L0x2001987c * (x**26) + L0x2001987e * (x**27) + 
            L0x20019880 * (x**28) + L0x20019882 * (x**29) + 
            L0x20019884 * (x**30) + L0x20019886 * (x**31) + 
            L0x20019888 * (x**32) + L0x2001988a * (x**33) + 
            L0x2001988c * (x**34) + L0x2001988e * (x**35) + 
            L0x20019890 * (x**36) + L0x20019892 * (x**37) + 
            L0x20019894 * (x**38) + L0x20019896 * (x**39) + 
            L0x20019898 * (x**40) + L0x2001989a * (x**41) + 
            L0x2001989c * (x**42) + L0x2001989e * (x**43) + 
            L0x200198a0 * (x**44) + L0x200198a2 * (x**45) + 
            L0x200198a4 * (x**46) + L0x200198a6 * (x**47) + 
            L0x200198a8 * (x**48) + L0x200198aa * (x**49) + 
            L0x200198ac * (x**50) + L0x200198ae * (x**51) + 
            L0x200198b0 * (x**52) + L0x200198b2 * (x**53) + 
            L0x200198b4 * (x**54) + L0x200198b6 * (x**55) + 
            L0x200198b8 * (x**56) + L0x200198ba * (x**57) + 
            L0x200198bc * (x**58) + L0x200198be * (x**59) + 
            L0x200198c0 * (x**60) + L0x200198c2 * (x**61) + 
            L0x200198c4 * (x**62) + L0x200198c6 * (x**63) + 
            L0x200198c8 * (x**64) + L0x200198ca * (x**65) + 
            L0x200198cc * (x**66) + L0x200198ce * (x**67) + 
            L0x200198d0 * (x**68) + L0x200198d2 * (x**69) + 
            L0x200198d4 * (x**70) + L0x200198d6 * (x**71) + 
            L0x200198d8 * (x**72) + L0x200198da * (x**73) + 
            L0x200198dc * (x**74) + L0x200198de * (x**75) + 
            L0x200198e0 * (x**76) + L0x200198e2 * (x**77) + 
            L0x200198e4 * (x**78) + L0x200198e6 * (x**79) + 
            L0x200198e8 * (x**80) + L0x200198ea * (x**81) + 
            L0x200198ec * (x**82) + L0x200198ee * (x**83) + 
            L0x200198f0 * (x**84) + L0x200198f2 * (x**85) + 
            L0x200198f4 * (x**86) + L0x200198f6 * (x**87) + 
            L0x200198f8 * (x**88) + L0x200198fa * (x**89) + 
            L0x200198fc * (x**90) + L0x200198fe * (x**91) + 
            L0x20019900 * (x**92) + L0x20019902 * (x**93) + 
            L0x20019904 * (x**94) + L0x20019906 * (x**95) + 
            L0x20019908 * (x**96) + L0x2001990a * (x**97) + 
            L0x2001990c * (x**98) + L0x2001990e * (x**99) + 
            L0x20019910 * (x**100) + L0x20019912 * (x**101) + 
            L0x20019914 * (x**102) + L0x20019916 * (x**103) + 
            L0x20019918 * (x**104) + L0x2001991a * (x**105) + 
            L0x2001991c * (x**106) + L0x2001991e * (x**107) + 
            L0x20019920 * (x**108) + L0x20019922 * (x**109) + 
            L0x20019924 * (x**110) + L0x20019926 * (x**111) + 
            L0x20019928 * (x**112) + L0x2001992a * (x**113) + 
            L0x2001992c * (x**114) + L0x2001992e * (x**115) + 
            L0x20019930 * (x**116) + L0x20019932 * (x**117) + 
            L0x20019934 * (x**118) + L0x20019936 * (x**119) + 
            L0x20019938 * (x**120) + L0x2001993a * (x**121) + 
            L0x2001993c * (x**122) + L0x2001993e * (x**123) + 
            L0x20019940 * (x**124) + L0x20019942 * (x**125) + 
            L0x20019944 * (x**126) + L0x20019946 * (x**127) + 
            L0x20019948 * (x**128) + L0x2001994a * (x**129) + 
            L0x2001994c * (x**130) + L0x2001994e * (x**131) + 
            L0x20019950 * (x**132) + L0x20019952 * (x**133) + 
            L0x20019954 * (x**134) + L0x20019956 * (x**135) + 
            L0x20019958 * (x**136) + L0x2001995a * (x**137) + 
            L0x2001995c * (x**138) + L0x2001995e * (x**139) + 
            L0x20019960 * (x**140) + L0x20019962 * (x**141) + 
            L0x20019964 * (x**142) + L0x20019966 * (x**143) + 
            L0x20019968 * (x**144) + L0x2001996a * (x**145) + 
            L0x2001996c * (x**146) + L0x2001996e * (x**147) + 
            L0x20019970 * (x**148) + L0x20019972 * (x**149) + 
            L0x20019974 * (x**150) + L0x20019976 * (x**151) + 
            L0x20019978 * (x**152) + L0x2001997a * (x**153) + 
            L0x2001997c * (x**154) + L0x2001997e * (x**155) + 
            L0x20019980 * (x**156) + L0x20019982 * (x**157) + 
            L0x20019984 * (x**158) + L0x20019986 * (x**159) + 
            L0x20019988 * (x**160) + L0x2001998a * (x**161) + 
            L0x2001998c * (x**162) + L0x2001998e * (x**163) + 
            L0x20019990 * (x**164) + L0x20019992 * (x**165) + 
            L0x20019994 * (x**166) + L0x20019996 * (x**167) + 
            L0x20019998 * (x**168) + L0x2001999a * (x**169) + 
            L0x2001999c * (x**170) + L0x2001999e * (x**171) + 
            L0x200199a0 * (x**172) + L0x200199a2 * (x**173) + 
            L0x200199a4 * (x**174) + L0x200199a6 * (x**175) + 
            L0x200199a8 * (x**176) + L0x200199aa * (x**177) + 
            L0x200199ac * (x**178) + L0x200199ae * (x**179) + 
            L0x200199b0 * (x**180) + L0x200199b2 * (x**181) + 
            L0x200199b4 * (x**182) + L0x200199b6 * (x**183) + 
            L0x200199b8 * (x**184) + L0x200199ba * (x**185) + 
            L0x200199bc * (x**186) + L0x200199be * (x**187) + 
            L0x200199c0 * (x**188) + L0x200199c2 * (x**189) + 
            L0x200199c4 * (x**190) + L0x200199c6 * (x**191) + 
            L0x200199c8 * (x**192) + L0x200199ca * (x**193) + 
            L0x200199cc * (x**194) + L0x200199ce * (x**195) + 
            L0x200199d0 * (x**196) + L0x200199d2 * (x**197) + 
            L0x200199d4 * (x**198) + L0x200199d6 * (x**199) + 
            L0x200199d8 * (x**200) + L0x200199da * (x**201) + 
            L0x200199dc * (x**202) + L0x200199de * (x**203) + 
            L0x200199e0 * (x**204) + L0x200199e2 * (x**205) + 
            L0x200199e4 * (x**206) + L0x200199e6 * (x**207) + 
            L0x200199e8 * (x**208) + L0x200199ea * (x**209) + 
            L0x200199ec * (x**210) + L0x200199ee * (x**211) + 
            L0x200199f0 * (x**212) + L0x200199f2 * (x**213) + 
            L0x200199f4 * (x**214) + L0x200199f6 * (x**215) + 
            L0x200199f8 * (x**216) + L0x200199fa * (x**217) + 
            L0x200199fc * (x**218) + L0x200199fe * (x**219) + 
            L0x20019a00 * (x**220) + L0x20019a02 * (x**221) + 
            L0x20019a04 * (x**222) + L0x20019a06 * (x**223) + 
            L0x20019a08 * (x**224) + L0x20019a0a * (x**225) + 
            L0x20019a0c * (x**226) + L0x20019a0e * (x**227) + 
            L0x20019a10 * (x**228) + L0x20019a12 * (x**229) + 
            L0x20019a14 * (x**230) + L0x20019a16 * (x**231) + 
            L0x20019a18 * (x**232) + L0x20019a1a * (x**233) + 
            L0x20019a1c * (x**234) + L0x20019a1e * (x**235) + 
            L0x20019a20 * (x**236) + L0x20019a22 * (x**237) + 
            L0x20019a24 * (x**238) + L0x20019a26 * (x**239) + 
            L0x20019a28 * (x**240) + L0x20019a2a * (x**241) + 
            L0x20019a2c * (x**242) + L0x20019a2e * (x**243) + 
            L0x20019a30 * (x**244) + L0x20019a32 * (x**245) + 
            L0x20019a34 * (x**246) + L0x20019a36 * (x**247) + 
            L0x20019a38 * (x**248) + L0x20019a3a * (x**249) + 
            L0x20019a3c * (x**250) + L0x20019a3e * (x**251) + 
            L0x20019a40 * (x**252) + L0x20019a42 * (x**253) + 
            L0x20019a44 * (x**254) + L0x20019a46 * (x**255)
          )
          [2**13, x**4 - 22562806]
  ]
  &&
  true
}

