proc main (sint16 c_00, sint16 c_01, sint16 c_02, sint16 c_03,
           sint16 c_04, sint16 c_05, sint16 c_06, sint16 c_07,
           sint16 c_08, sint16 c_09, sint16 c_0a, sint16 c_0b,
           sint16 c_0c, sint16 c_0d, sint16 c_0e, sint16 c_0f,
           sint16 c_10, sint16 c_11, sint16 c_12, sint16 c_13,
           sint16 c_14, sint16 c_15, sint16 c_16, sint16 c_17,
           sint16 c_18, sint16 c_19, sint16 c_1a, sint16 c_1b,
           sint16 c_1c, sint16 c_1d, sint16 c_1e, sint16 c_1f,
           sint16 c_20, sint16 c_21, sint16 c_22, sint16 c_23,
           sint16 c_24, sint16 c_25, sint16 c_26, sint16 c_27,
           sint16 c_28, sint16 c_29, sint16 c_2a, sint16 c_2b,
           sint16 c_2c, sint16 c_2d, sint16 c_2e, sint16 c_2f,
           sint16 c_30, sint16 c_31, sint16 c_32, sint16 c_33,
           sint16 c_34, sint16 c_35, sint16 c_36, sint16 c_37,
           sint16 c_38, sint16 c_39, sint16 c_3a, sint16 c_3b,
           sint16 c_3c, sint16 c_3d, sint16 c_3e, sint16 c_3f,
           sint16 c_40, sint16 c_41, sint16 c_42, sint16 c_43,
           sint16 c_44, sint16 c_45, sint16 c_46, sint16 c_47,
           sint16 c_48, sint16 c_49, sint16 c_4a, sint16 c_4b,
           sint16 c_4c, sint16 c_4d, sint16 c_4e, sint16 c_4f,
           sint16 c_50, sint16 c_51, sint16 c_52, sint16 c_53,
           sint16 c_54, sint16 c_55, sint16 c_56, sint16 c_57,
           sint16 c_58, sint16 c_59, sint16 c_5a, sint16 c_5b,
           sint16 c_5c, sint16 c_5d, sint16 c_5e, sint16 c_5f,
           sint16 c_60, sint16 c_61, sint16 c_62, sint16 c_63,
           sint16 c_64, sint16 c_65, sint16 c_66, sint16 c_67,
           sint16 c_68, sint16 c_69, sint16 c_6a, sint16 c_6b,
           sint16 c_6c, sint16 c_6d, sint16 c_6e, sint16 c_6f,
           sint16 c_70, sint16 c_71, sint16 c_72, sint16 c_73,
           sint16 c_74, sint16 c_75, sint16 c_76, sint16 c_77,
           sint16 c_78, sint16 c_79, sint16 c_7a, sint16 c_7b,
           sint16 c_7c, sint16 c_7d, sint16 c_7e, sint16 c_7f,
           sint16 c_80, sint16 c_81, sint16 c_82, sint16 c_83,
           sint16 c_84, sint16 c_85, sint16 c_86, sint16 c_87,
           sint16 c_88, sint16 c_89, sint16 c_8a, sint16 c_8b,
           sint16 c_8c, sint16 c_8d, sint16 c_8e, sint16 c_8f,
           sint16 c_90, sint16 c_91, sint16 c_92, sint16 c_93,
           sint16 c_94, sint16 c_95, sint16 c_96, sint16 c_97,
           sint16 c_98, sint16 c_99, sint16 c_9a, sint16 c_9b,
           sint16 c_9c, sint16 c_9d, sint16 c_9e, sint16 c_9f,
           sint16 c_a0, sint16 c_a1, sint16 c_a2, sint16 c_a3,
           sint16 c_a4, sint16 c_a5, sint16 c_a6, sint16 c_a7,
           sint16 c_a8, sint16 c_a9, sint16 c_aa, sint16 c_ab,
           sint16 c_ac, sint16 c_ad, sint16 c_ae, sint16 c_af,
           sint16 c_b0, sint16 c_b1, sint16 c_b2, sint16 c_b3,
           sint16 c_b4, sint16 c_b5, sint16 c_b6, sint16 c_b7,
           sint16 c_b8, sint16 c_b9, sint16 c_ba, sint16 c_bb,
           sint16 c_bc, sint16 c_bd, sint16 c_be, sint16 c_bf,
           sint16 c_c0, sint16 c_c1, sint16 c_c2, sint16 c_c3,
           sint16 c_c4, sint16 c_c5, sint16 c_c6, sint16 c_c7,
           sint16 c_c8, sint16 c_c9, sint16 c_ca, sint16 c_cb,
           sint16 c_cc, sint16 c_cd, sint16 c_ce, sint16 c_cf,
           sint16 c_d0, sint16 c_d1, sint16 c_d2, sint16 c_d3,
           sint16 c_d4, sint16 c_d5, sint16 c_d6, sint16 c_d7,
           sint16 c_d8, sint16 c_d9, sint16 c_da, sint16 c_db,
           sint16 c_dc, sint16 c_dd, sint16 c_de, sint16 c_df,
           sint16 c_e0, sint16 c_e1, sint16 c_e2, sint16 c_e3,
           sint16 c_e4, sint16 c_e5, sint16 c_e6, sint16 c_e7,
           sint16 c_e8, sint16 c_e9, sint16 c_ea, sint16 c_eb,
           sint16 c_ec, sint16 c_ed, sint16 c_ee, sint16 c_ef,
           sint16 c_f0, sint16 c_f1, sint16 c_f2, sint16 c_f3,
           sint16 c_f4, sint16 c_f5, sint16 c_f6, sint16 c_f7,
           sint16 c_f8, sint16 c_f9, sint16 c_fa, sint16 c_fb,
           sint16 c_fc, sint16 c_fd, sint16 c_fe, sint16 c_ff) =
{
  true
&&
  and [
    0@16 <=s c_00, c_00 <s 3329@16, 0@16 <=s c_01, c_01 <s 3329@16,
    0@16 <=s c_02, c_02 <s 3329@16, 0@16 <=s c_03, c_03 <s 3329@16,
    0@16 <=s c_04, c_04 <s 3329@16, 0@16 <=s c_05, c_05 <s 3329@16,
    0@16 <=s c_06, c_06 <s 3329@16, 0@16 <=s c_07, c_07 <s 3329@16,
    0@16 <=s c_08, c_08 <s 3329@16, 0@16 <=s c_09, c_09 <s 3329@16,
    0@16 <=s c_0a, c_0a <s 3329@16, 0@16 <=s c_0b, c_0b <s 3329@16,
    0@16 <=s c_0c, c_0c <s 3329@16, 0@16 <=s c_0d, c_0d <s 3329@16,
    0@16 <=s c_0e, c_0e <s 3329@16, 0@16 <=s c_0f, c_0f <s 3329@16,
    0@16 <=s c_10, c_10 <s 3329@16, 0@16 <=s c_11, c_11 <s 3329@16,
    0@16 <=s c_12, c_12 <s 3329@16, 0@16 <=s c_13, c_13 <s 3329@16,
    0@16 <=s c_14, c_14 <s 3329@16, 0@16 <=s c_15, c_15 <s 3329@16,
    0@16 <=s c_16, c_16 <s 3329@16, 0@16 <=s c_17, c_17 <s 3329@16,
    0@16 <=s c_18, c_18 <s 3329@16, 0@16 <=s c_19, c_19 <s 3329@16,
    0@16 <=s c_1a, c_1a <s 3329@16, 0@16 <=s c_1b, c_1b <s 3329@16,
    0@16 <=s c_1c, c_1c <s 3329@16, 0@16 <=s c_1d, c_1d <s 3329@16,
    0@16 <=s c_1e, c_1e <s 3329@16, 0@16 <=s c_1f, c_1f <s 3329@16,
    0@16 <=s c_20, c_20 <s 3329@16, 0@16 <=s c_21, c_21 <s 3329@16,
    0@16 <=s c_22, c_22 <s 3329@16, 0@16 <=s c_23, c_23 <s 3329@16,
    0@16 <=s c_24, c_24 <s 3329@16, 0@16 <=s c_25, c_25 <s 3329@16,
    0@16 <=s c_26, c_26 <s 3329@16, 0@16 <=s c_27, c_27 <s 3329@16,
    0@16 <=s c_28, c_28 <s 3329@16, 0@16 <=s c_29, c_29 <s 3329@16,
    0@16 <=s c_2a, c_2a <s 3329@16, 0@16 <=s c_2b, c_2b <s 3329@16,
    0@16 <=s c_2c, c_2c <s 3329@16, 0@16 <=s c_2d, c_2d <s 3329@16,
    0@16 <=s c_2e, c_2e <s 3329@16, 0@16 <=s c_2f, c_2f <s 3329@16,
    0@16 <=s c_30, c_30 <s 3329@16, 0@16 <=s c_31, c_31 <s 3329@16,
    0@16 <=s c_32, c_32 <s 3329@16, 0@16 <=s c_33, c_33 <s 3329@16,
    0@16 <=s c_34, c_34 <s 3329@16, 0@16 <=s c_35, c_35 <s 3329@16,
    0@16 <=s c_36, c_36 <s 3329@16, 0@16 <=s c_37, c_37 <s 3329@16,
    0@16 <=s c_38, c_38 <s 3329@16, 0@16 <=s c_39, c_39 <s 3329@16,
    0@16 <=s c_3a, c_3a <s 3329@16, 0@16 <=s c_3b, c_3b <s 3329@16,
    0@16 <=s c_3c, c_3c <s 3329@16, 0@16 <=s c_3d, c_3d <s 3329@16,
    0@16 <=s c_3e, c_3e <s 3329@16, 0@16 <=s c_3f, c_3f <s 3329@16,
    0@16 <=s c_40, c_40 <s 3329@16, 0@16 <=s c_41, c_41 <s 3329@16,
    0@16 <=s c_42, c_42 <s 3329@16, 0@16 <=s c_43, c_43 <s 3329@16,
    0@16 <=s c_44, c_44 <s 3329@16, 0@16 <=s c_45, c_45 <s 3329@16,
    0@16 <=s c_46, c_46 <s 3329@16, 0@16 <=s c_47, c_47 <s 3329@16,
    0@16 <=s c_48, c_48 <s 3329@16, 0@16 <=s c_49, c_49 <s 3329@16,
    0@16 <=s c_4a, c_4a <s 3329@16, 0@16 <=s c_4b, c_4b <s 3329@16,
    0@16 <=s c_4c, c_4c <s 3329@16, 0@16 <=s c_4d, c_4d <s 3329@16,
    0@16 <=s c_4e, c_4e <s 3329@16, 0@16 <=s c_4f, c_4f <s 3329@16,
    0@16 <=s c_50, c_50 <s 3329@16, 0@16 <=s c_51, c_51 <s 3329@16,
    0@16 <=s c_52, c_52 <s 3329@16, 0@16 <=s c_53, c_53 <s 3329@16,
    0@16 <=s c_54, c_54 <s 3329@16, 0@16 <=s c_55, c_55 <s 3329@16,
    0@16 <=s c_56, c_56 <s 3329@16, 0@16 <=s c_57, c_57 <s 3329@16,
    0@16 <=s c_58, c_58 <s 3329@16, 0@16 <=s c_59, c_59 <s 3329@16,
    0@16 <=s c_5a, c_5a <s 3329@16, 0@16 <=s c_5b, c_5b <s 3329@16,
    0@16 <=s c_5c, c_5c <s 3329@16, 0@16 <=s c_5d, c_5d <s 3329@16,
    0@16 <=s c_5e, c_5e <s 3329@16, 0@16 <=s c_5f, c_5f <s 3329@16,
    0@16 <=s c_60, c_60 <s 3329@16, 0@16 <=s c_61, c_61 <s 3329@16,
    0@16 <=s c_62, c_62 <s 3329@16, 0@16 <=s c_63, c_63 <s 3329@16,
    0@16 <=s c_64, c_64 <s 3329@16, 0@16 <=s c_65, c_65 <s 3329@16,
    0@16 <=s c_66, c_66 <s 3329@16, 0@16 <=s c_67, c_67 <s 3329@16,
    0@16 <=s c_68, c_68 <s 3329@16, 0@16 <=s c_69, c_69 <s 3329@16,
    0@16 <=s c_6a, c_6a <s 3329@16, 0@16 <=s c_6b, c_6b <s 3329@16,
    0@16 <=s c_6c, c_6c <s 3329@16, 0@16 <=s c_6d, c_6d <s 3329@16,
    0@16 <=s c_6e, c_6e <s 3329@16, 0@16 <=s c_6f, c_6f <s 3329@16,
    0@16 <=s c_70, c_70 <s 3329@16, 0@16 <=s c_71, c_71 <s 3329@16,
    0@16 <=s c_72, c_72 <s 3329@16, 0@16 <=s c_73, c_73 <s 3329@16,
    0@16 <=s c_74, c_74 <s 3329@16, 0@16 <=s c_75, c_75 <s 3329@16,
    0@16 <=s c_76, c_76 <s 3329@16, 0@16 <=s c_77, c_77 <s 3329@16,
    0@16 <=s c_78, c_78 <s 3329@16, 0@16 <=s c_79, c_79 <s 3329@16,
    0@16 <=s c_7a, c_7a <s 3329@16, 0@16 <=s c_7b, c_7b <s 3329@16,
    0@16 <=s c_7c, c_7c <s 3329@16, 0@16 <=s c_7d, c_7d <s 3329@16,
    0@16 <=s c_7e, c_7e <s 3329@16, 0@16 <=s c_7f, c_7f <s 3329@16,
    0@16 <=s c_80, c_80 <s 3329@16, 0@16 <=s c_81, c_81 <s 3329@16,
    0@16 <=s c_82, c_82 <s 3329@16, 0@16 <=s c_83, c_83 <s 3329@16,
    0@16 <=s c_84, c_84 <s 3329@16, 0@16 <=s c_85, c_85 <s 3329@16,
    0@16 <=s c_86, c_86 <s 3329@16, 0@16 <=s c_87, c_87 <s 3329@16,
    0@16 <=s c_88, c_88 <s 3329@16, 0@16 <=s c_89, c_89 <s 3329@16,
    0@16 <=s c_8a, c_8a <s 3329@16, 0@16 <=s c_8b, c_8b <s 3329@16,
    0@16 <=s c_8c, c_8c <s 3329@16, 0@16 <=s c_8d, c_8d <s 3329@16,
    0@16 <=s c_8e, c_8e <s 3329@16, 0@16 <=s c_8f, c_8f <s 3329@16,
    0@16 <=s c_90, c_90 <s 3329@16, 0@16 <=s c_91, c_91 <s 3329@16,
    0@16 <=s c_92, c_92 <s 3329@16, 0@16 <=s c_93, c_93 <s 3329@16,
    0@16 <=s c_94, c_94 <s 3329@16, 0@16 <=s c_95, c_95 <s 3329@16,
    0@16 <=s c_96, c_96 <s 3329@16, 0@16 <=s c_97, c_97 <s 3329@16,
    0@16 <=s c_98, c_98 <s 3329@16, 0@16 <=s c_99, c_99 <s 3329@16,
    0@16 <=s c_9a, c_9a <s 3329@16, 0@16 <=s c_9b, c_9b <s 3329@16,
    0@16 <=s c_9c, c_9c <s 3329@16, 0@16 <=s c_9d, c_9d <s 3329@16,
    0@16 <=s c_9e, c_9e <s 3329@16, 0@16 <=s c_9f, c_9f <s 3329@16,
    0@16 <=s c_a0, c_a0 <s 3329@16, 0@16 <=s c_a1, c_a1 <s 3329@16,
    0@16 <=s c_a2, c_a2 <s 3329@16, 0@16 <=s c_a3, c_a3 <s 3329@16,
    0@16 <=s c_a4, c_a4 <s 3329@16, 0@16 <=s c_a5, c_a5 <s 3329@16,
    0@16 <=s c_a6, c_a6 <s 3329@16, 0@16 <=s c_a7, c_a7 <s 3329@16,
    0@16 <=s c_a8, c_a8 <s 3329@16, 0@16 <=s c_a9, c_a9 <s 3329@16,
    0@16 <=s c_aa, c_aa <s 3329@16, 0@16 <=s c_ab, c_ab <s 3329@16,
    0@16 <=s c_ac, c_ac <s 3329@16, 0@16 <=s c_ad, c_ad <s 3329@16,
    0@16 <=s c_ae, c_ae <s 3329@16, 0@16 <=s c_af, c_af <s 3329@16,
    0@16 <=s c_b0, c_b0 <s 3329@16, 0@16 <=s c_b1, c_b1 <s 3329@16,
    0@16 <=s c_b2, c_b2 <s 3329@16, 0@16 <=s c_b3, c_b3 <s 3329@16,
    0@16 <=s c_b4, c_b4 <s 3329@16, 0@16 <=s c_b5, c_b5 <s 3329@16,
    0@16 <=s c_b6, c_b6 <s 3329@16, 0@16 <=s c_b7, c_b7 <s 3329@16,
    0@16 <=s c_b8, c_b8 <s 3329@16, 0@16 <=s c_b9, c_b9 <s 3329@16,
    0@16 <=s c_ba, c_ba <s 3329@16, 0@16 <=s c_bb, c_bb <s 3329@16,
    0@16 <=s c_bc, c_bc <s 3329@16, 0@16 <=s c_bd, c_bd <s 3329@16,
    0@16 <=s c_be, c_be <s 3329@16, 0@16 <=s c_bf, c_bf <s 3329@16,
    0@16 <=s c_c0, c_c0 <s 3329@16, 0@16 <=s c_c1, c_c1 <s 3329@16,
    0@16 <=s c_c2, c_c2 <s 3329@16, 0@16 <=s c_c3, c_c3 <s 3329@16,
    0@16 <=s c_c4, c_c4 <s 3329@16, 0@16 <=s c_c5, c_c5 <s 3329@16,
    0@16 <=s c_c6, c_c6 <s 3329@16, 0@16 <=s c_c7, c_c7 <s 3329@16,
    0@16 <=s c_c8, c_c8 <s 3329@16, 0@16 <=s c_c9, c_c9 <s 3329@16,
    0@16 <=s c_ca, c_ca <s 3329@16, 0@16 <=s c_cb, c_cb <s 3329@16,
    0@16 <=s c_cc, c_cc <s 3329@16, 0@16 <=s c_cd, c_cd <s 3329@16,
    0@16 <=s c_ce, c_ce <s 3329@16, 0@16 <=s c_cf, c_cf <s 3329@16,
    0@16 <=s c_d0, c_d0 <s 3329@16, 0@16 <=s c_d1, c_d1 <s 3329@16,
    0@16 <=s c_d2, c_d2 <s 3329@16, 0@16 <=s c_d3, c_d3 <s 3329@16,
    0@16 <=s c_d4, c_d4 <s 3329@16, 0@16 <=s c_d5, c_d5 <s 3329@16,
    0@16 <=s c_d6, c_d6 <s 3329@16, 0@16 <=s c_d7, c_d7 <s 3329@16,
    0@16 <=s c_d8, c_d8 <s 3329@16, 0@16 <=s c_d9, c_d9 <s 3329@16,
    0@16 <=s c_da, c_da <s 3329@16, 0@16 <=s c_db, c_db <s 3329@16,
    0@16 <=s c_dc, c_dc <s 3329@16, 0@16 <=s c_dd, c_dd <s 3329@16,
    0@16 <=s c_de, c_de <s 3329@16, 0@16 <=s c_df, c_df <s 3329@16,
    0@16 <=s c_e0, c_e0 <s 3329@16, 0@16 <=s c_e1, c_e1 <s 3329@16,
    0@16 <=s c_e2, c_e2 <s 3329@16, 0@16 <=s c_e3, c_e3 <s 3329@16,
    0@16 <=s c_e4, c_e4 <s 3329@16, 0@16 <=s c_e5, c_e5 <s 3329@16,
    0@16 <=s c_e6, c_e6 <s 3329@16, 0@16 <=s c_e7, c_e7 <s 3329@16,
    0@16 <=s c_e8, c_e8 <s 3329@16, 0@16 <=s c_e9, c_e9 <s 3329@16,
    0@16 <=s c_ea, c_ea <s 3329@16, 0@16 <=s c_eb, c_eb <s 3329@16,
    0@16 <=s c_ec, c_ec <s 3329@16, 0@16 <=s c_ed, c_ed <s 3329@16,
    0@16 <=s c_ee, c_ee <s 3329@16, 0@16 <=s c_ef, c_ef <s 3329@16,
    0@16 <=s c_f0, c_f0 <s 3329@16, 0@16 <=s c_f1, c_f1 <s 3329@16,
    0@16 <=s c_f2, c_f2 <s 3329@16, 0@16 <=s c_f3, c_f3 <s 3329@16,
    0@16 <=s c_f4, c_f4 <s 3329@16, 0@16 <=s c_f5, c_f5 <s 3329@16,
    0@16 <=s c_f6, c_f6 <s 3329@16, 0@16 <=s c_f7, c_f7 <s 3329@16,
    0@16 <=s c_f8, c_f8 <s 3329@16, 0@16 <=s c_f9, c_f9 <s 3329@16,
    0@16 <=s c_fa, c_fa <s 3329@16, 0@16 <=s c_fb, c_fb <s 3329@16,
    0@16 <=s c_fc, c_fc <s 3329@16, 0@16 <=s c_fd, c_fd <s 3329@16,
    0@16 <=s c_fe, c_fe <s 3329@16, 0@16 <=s c_ff, c_ff <s 3329@16
  ]
}
(* initialization *)
mov L0xf6ffd490 c_00; mov L0xf6ffd492 c_01;
mov L0xf6ffd494 c_02; mov L0xf6ffd496 c_03;
mov L0xf6ffd498 c_04; mov L0xf6ffd49a c_05;
mov L0xf6ffd49c c_06; mov L0xf6ffd49e c_07;
mov L0xf6ffd4a0 c_08; mov L0xf6ffd4a2 c_09;
mov L0xf6ffd4a4 c_0a; mov L0xf6ffd4a6 c_0b;
mov L0xf6ffd4a8 c_0c; mov L0xf6ffd4aa c_0d;
mov L0xf6ffd4ac c_0e; mov L0xf6ffd4ae c_0f;
mov L0xf6ffd4b0 c_10; mov L0xf6ffd4b2 c_11;
mov L0xf6ffd4b4 c_12; mov L0xf6ffd4b6 c_13;
mov L0xf6ffd4b8 c_14; mov L0xf6ffd4ba c_15;
mov L0xf6ffd4bc c_16; mov L0xf6ffd4be c_17;
mov L0xf6ffd4c0 c_18; mov L0xf6ffd4c2 c_19;
mov L0xf6ffd4c4 c_1a; mov L0xf6ffd4c6 c_1b;
mov L0xf6ffd4c8 c_1c; mov L0xf6ffd4ca c_1d;
mov L0xf6ffd4cc c_1e; mov L0xf6ffd4ce c_1f;
mov L0xf6ffd4d0 c_20; mov L0xf6ffd4d2 c_21;
mov L0xf6ffd4d4 c_22; mov L0xf6ffd4d6 c_23;
mov L0xf6ffd4d8 c_24; mov L0xf6ffd4da c_25;
mov L0xf6ffd4dc c_26; mov L0xf6ffd4de c_27;
mov L0xf6ffd4e0 c_28; mov L0xf6ffd4e2 c_29;
mov L0xf6ffd4e4 c_2a; mov L0xf6ffd4e6 c_2b;
mov L0xf6ffd4e8 c_2c; mov L0xf6ffd4ea c_2d;
mov L0xf6ffd4ec c_2e; mov L0xf6ffd4ee c_2f;
mov L0xf6ffd4f0 c_30; mov L0xf6ffd4f2 c_31;
mov L0xf6ffd4f4 c_32; mov L0xf6ffd4f6 c_33;
mov L0xf6ffd4f8 c_34; mov L0xf6ffd4fa c_35;
mov L0xf6ffd4fc c_36; mov L0xf6ffd4fe c_37;
mov L0xf6ffd500 c_38; mov L0xf6ffd502 c_39;
mov L0xf6ffd504 c_3a; mov L0xf6ffd506 c_3b;
mov L0xf6ffd508 c_3c; mov L0xf6ffd50a c_3d;
mov L0xf6ffd50c c_3e; mov L0xf6ffd50e c_3f;
mov L0xf6ffd510 c_40; mov L0xf6ffd512 c_41;
mov L0xf6ffd514 c_42; mov L0xf6ffd516 c_43;
mov L0xf6ffd518 c_44; mov L0xf6ffd51a c_45;
mov L0xf6ffd51c c_46; mov L0xf6ffd51e c_47;
mov L0xf6ffd520 c_48; mov L0xf6ffd522 c_49;
mov L0xf6ffd524 c_4a; mov L0xf6ffd526 c_4b;
mov L0xf6ffd528 c_4c; mov L0xf6ffd52a c_4d;
mov L0xf6ffd52c c_4e; mov L0xf6ffd52e c_4f;
mov L0xf6ffd530 c_50; mov L0xf6ffd532 c_51;
mov L0xf6ffd534 c_52; mov L0xf6ffd536 c_53;
mov L0xf6ffd538 c_54; mov L0xf6ffd53a c_55;
mov L0xf6ffd53c c_56; mov L0xf6ffd53e c_57;
mov L0xf6ffd540 c_58; mov L0xf6ffd542 c_59;
mov L0xf6ffd544 c_5a; mov L0xf6ffd546 c_5b;
mov L0xf6ffd548 c_5c; mov L0xf6ffd54a c_5d;
mov L0xf6ffd54c c_5e; mov L0xf6ffd54e c_5f;
mov L0xf6ffd550 c_60; mov L0xf6ffd552 c_61;
mov L0xf6ffd554 c_62; mov L0xf6ffd556 c_63;
mov L0xf6ffd558 c_64; mov L0xf6ffd55a c_65;
mov L0xf6ffd55c c_66; mov L0xf6ffd55e c_67;
mov L0xf6ffd560 c_68; mov L0xf6ffd562 c_69;
mov L0xf6ffd564 c_6a; mov L0xf6ffd566 c_6b;
mov L0xf6ffd568 c_6c; mov L0xf6ffd56a c_6d;
mov L0xf6ffd56c c_6e; mov L0xf6ffd56e c_6f;
mov L0xf6ffd570 c_70; mov L0xf6ffd572 c_71;
mov L0xf6ffd574 c_72; mov L0xf6ffd576 c_73;
mov L0xf6ffd578 c_74; mov L0xf6ffd57a c_75;
mov L0xf6ffd57c c_76; mov L0xf6ffd57e c_77;
mov L0xf6ffd580 c_78; mov L0xf6ffd582 c_79;
mov L0xf6ffd584 c_7a; mov L0xf6ffd586 c_7b;
mov L0xf6ffd588 c_7c; mov L0xf6ffd58a c_7d;
mov L0xf6ffd58c c_7e; mov L0xf6ffd58e c_7f;
mov L0xf6ffd590 c_80; mov L0xf6ffd592 c_81;
mov L0xf6ffd594 c_82; mov L0xf6ffd596 c_83;
mov L0xf6ffd598 c_84; mov L0xf6ffd59a c_85;
mov L0xf6ffd59c c_86; mov L0xf6ffd59e c_87;
mov L0xf6ffd5a0 c_88; mov L0xf6ffd5a2 c_89;
mov L0xf6ffd5a4 c_8a; mov L0xf6ffd5a6 c_8b;
mov L0xf6ffd5a8 c_8c; mov L0xf6ffd5aa c_8d;
mov L0xf6ffd5ac c_8e; mov L0xf6ffd5ae c_8f;
mov L0xf6ffd5b0 c_90; mov L0xf6ffd5b2 c_91;
mov L0xf6ffd5b4 c_92; mov L0xf6ffd5b6 c_93;
mov L0xf6ffd5b8 c_94; mov L0xf6ffd5ba c_95;
mov L0xf6ffd5bc c_96; mov L0xf6ffd5be c_97;
mov L0xf6ffd5c0 c_98; mov L0xf6ffd5c2 c_99;
mov L0xf6ffd5c4 c_9a; mov L0xf6ffd5c6 c_9b;
mov L0xf6ffd5c8 c_9c; mov L0xf6ffd5ca c_9d;
mov L0xf6ffd5cc c_9e; mov L0xf6ffd5ce c_9f;
mov L0xf6ffd5d0 c_a0; mov L0xf6ffd5d2 c_a1;
mov L0xf6ffd5d4 c_a2; mov L0xf6ffd5d6 c_a3;
mov L0xf6ffd5d8 c_a4; mov L0xf6ffd5da c_a5;
mov L0xf6ffd5dc c_a6; mov L0xf6ffd5de c_a7;
mov L0xf6ffd5e0 c_a8; mov L0xf6ffd5e2 c_a9;
mov L0xf6ffd5e4 c_aa; mov L0xf6ffd5e6 c_ab;
mov L0xf6ffd5e8 c_ac; mov L0xf6ffd5ea c_ad;
mov L0xf6ffd5ec c_ae; mov L0xf6ffd5ee c_af;
mov L0xf6ffd5f0 c_b0; mov L0xf6ffd5f2 c_b1;
mov L0xf6ffd5f4 c_b2; mov L0xf6ffd5f6 c_b3;
mov L0xf6ffd5f8 c_b4; mov L0xf6ffd5fa c_b5;
mov L0xf6ffd5fc c_b6; mov L0xf6ffd5fe c_b7;
mov L0xf6ffd600 c_b8; mov L0xf6ffd602 c_b9;
mov L0xf6ffd604 c_ba; mov L0xf6ffd606 c_bb;
mov L0xf6ffd608 c_bc; mov L0xf6ffd60a c_bd;
mov L0xf6ffd60c c_be; mov L0xf6ffd60e c_bf;
mov L0xf6ffd610 c_c0; mov L0xf6ffd612 c_c1;
mov L0xf6ffd614 c_c2; mov L0xf6ffd616 c_c3;
mov L0xf6ffd618 c_c4; mov L0xf6ffd61a c_c5;
mov L0xf6ffd61c c_c6; mov L0xf6ffd61e c_c7;
mov L0xf6ffd620 c_c8; mov L0xf6ffd622 c_c9;
mov L0xf6ffd624 c_ca; mov L0xf6ffd626 c_cb;
mov L0xf6ffd628 c_cc; mov L0xf6ffd62a c_cd;
mov L0xf6ffd62c c_ce; mov L0xf6ffd62e c_cf;
mov L0xf6ffd630 c_d0; mov L0xf6ffd632 c_d1;
mov L0xf6ffd634 c_d2; mov L0xf6ffd636 c_d3;
mov L0xf6ffd638 c_d4; mov L0xf6ffd63a c_d5;
mov L0xf6ffd63c c_d6; mov L0xf6ffd63e c_d7;
mov L0xf6ffd640 c_d8; mov L0xf6ffd642 c_d9;
mov L0xf6ffd644 c_da; mov L0xf6ffd646 c_db;
mov L0xf6ffd648 c_dc; mov L0xf6ffd64a c_dd;
mov L0xf6ffd64c c_de; mov L0xf6ffd64e c_df;
mov L0xf6ffd650 c_e0; mov L0xf6ffd652 c_e1;
mov L0xf6ffd654 c_e2; mov L0xf6ffd656 c_e3;
mov L0xf6ffd658 c_e4; mov L0xf6ffd65a c_e5;
mov L0xf6ffd65c c_e6; mov L0xf6ffd65e c_e7;
mov L0xf6ffd660 c_e8; mov L0xf6ffd662 c_e9;
mov L0xf6ffd664 c_ea; mov L0xf6ffd666 c_eb;
mov L0xf6ffd668 c_ec; mov L0xf6ffd66a c_ed;
mov L0xf6ffd66c c_ee; mov L0xf6ffd66e c_ef;
mov L0xf6ffd670 c_f0; mov L0xf6ffd672 c_f1;
mov L0xf6ffd674 c_f2; mov L0xf6ffd676 c_f3;
mov L0xf6ffd678 c_f4; mov L0xf6ffd67a c_f5;
mov L0xf6ffd67c c_f6; mov L0xf6ffd67e c_f7;
mov L0xf6ffd680 c_f8; mov L0xf6ffd682 c_f9;
mov L0xf6ffd684 c_fa; mov L0xf6ffd686 c_fb;
mov L0xf6ffd688 c_fc; mov L0xf6ffd68a c_fd;
mov L0xf6ffd68c c_fe; mov L0xf6ffd68e c_ff;
(* twiddle poly *)
mov L0x5b2c0 0x0a0b@uint16; mov L0x5b2c2 0x0b9a@uint16;
mov L0x5b2c4 0x0714@uint16; mov L0x5b2c6 0x05d5@uint16;
mov L0x5b2c8 0x0c56@uint16; mov L0x5b2ca 0x026e@uint16;
mov L0x5b2cc 0x058e@uint16; mov L0x5b2ce 0x0629@uint16;
mov L0x5b2d0 0x00b6@uint16; mov L0x5b2d2 0x011f@uint16;
mov L0x5b2d4 0x03c2@uint16; mov L0x5b2d6 0x084f@uint16;
mov L0x5b2d8 0x00ca@uint16; mov L0x5b2da 0x073f@uint16;
mov L0x5b2dc 0x05bc@uint16; mov L0x5b2de 0x023d@uint16;
mov L0x5b2e0 0x04c7@uint16; mov L0x5b2e2 0x028c@uint16;
mov L0x5b2e4 0x07d4@uint16; mov L0x5b2e6 0x0ad9@uint16;
mov L0x5b2e8 0x03f7@uint16; mov L0x5b2ea 0x0108@uint16;
mov L0x5b2ec 0x07f4@uint16; mov L0x5b2ee 0x05d3@uint16;
mov L0x5b2f0 0x017f@uint16; mov L0x5b2f2 0x0be7@uint16;
mov L0x5b2f4 0x06f9@uint16; mov L0x5b2f6 0x09c4@uint16;
mov L0x5b2f8 0x0204@uint16; mov L0x5b2fa 0x0cf9@uint16;
mov L0x5b2fc 0x05b2@uint16; mov L0x5b2fe 0x0bc1@uint16;
mov L0x5b300 0x0a67@uint16; mov L0x5b302 0x06bf@uint16;
mov L0x5b304 0x06af@uint16; mov L0x5b306 0x0877@uint16;
mov L0x5b308 0x0c7f@uint16; mov L0x5b30a 0x007e@uint16;
mov L0x5b30c 0x05bd@uint16; mov L0x5b30e 0x0a58@uint16;
mov L0x5b310 0x09ac@uint16; mov L0x5b312 0x0ca7@uint16;
mov L0x5b314 0x03f9@uint16; mov L0x5b316 0x0bf2@uint16;
mov L0x5b318 0x033e@uint16; mov L0x5b31a 0x02dc@uint16;
mov L0x5b31c 0x006b@uint16; mov L0x5b31e 0x0774@uint16;
mov L0x5b320 0x0260@uint16; mov L0x5b322 0x0c0a@uint16;
mov L0x5b324 0x094a@uint16; mov L0x5b326 0x06fb@uint16;
mov L0x5b328 0x0b73@uint16; mov L0x5b32a 0x03c1@uint16;
mov L0x5b32c 0x019b@uint16; mov L0x5b32e 0x071d@uint16;
mov L0x5b330 0x0a2c@uint16; mov L0x5b332 0x0c34@uint16;
mov L0x5b334 0x01c0@uint16; mov L0x5b336 0x08d8@uint16;
mov L0x5b338 0x06de@uint16; mov L0x5b33a 0x02a5@uint16;
mov L0x5b33c 0x0806@uint16; mov L0x5b33e 0x08b2@uint16;
mov L0x5b340 0x01ae@uint16; mov L0x5b342 0x022b@uint16;
mov L0x5b344 0x034b@uint16; mov L0x5b346 0x081e@uint16;
mov L0x5b348 0x0367@uint16; mov L0x5b34a 0x060e@uint16;
mov L0x5b34c 0x0069@uint16; mov L0x5b34e 0x01a6@uint16;
mov L0x5b350 0x024b@uint16; mov L0x5b352 0x00b1@uint16;
mov L0x5b354 0x0c16@uint16; mov L0x5b356 0x0bde@uint16;
mov L0x5b358 0x0b35@uint16; mov L0x5b35a 0x0626@uint16;
mov L0x5b35c 0x0675@uint16; mov L0x5b35e 0x0c0b@uint16;
mov L0x5b360 0x030a@uint16; mov L0x5b362 0x0487@uint16;
mov L0x5b364 0x0c6e@uint16; mov L0x5b366 0x09f8@uint16;
mov L0x5b368 0x05cb@uint16; mov L0x5b36a 0x0aa7@uint16;
mov L0x5b36c 0x045f@uint16; mov L0x5b36e 0x06cb@uint16;
mov L0x5b370 0x0284@uint16; mov L0x5b372 0x0999@uint16;
mov L0x5b374 0x015d@uint16; mov L0x5b376 0x01a2@uint16;
mov L0x5b378 0x0149@uint16; mov L0x5b37a 0x0c65@uint16;
mov L0x5b37c 0x0cb6@uint16; mov L0x5b37e 0x0331@uint16;
mov L0x5b380 0x0449@uint16; mov L0x5b382 0x025b@uint16;
mov L0x5b384 0x0262@uint16; mov L0x5b386 0x052a@uint16;
mov L0x5b388 0x07fc@uint16; mov L0x5b38a 0x0748@uint16;
mov L0x5b38c 0x0180@uint16; mov L0x5b38e 0x0842@uint16;
mov L0x5b390 0x0c79@uint16; mov L0x5b392 0x04c2@uint16;
mov L0x5b394 0x07ca@uint16; mov L0x5b396 0x0997@uint16;
mov L0x5b398 0x00dc@uint16; mov L0x5b39a 0x085e@uint16;
mov L0x5b39c 0x0686@uint16; mov L0x5b39e 0x0860@uint16;
mov L0x5b3a0 0x0707@uint16; mov L0x5b3a2 0x0803@uint16;
mov L0x5b3a4 0x031a@uint16; mov L0x5b3a6 0x071b@uint16;
mov L0x5b3a8 0x09ab@uint16; mov L0x5b3aa 0x099b@uint16;
mov L0x5b3ac 0x01de@uint16; mov L0x5b3ae 0x0c95@uint16;
mov L0x5b3b0 0x0bcd@uint16; mov L0x5b3b2 0x03e4@uint16;
mov L0x5b3b4 0x03df@uint16; mov L0x5b3b6 0x03be@uint16;
mov L0x5b3b8 0x074d@uint16; mov L0x5b3ba 0x05f2@uint16;
mov L0x5b3bc 0x065c@uint16;

(* #stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}#! EA = L0xf6ffd008; PC = 0x68144 *)
#stmdb	sp!, {%%r4, %%r5, %%r6, %%r7, %%r8, %%r9, %%r10, %%r11, %%lr}#! L0xf6ffd008 = L0xf6ffd008; 0x68144 = 0x68144;
(* movw	lr, #3329	; 0xd01                          #! PC = 0x68148 *)
mov lr_t 0@sint16;
mov lr_b 3329@uint16;
(* movw	r12, #62209	; 0xf301                       #! PC = 0x68152 *)
mov r12_t 0@sint16;
mov r12_b (-3327)@sint16;
(* movt	r12, #20159	; 0x4ebf                       #! PC = 0x68156 *)
mov r12_t 20159@sint16;
(* ### LAYER 7+6 *)
### LAYER 7+6;
(* mov.w	r2, #32                                   #! PC = 0x68160 *)
mov r2_t 0@sint16;
mov r2_b 32@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2c0; Value = 0x0b9a0a0b; PC = 0x68164 *)
mov r11_b L0x5b2c0;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2c2; Value = 0x07140b9a; PC = 0x68168 *)
mov r7_b L0x5b2c2;
mov r7_t L0x5b2c4;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd490; Value = 0x0000fffe; PC = 0x68172 *)
mov r3_b L0xf6ffd490;
mov r3_t L0xf6ffd492;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd510; Value = 0x0001ffff; PC = 0x68176 *)
mov r4_b L0xf6ffd510;  # 0x80
mov r4_t L0xf6ffd512;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd590; Value = 0xffff0001; PC = 0x68180 *)
mov r5_b L0xf6ffd590;  # 0x100
mov r5_t L0xf6ffd592;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd610; Value = 0x00020000; PC = 0x68184 *)
mov r6_b L0xf6ffd610;  # 0x180
mov r6_t L0xf6ffd612;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd510; PC = 0x68364 *)
mov L0xf6ffd510 r4_b;  # 0x80
mov L0xf6ffd512 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd590; PC = 0x68368 *)
mov L0xf6ffd590 r5_b;  # 0x100
mov L0xf6ffd592 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd610; PC = 0x68372 *)
mov L0xf6ffd610 r6_b;  # 0x180
mov L0xf6ffd612 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd490; PC = 0x68376 *)
mov L0xf6ffd490 r3_b;
mov L0xf6ffd492 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd494; Value = 0x00010001; PC = 0x68172 *)
mov r3_b L0xf6ffd494;
mov r3_t L0xf6ffd496;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd514; Value = 0xffff0000; PC = 0x68176 *)
mov r4_b L0xf6ffd514;  # 0x80
mov r4_t L0xf6ffd516;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd594; Value = 0x00020001; PC = 0x68180 *)
mov r5_b L0xf6ffd594;  # 0x100
mov r5_t L0xf6ffd596;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd614; Value = 0x0001ffff; PC = 0x68184 *)
mov r6_b L0xf6ffd614;  # 0x180
mov r6_t L0xf6ffd616;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd514; PC = 0x68364 *)
mov L0xf6ffd514 r4_b;  # 0x80
mov L0xf6ffd516 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd594; PC = 0x68368 *)
mov L0xf6ffd594 r5_b;  # 0x100
mov L0xf6ffd596 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd614; PC = 0x68372 *)
mov L0xf6ffd614 r6_b;  # 0x180
mov L0xf6ffd616 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd494; PC = 0x68376 *)
mov L0xf6ffd494 r3_b;
mov L0xf6ffd496 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd498; Value = 0x00020001; PC = 0x68172 *)
mov r3_b L0xf6ffd498;
mov r3_t L0xf6ffd49a;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd518; Value = 0x00010001; PC = 0x68176 *)
mov r4_b L0xf6ffd518;  # 0x80
mov r4_t L0xf6ffd51a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd598; Value = 0xfffe0000; PC = 0x68180 *)
mov r5_b L0xf6ffd598;  # 0x100
mov r5_t L0xf6ffd59a;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd618; Value = 0x00010001; PC = 0x68184 *)
mov r6_b L0xf6ffd618;  # 0x180
mov r6_t L0xf6ffd61a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd518; PC = 0x68364 *)
mov L0xf6ffd518 r4_b;  # 0x80
mov L0xf6ffd51a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd598; PC = 0x68368 *)
mov L0xf6ffd598 r5_b;  # 0x100
mov L0xf6ffd59a r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd618; PC = 0x68372 *)
mov L0xf6ffd618 r6_b;  # 0x180
mov L0xf6ffd61a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd498; PC = 0x68376 *)
mov L0xf6ffd498 r3_b;
mov L0xf6ffd49a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd49c; Value = 0x00020000; PC = 0x68172 *)
mov r3_b L0xf6ffd49c;
mov r3_t L0xf6ffd49e;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd51c; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd51c;  # 0x80
mov r4_t L0xf6ffd51e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd59c; Value = 0x0000ffff; PC = 0x68180 *)
mov r5_b L0xf6ffd59c;  # 0x100
mov r5_t L0xf6ffd59e;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd61c; Value = 0x00000001; PC = 0x68184 *)
mov r6_b L0xf6ffd61c;  # 0x180
mov r6_t L0xf6ffd61e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd51c; PC = 0x68364 *)
mov L0xf6ffd51c r4_b;  # 0x80
mov L0xf6ffd51e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd59c; PC = 0x68368 *)
mov L0xf6ffd59c r5_b;  # 0x100
mov L0xf6ffd59e r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd61c; PC = 0x68372 *)
mov L0xf6ffd61c r6_b;  # 0x180
mov L0xf6ffd61e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd49c; PC = 0x68376 *)
mov L0xf6ffd49c r3_b;
mov L0xf6ffd49e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a0; Value = 0x00010001; PC = 0x68172 *)
mov r3_b L0xf6ffd4a0;
mov r3_t L0xf6ffd4a2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd520; Value = 0xffff0000; PC = 0x68176 *)
mov r4_b L0xf6ffd520;  # 0x80
mov r4_t L0xf6ffd522;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a0; Value = 0xfffffffe; PC = 0x68180 *)
mov r5_b L0xf6ffd5a0;  # 0x100
mov r5_t L0xf6ffd5a2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd620; Value = 0x00020000; PC = 0x68184 *)
mov r6_b L0xf6ffd620;  # 0x180
mov r6_t L0xf6ffd622;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd520; PC = 0x68364 *)
mov L0xf6ffd520 r4_b;  # 0x80
mov L0xf6ffd522 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a0; PC = 0x68368 *)
mov L0xf6ffd5a0 r5_b;  # 0x100
mov L0xf6ffd5a2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd620; PC = 0x68372 *)
mov L0xf6ffd620 r6_b;  # 0x180
mov L0xf6ffd622 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a0; PC = 0x68376 *)
mov L0xf6ffd4a0 r3_b;
mov L0xf6ffd4a2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a4; Value = 0x00010000; PC = 0x68172 *)
mov r3_b L0xf6ffd4a4;
mov r3_t L0xf6ffd4a6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd524; Value = 0x00020000; PC = 0x68176 *)
mov r4_b L0xf6ffd524;  # 0x80
mov r4_t L0xf6ffd526;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a4; Value = 0xfffe0001; PC = 0x68180 *)
mov r5_b L0xf6ffd5a4;  # 0x100
mov r5_t L0xf6ffd5a6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd624; Value = 0xffff0000; PC = 0x68184 *)
mov r6_b L0xf6ffd624;  # 0x180
mov r6_t L0xf6ffd626;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd524; PC = 0x68364 *)
mov L0xf6ffd524 r4_b;  # 0x80
mov L0xf6ffd526 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a4; PC = 0x68368 *)
mov L0xf6ffd5a4 r5_b;  # 0x100
mov L0xf6ffd5a6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd624; PC = 0x68372 *)
mov L0xf6ffd624 r6_b;  # 0x180
mov L0xf6ffd626 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a4; PC = 0x68376 *)
mov L0xf6ffd4a4 r3_b;
mov L0xf6ffd4a6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a8; Value = 0xffff0000; PC = 0x68172 *)
mov r3_b L0xf6ffd4a8;
mov r3_t L0xf6ffd4aa;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd528; Value = 0x00010002; PC = 0x68176 *)
mov r4_b L0xf6ffd528;  # 0x80
mov r4_t L0xf6ffd52a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a8; Value = 0x00000001; PC = 0x68180 *)
mov r5_b L0xf6ffd5a8;  # 0x100
mov r5_t L0xf6ffd5aa;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd628; Value = 0x0000fffe; PC = 0x68184 *)
mov r6_b L0xf6ffd628;  # 0x180
mov r6_t L0xf6ffd62a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd528; PC = 0x68364 *)
mov L0xf6ffd528 r4_b;  # 0x80
mov L0xf6ffd52a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5a8; PC = 0x68368 *)
mov L0xf6ffd5a8 r5_b;  # 0x100
mov L0xf6ffd5aa r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd628; PC = 0x68372 *)
mov L0xf6ffd628 r6_b;  # 0x180
mov L0xf6ffd62a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a8; PC = 0x68376 *)
mov L0xf6ffd4a8 r3_b;
mov L0xf6ffd4aa r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4ac; Value = 0xffff0000; PC = 0x68172 *)
mov r3_b L0xf6ffd4ac;
mov r3_t L0xf6ffd4ae;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd52c; Value = 0x00010000; PC = 0x68176 *)
mov r4_b L0xf6ffd52c;  # 0x80
mov r4_t L0xf6ffd52e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5ac; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5ac;  # 0x100
mov r5_t L0xf6ffd5ae;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd62c; Value = 0x00010001; PC = 0x68184 *)
mov r6_b L0xf6ffd62c;  # 0x180
mov r6_t L0xf6ffd62e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd52c; PC = 0x68364 *)
mov L0xf6ffd52c r4_b;  # 0x80
mov L0xf6ffd52e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5ac; PC = 0x68368 *)
mov L0xf6ffd5ac r5_b;  # 0x100
mov L0xf6ffd5ae r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd62c; PC = 0x68372 *)
mov L0xf6ffd62c r6_b;  # 0x180
mov L0xf6ffd62e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4ac; PC = 0x68376 *)
mov L0xf6ffd4ac r3_b;
mov L0xf6ffd4ae r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4b0; Value = 0x00020000; PC = 0x68172 *)
mov r3_b L0xf6ffd4b0;
mov r3_t L0xf6ffd4b2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd530; Value = 0x00020001; PC = 0x68176 *)
mov r4_b L0xf6ffd530;  # 0x80
mov r4_t L0xf6ffd532;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b0; Value = 0xffff0000; PC = 0x68180 *)
mov r5_b L0xf6ffd5b0;  # 0x100
mov r5_t L0xf6ffd5b2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd630; Value = 0x00000000; PC = 0x68184 *)
mov r6_b L0xf6ffd630;  # 0x180
mov r6_t L0xf6ffd632;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd530; PC = 0x68364 *)
mov L0xf6ffd530 r4_b;  # 0x80
mov L0xf6ffd532 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b0; PC = 0x68368 *)
mov L0xf6ffd5b0 r5_b;  # 0x100
mov L0xf6ffd5b2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd630; PC = 0x68372 *)
mov L0xf6ffd630 r6_b;  # 0x180
mov L0xf6ffd632 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4b0; PC = 0x68376 *)
mov L0xf6ffd4b0 r3_b;
mov L0xf6ffd4b2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4b4; Value = 0xffff0001; PC = 0x68172 *)
mov r3_b L0xf6ffd4b4;
mov r3_t L0xf6ffd4b6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd534; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd534;  # 0x80
mov r4_t L0xf6ffd536;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b4; Value = 0x00010000; PC = 0x68180 *)
mov r5_b L0xf6ffd5b4;  # 0x100
mov r5_t L0xf6ffd5b6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd634; Value = 0x00000001; PC = 0x68184 *)
mov r6_b L0xf6ffd634;  # 0x180
mov r6_t L0xf6ffd636;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd534; PC = 0x68364 *)
mov L0xf6ffd534 r4_b;  # 0x80
mov L0xf6ffd536 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b4; PC = 0x68368 *)
mov L0xf6ffd5b4 r5_b;  # 0x100
mov L0xf6ffd5b6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd634; PC = 0x68372 *)
mov L0xf6ffd634 r6_b;  # 0x180
mov L0xf6ffd636 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4b4; PC = 0x68376 *)
mov L0xf6ffd4b4 r3_b;
mov L0xf6ffd4b6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4b8; Value = 0x0001ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4b8;
mov r3_t L0xf6ffd4ba;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd538; Value = 0x00010000; PC = 0x68176 *)
mov r4_b L0xf6ffd538;  # 0x80
mov r4_t L0xf6ffd53a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b8; Value = 0x00010000; PC = 0x68180 *)
mov r5_b L0xf6ffd5b8;  # 0x100
mov r5_t L0xf6ffd5ba;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd638; Value = 0x00010001; PC = 0x68184 *)
mov r6_b L0xf6ffd638;  # 0x180
mov r6_t L0xf6ffd63a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd538; PC = 0x68364 *)
mov L0xf6ffd538 r4_b;  # 0x80
mov L0xf6ffd53a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5b8; PC = 0x68368 *)
mov L0xf6ffd5b8 r5_b;  # 0x100
mov L0xf6ffd5ba r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd638; PC = 0x68372 *)
mov L0xf6ffd638 r6_b;  # 0x180
mov L0xf6ffd63a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4b8; PC = 0x68376 *)
mov L0xf6ffd4b8 r3_b;
mov L0xf6ffd4ba r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4bc; Value = 0x00010000; PC = 0x68172 *)
mov r3_b L0xf6ffd4bc;
mov r3_t L0xf6ffd4be;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd53c; Value = 0x0002ffff; PC = 0x68176 *)
mov r4_b L0xf6ffd53c;  # 0x80
mov r4_t L0xf6ffd53e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5bc; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5bc;  # 0x100
mov r5_t L0xf6ffd5be;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd63c; Value = 0x0002ffff; PC = 0x68184 *)
mov r6_b L0xf6ffd63c;  # 0x180
mov r6_t L0xf6ffd63e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd53c; PC = 0x68364 *)
mov L0xf6ffd53c r4_b;  # 0x80
mov L0xf6ffd53e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5bc; PC = 0x68368 *)
mov L0xf6ffd5bc r5_b;  # 0x100
mov L0xf6ffd5be r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd63c; PC = 0x68372 *)
mov L0xf6ffd63c r6_b;  # 0x180
mov L0xf6ffd63e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4bc; PC = 0x68376 *)
mov L0xf6ffd4bc r3_b;
mov L0xf6ffd4be r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4c0; Value = 0x0000ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4c0;
mov r3_t L0xf6ffd4c2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd540; Value = 0xfffe0000; PC = 0x68176 *)
mov r4_b L0xf6ffd540;  # 0x80
mov r4_t L0xf6ffd542;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c0; Value = 0x0000ffff; PC = 0x68180 *)
mov r5_b L0xf6ffd5c0;  # 0x100
mov r5_t L0xf6ffd5c2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd640; Value = 0x0001fffe; PC = 0x68184 *)
mov r6_b L0xf6ffd640;  # 0x180
mov r6_t L0xf6ffd642;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd540; PC = 0x68364 *)
mov L0xf6ffd540 r4_b;  # 0x80
mov L0xf6ffd542 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c0; PC = 0x68368 *)
mov L0xf6ffd5c0 r5_b;  # 0x100
mov L0xf6ffd5c2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd640; PC = 0x68372 *)
mov L0xf6ffd640 r6_b;  # 0x180
mov L0xf6ffd642 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4c0; PC = 0x68376 *)
mov L0xf6ffd4c0 r3_b;
mov L0xf6ffd4c2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4c4; Value = 0x00010001; PC = 0x68172 *)
mov r3_b L0xf6ffd4c4;
mov r3_t L0xf6ffd4c6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd544; Value = 0x0001ffff; PC = 0x68176 *)
mov r4_b L0xf6ffd544;  # 0x80
mov r4_t L0xf6ffd546;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c4; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5c4;  # 0x100
mov r5_t L0xf6ffd5c6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd644; Value = 0xffff0001; PC = 0x68184 *)
mov r6_b L0xf6ffd644;  # 0x180
mov r6_t L0xf6ffd646;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd544; PC = 0x68364 *)
mov L0xf6ffd544 r4_b;  # 0x80
mov L0xf6ffd546 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c4; PC = 0x68368 *)
mov L0xf6ffd5c4 r5_b;  # 0x100
mov L0xf6ffd5c6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd644; PC = 0x68372 *)
mov L0xf6ffd644 r6_b;  # 0x180
mov L0xf6ffd646 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4c4; PC = 0x68376 *)
mov L0xf6ffd4c4 r3_b;
mov L0xf6ffd4c6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4c8; Value = 0x0002ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4c8;
mov r3_t L0xf6ffd4ca;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd548; Value = 0xffff0000; PC = 0x68176 *)
mov r4_b L0xf6ffd548;  # 0x80
mov r4_t L0xf6ffd54a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c8; Value = 0xffff0001; PC = 0x68180 *)
mov r5_b L0xf6ffd5c8;  # 0x100
mov r5_t L0xf6ffd5ca;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd648; Value = 0x00000001; PC = 0x68184 *)
mov r6_b L0xf6ffd648;  # 0x180
mov r6_t L0xf6ffd64a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd548; PC = 0x68364 *)
mov L0xf6ffd548 r4_b;  # 0x80
mov L0xf6ffd54a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5c8; PC = 0x68368 *)
mov L0xf6ffd5c8 r5_b;  # 0x100
mov L0xf6ffd5ca r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd648; PC = 0x68372 *)
mov L0xf6ffd648 r6_b;  # 0x180
mov L0xf6ffd64a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4c8; PC = 0x68376 *)
mov L0xf6ffd4c8 r3_b;
mov L0xf6ffd4ca r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4cc; Value = 0x00010000; PC = 0x68172 *)
mov r3_b L0xf6ffd4cc;
mov r3_t L0xf6ffd4ce;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd54c; Value = 0x00000001; PC = 0x68176 *)
mov r4_b L0xf6ffd54c;  # 0x80
mov r4_t L0xf6ffd54e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5cc; Value = 0x00020001; PC = 0x68180 *)
mov r5_b L0xf6ffd5cc;  # 0x100
mov r5_t L0xf6ffd5ce;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd64c; Value = 0xffffffff; PC = 0x68184 *)
mov r6_b L0xf6ffd64c;  # 0x180
mov r6_t L0xf6ffd64e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd54c; PC = 0x68364 *)
mov L0xf6ffd54c r4_b;  # 0x80
mov L0xf6ffd54e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5cc; PC = 0x68368 *)
mov L0xf6ffd5cc r5_b;  # 0x100
mov L0xf6ffd5ce r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd64c; PC = 0x68372 *)
mov L0xf6ffd64c r6_b;  # 0x180
mov L0xf6ffd64e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4cc; PC = 0x68376 *)
mov L0xf6ffd4cc r3_b;
mov L0xf6ffd4ce r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4d0; Value = 0x0000ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4d0;
mov r3_t L0xf6ffd4d2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd550; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd550;  # 0x80
mov r4_t L0xf6ffd552;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d0; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5d0;  # 0x100
mov r5_t L0xf6ffd5d2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd650; Value = 0x0000ffff; PC = 0x68184 *)
mov r6_b L0xf6ffd650;  # 0x180
mov r6_t L0xf6ffd652;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd550; PC = 0x68364 *)
mov L0xf6ffd550 r4_b;  # 0x80
mov L0xf6ffd552 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d0; PC = 0x68368 *)
mov L0xf6ffd5d0 r5_b;  # 0x100
mov L0xf6ffd5d2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd650; PC = 0x68372 *)
mov L0xf6ffd650 r6_b;  # 0x180
mov L0xf6ffd652 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4d0; PC = 0x68376 *)
mov L0xf6ffd4d0 r3_b;
mov L0xf6ffd4d2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4d4; Value = 0x0001ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4d4;
mov r3_t L0xf6ffd4d6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd554; Value = 0xffffffff; PC = 0x68176 *)
mov r4_b L0xf6ffd554;  # 0x80
mov r4_t L0xf6ffd556;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d4; Value = 0x0000ffff; PC = 0x68180 *)
mov r5_b L0xf6ffd5d4;  # 0x100
mov r5_t L0xf6ffd5d6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd654; Value = 0xffff0000; PC = 0x68184 *)
mov r6_b L0xf6ffd654;  # 0x180
mov r6_t L0xf6ffd656;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd554; PC = 0x68364 *)
mov L0xf6ffd554 r4_b;  # 0x80
mov L0xf6ffd556 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d4; PC = 0x68368 *)
mov L0xf6ffd5d4 r5_b;  # 0x100
mov L0xf6ffd5d6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd654; PC = 0x68372 *)
mov L0xf6ffd654 r6_b;  # 0x180
mov L0xf6ffd656 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4d4; PC = 0x68376 *)
mov L0xf6ffd4d4 r3_b;
mov L0xf6ffd4d6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4d8; Value = 0x00000000; PC = 0x68172 *)
mov r3_b L0xf6ffd4d8;
mov r3_t L0xf6ffd4da;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd558; Value = 0xffff0001; PC = 0x68176 *)
mov r4_b L0xf6ffd558;  # 0x80
mov r4_t L0xf6ffd55a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d8; Value = 0xffffffff; PC = 0x68180 *)
mov r5_b L0xf6ffd5d8;  # 0x100
mov r5_t L0xf6ffd5da;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd658; Value = 0xffff0002; PC = 0x68184 *)
mov r6_b L0xf6ffd658;  # 0x180
mov r6_t L0xf6ffd65a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd558; PC = 0x68364 *)
mov L0xf6ffd558 r4_b;  # 0x80
mov L0xf6ffd55a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5d8; PC = 0x68368 *)
mov L0xf6ffd5d8 r5_b;  # 0x100
mov L0xf6ffd5da r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd658; PC = 0x68372 *)
mov L0xf6ffd658 r6_b;  # 0x180
mov L0xf6ffd65a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4d8; PC = 0x68376 *)
mov L0xf6ffd4d8 r3_b;
mov L0xf6ffd4da r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4dc; Value = 0x00000000; PC = 0x68172 *)
mov r3_b L0xf6ffd4dc;
mov r3_t L0xf6ffd4de;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd55c; Value = 0x00010001; PC = 0x68176 *)
mov r4_b L0xf6ffd55c;  # 0x80
mov r4_t L0xf6ffd55e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5dc; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5dc;  # 0x100
mov r5_t L0xf6ffd5de;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd65c; Value = 0xffffffff; PC = 0x68184 *)
mov r6_b L0xf6ffd65c;  # 0x180
mov r6_t L0xf6ffd65e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd55c; PC = 0x68364 *)
mov L0xf6ffd55c r4_b;  # 0x80
mov L0xf6ffd55e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5dc; PC = 0x68368 *)
mov L0xf6ffd5dc r5_b;  # 0x100
mov L0xf6ffd5de r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd65c; PC = 0x68372 *)
mov L0xf6ffd65c r6_b;  # 0x180
mov L0xf6ffd65e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4dc; PC = 0x68376 *)
mov L0xf6ffd4dc r3_b;
mov L0xf6ffd4de r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4e0; Value = 0x0001ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4e0;
mov r3_t L0xf6ffd4e2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd560; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd560;  # 0x80
mov r4_t L0xf6ffd562;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e0; Value = 0xffff0000; PC = 0x68180 *)
mov r5_b L0xf6ffd5e0;  # 0x100
mov r5_t L0xf6ffd5e2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd660; Value = 0xffffffff; PC = 0x68184 *)
mov r6_b L0xf6ffd660;  # 0x180
mov r6_t L0xf6ffd662;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd560; PC = 0x68364 *)
mov L0xf6ffd560 r4_b;  # 0x80
mov L0xf6ffd562 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e0; PC = 0x68368 *)
mov L0xf6ffd5e0 r5_b;  # 0x100
mov L0xf6ffd5e2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd660; PC = 0x68372 *)
mov L0xf6ffd660 r6_b;  # 0x180
mov L0xf6ffd662 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4e0; PC = 0x68376 *)
mov L0xf6ffd4e0 r3_b;
mov L0xf6ffd4e2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4e4; Value = 0x00000000; PC = 0x68172 *)
mov r3_b L0xf6ffd4e4;
mov r3_t L0xf6ffd4e6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd564; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd564;  # 0x80
mov r4_t L0xf6ffd566;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e4; Value = 0xffff0000; PC = 0x68180 *)
mov r5_b L0xf6ffd5e4;  # 0x100
mov r5_t L0xf6ffd5e6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd664; Value = 0x00000001; PC = 0x68184 *)
mov r6_b L0xf6ffd664;  # 0x180
mov r6_t L0xf6ffd666;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd564; PC = 0x68364 *)
mov L0xf6ffd564 r4_b;  # 0x80
mov L0xf6ffd566 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e4; PC = 0x68368 *)
mov L0xf6ffd5e4 r5_b;  # 0x100
mov L0xf6ffd5e6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd664; PC = 0x68372 *)
mov L0xf6ffd664 r6_b;  # 0x180
mov L0xf6ffd666 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4e4; PC = 0x68376 *)
mov L0xf6ffd4e4 r3_b;
mov L0xf6ffd4e6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4e8; Value = 0x00000000; PC = 0x68172 *)
mov r3_b L0xf6ffd4e8;
mov r3_t L0xf6ffd4ea;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd568; Value = 0xffff0001; PC = 0x68176 *)
mov r4_b L0xf6ffd568;  # 0x80
mov r4_t L0xf6ffd56a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e8; Value = 0x00010001; PC = 0x68180 *)
mov r5_b L0xf6ffd5e8;  # 0x100
mov r5_t L0xf6ffd5ea;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd668; Value = 0x0000fffe; PC = 0x68184 *)
mov r6_b L0xf6ffd668;  # 0x180
mov r6_t L0xf6ffd66a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd568; PC = 0x68364 *)
mov L0xf6ffd568 r4_b;  # 0x80
mov L0xf6ffd56a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5e8; PC = 0x68368 *)
mov L0xf6ffd5e8 r5_b;  # 0x100
mov L0xf6ffd5ea r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd668; PC = 0x68372 *)
mov L0xf6ffd668 r6_b;  # 0x180
mov L0xf6ffd66a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4e8; PC = 0x68376 *)
mov L0xf6ffd4e8 r3_b;
mov L0xf6ffd4ea r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4ec; Value = 0xfffe0001; PC = 0x68172 *)
mov r3_b L0xf6ffd4ec;
mov r3_t L0xf6ffd4ee;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd56c; Value = 0x00000001; PC = 0x68176 *)
mov r4_b L0xf6ffd56c;  # 0x80
mov r4_t L0xf6ffd56e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5ec; Value = 0x00010000; PC = 0x68180 *)
mov r5_b L0xf6ffd5ec;  # 0x100
mov r5_t L0xf6ffd5ee;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd66c; Value = 0x00000000; PC = 0x68184 *)
mov r6_b L0xf6ffd66c;  # 0x180
mov r6_t L0xf6ffd66e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd56c; PC = 0x68364 *)
mov L0xf6ffd56c r4_b;  # 0x80
mov L0xf6ffd56e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5ec; PC = 0x68368 *)
mov L0xf6ffd5ec r5_b;  # 0x100
mov L0xf6ffd5ee r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd66c; PC = 0x68372 *)
mov L0xf6ffd66c r6_b;  # 0x180
mov L0xf6ffd66e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4ec; PC = 0x68376 *)
mov L0xf6ffd4ec r3_b;
mov L0xf6ffd4ee r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4f0; Value = 0x00000002; PC = 0x68172 *)
mov r3_b L0xf6ffd4f0;
mov r3_t L0xf6ffd4f2;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd570; Value = 0x00020001; PC = 0x68176 *)
mov r4_b L0xf6ffd570;  # 0x80
mov r4_t L0xf6ffd572;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f0; Value = 0x00010001; PC = 0x68180 *)
mov r5_b L0xf6ffd5f0;  # 0x100
mov r5_t L0xf6ffd5f2;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd670; Value = 0x00000001; PC = 0x68184 *)
mov r6_b L0xf6ffd670;  # 0x180
mov r6_t L0xf6ffd672;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd570; PC = 0x68364 *)
mov L0xf6ffd570 r4_b;  # 0x80
mov L0xf6ffd572 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f0; PC = 0x68368 *)
mov L0xf6ffd5f0 r5_b;  # 0x100
mov L0xf6ffd5f2 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd670; PC = 0x68372 *)
mov L0xf6ffd670 r6_b;  # 0x180
mov L0xf6ffd672 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4f0; PC = 0x68376 *)
mov L0xf6ffd4f0 r3_b;
mov L0xf6ffd4f2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4f4; Value = 0xffff0001; PC = 0x68172 *)
mov r3_b L0xf6ffd4f4;
mov r3_t L0xf6ffd4f6;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd574; Value = 0xffff0000; PC = 0x68176 *)
mov r4_b L0xf6ffd574;  # 0x80
mov r4_t L0xf6ffd576;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f4; Value = 0xffff0000; PC = 0x68180 *)
mov r5_b L0xf6ffd5f4;  # 0x100
mov r5_t L0xf6ffd5f6;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd674; Value = 0xffff0000; PC = 0x68184 *)
mov r6_b L0xf6ffd674;  # 0x180
mov r6_t L0xf6ffd676;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd574; PC = 0x68364 *)
mov L0xf6ffd574 r4_b;  # 0x80
mov L0xf6ffd576 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f4; PC = 0x68368 *)
mov L0xf6ffd5f4 r5_b;  # 0x100
mov L0xf6ffd5f6 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd674; PC = 0x68372 *)
mov L0xf6ffd674 r6_b;  # 0x180
mov L0xf6ffd676 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4f4; PC = 0x68376 *)
mov L0xf6ffd4f4 r3_b;
mov L0xf6ffd4f6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4f8; Value = 0x00000001; PC = 0x68172 *)
mov r3_b L0xf6ffd4f8;
mov r3_t L0xf6ffd4fa;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd578; Value = 0x00000002; PC = 0x68176 *)
mov r4_b L0xf6ffd578;  # 0x80
mov r4_t L0xf6ffd57a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f8; Value = 0x00000000; PC = 0x68180 *)
mov r5_b L0xf6ffd5f8;  # 0x100
mov r5_t L0xf6ffd5fa;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd678; Value = 0x0001ffff; PC = 0x68184 *)
mov r6_b L0xf6ffd678;  # 0x180
mov r6_t L0xf6ffd67a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd578; PC = 0x68364 *)
mov L0xf6ffd578 r4_b;  # 0x80
mov L0xf6ffd57a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5f8; PC = 0x68368 *)
mov L0xf6ffd5f8 r5_b;  # 0x100
mov L0xf6ffd5fa r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd678; PC = 0x68372 *)
mov L0xf6ffd678 r6_b;  # 0x180
mov L0xf6ffd67a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4f8; PC = 0x68376 *)
mov L0xf6ffd4f8 r3_b;
mov L0xf6ffd4fa r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4fc; Value = 0xffffffff; PC = 0x68172 *)
mov r3_b L0xf6ffd4fc;
mov r3_t L0xf6ffd4fe;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd57c; Value = 0x0001ffff; PC = 0x68176 *)
mov r4_b L0xf6ffd57c;  # 0x80
mov r4_t L0xf6ffd57e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5fc; Value = 0x00010000; PC = 0x68180 *)
mov r5_b L0xf6ffd5fc;  # 0x100
mov r5_t L0xf6ffd5fe;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd67c; Value = 0x00000000; PC = 0x68184 *)
mov r6_b L0xf6ffd67c;  # 0x180
mov r6_t L0xf6ffd67e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd57c; PC = 0x68364 *)
mov L0xf6ffd57c r4_b;  # 0x80
mov L0xf6ffd57e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd5fc; PC = 0x68368 *)
mov L0xf6ffd5fc r5_b;  # 0x100
mov L0xf6ffd5fe r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd67c; PC = 0x68372 *)
mov L0xf6ffd67c r6_b;  # 0x180
mov L0xf6ffd67e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4fc; PC = 0x68376 *)
mov L0xf6ffd4fc r3_b;
mov L0xf6ffd4fe r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd500; Value = 0x00000000; PC = 0x68172 *)
mov r3_b L0xf6ffd500;
mov r3_t L0xf6ffd502;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd580; Value = 0x00000002; PC = 0x68176 *)
mov r4_b L0xf6ffd580;  # 0x80
mov r4_t L0xf6ffd582;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd600; Value = 0x00000001; PC = 0x68180 *)
mov r5_b L0xf6ffd600;  # 0x100
mov r5_t L0xf6ffd602;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd680; Value = 0xffff0000; PC = 0x68184 *)
mov r6_b L0xf6ffd680;  # 0x180
mov r6_t L0xf6ffd682;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd580; PC = 0x68364 *)
mov L0xf6ffd580 r4_b;  # 0x80
mov L0xf6ffd582 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd600; PC = 0x68368 *)
mov L0xf6ffd600 r5_b;  # 0x100
mov L0xf6ffd602 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd680; PC = 0x68372 *)
mov L0xf6ffd680 r6_b;  # 0x180
mov L0xf6ffd682 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd500; PC = 0x68376 *)
mov L0xf6ffd500 r3_b;
mov L0xf6ffd502 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd504; Value = 0x00000001; PC = 0x68172 *)
mov r3_b L0xf6ffd504;
mov r3_t L0xf6ffd506;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd584; Value = 0x0000ffff; PC = 0x68176 *)
mov r4_b L0xf6ffd584;  # 0x80
mov r4_t L0xf6ffd586;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd604; Value = 0x00010000; PC = 0x68180 *)
mov r5_b L0xf6ffd604;  # 0x100
mov r5_t L0xf6ffd606;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd684; Value = 0x00000002; PC = 0x68184 *)
mov r6_b L0xf6ffd684;  # 0x180
mov r6_t L0xf6ffd686;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd584; PC = 0x68364 *)
mov L0xf6ffd584 r4_b;  # 0x80
mov L0xf6ffd586 r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd604; PC = 0x68368 *)
mov L0xf6ffd604 r5_b;  # 0x100
mov L0xf6ffd606 r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd684; PC = 0x68372 *)
mov L0xf6ffd684 r6_b;  # 0x180
mov L0xf6ffd686 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd504; PC = 0x68376 *)
mov L0xf6ffd504 r3_b;
mov L0xf6ffd506 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd508; Value = 0x0001ffff; PC = 0x68172 *)
mov r3_b L0xf6ffd508;
mov r3_t L0xf6ffd50a;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd588; Value = 0x00000001; PC = 0x68176 *)
mov r4_b L0xf6ffd588;  # 0x80
mov r4_t L0xf6ffd58a;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd608; Value = 0xffff0000; PC = 0x68180 *)
mov r5_b L0xf6ffd608;  # 0x100
mov r5_t L0xf6ffd60a;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd688; Value = 0x00000000; PC = 0x68184 *)
mov r6_b L0xf6ffd688;  # 0x180
mov r6_t L0xf6ffd68a;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd588; PC = 0x68364 *)
mov L0xf6ffd588 r4_b;  # 0x80
mov L0xf6ffd58a r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd608; PC = 0x68368 *)
mov L0xf6ffd608 r5_b;  # 0x100
mov L0xf6ffd60a r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd688; PC = 0x68372 *)
mov L0xf6ffd688 r6_b;  # 0x180
mov L0xf6ffd68a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd508; PC = 0x68376 *)
mov L0xf6ffd508 r3_b;
mov L0xf6ffd50a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd50c; Value = 0x00000001; PC = 0x68172 *)
mov r3_b L0xf6ffd50c;
mov r3_t L0xf6ffd50e;
(* ldr.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd58c; Value = 0x00000000; PC = 0x68176 *)
mov r4_b L0xf6ffd58c;  # 0x80
mov r4_t L0xf6ffd58e;
(* ldr.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd60c; Value = 0x0002fffe; PC = 0x68180 *)
mov r5_b L0xf6ffd60c;  # 0x100
mov r5_t L0xf6ffd60e;
(* ldr.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd68c; Value = 0xffffffff; PC = 0x68184 *)
mov r6_b L0xf6ffd68c;  # 0x180
mov r6_t L0xf6ffd68e;
(* smulbb	r10, r5, r11                             #! PC = 0x68188 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68192 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68196 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68200 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68204 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68208 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68212 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68216 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68220 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68224 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68228 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68232 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68236 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68240 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68244 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68248 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68252 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68256 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68260 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68264 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68268 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68272 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68276 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68280 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68284 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68288 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68292 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68296 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68300 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68304 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68308 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68312 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68316 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68320 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68324 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68328 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68332 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68336 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68340 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68344 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68348 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68352 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68356 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68360 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #128]	; 0x80                     #! EA = L0xf6ffd58c; PC = 0x68364 *)
mov L0xf6ffd58c r4_b;  # 0x80
mov L0xf6ffd58e r4_t;
(* str.w	r5, [r0, #256]	; 0x100                    #! EA = L0xf6ffd60c; PC = 0x68368 *)
mov L0xf6ffd60c r5_b;  # 0x100
mov L0xf6ffd60e r5_t;
(* str.w	r6, [r0, #384]	; 0x180                    #! EA = L0xf6ffd68c; PC = 0x68372 *)
mov L0xf6ffd68c r6_b;  # 0x180
mov L0xf6ffd68e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd50c; PC = 0x68376 *)
mov L0xf6ffd50c r3_b;
mov L0xf6ffd50e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68380 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10a4c <ntt_fast+28>                    #! PC = 0x68384 *)
#bne.w	0x10a4c <ntt_fast+28>                    #! 0x68384 = 0x68384;
(* #sub.w	r0, r0, #128	; 0x80                       #! PC = 0x68388 *)
#sub.w	%%r0, %%r0, #128	; 0x80                       #! 0x68388 = 0x68388;
(* ### LAYER 5+4 *)
### LAYER 5+4;
(* mov.w	r2, #8                                    #! PC = 0x68392 *)
mov r2_t 0@sint16;
mov r2_b 8@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2c6; Value = 0x0c5605d5; PC = 0x68396 *)
mov r11_b L0x5b2c6;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2c8; Value = 0x026e0c56; PC = 0x68400 *)
mov r7_b L0x5b2c8;
mov r7_t L0x5b2ca;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd490; Value = 0x0303fcab; PC = 0x68404 *)
mov r3_b L0xf6ffd490;
mov r3_t L0xf6ffd492;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b0; Value = 0x0068fd13; PC = 0x68408 *)
mov r4_b L0xf6ffd4b0;
mov r4_t L0xf6ffd4b2;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d0; Value = 0x00000027; PC = 0x68412 *)
mov r5_b L0xf6ffd4d0;  # 0x40
mov r5_t L0xf6ffd4d2;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f0; Value = 0xf3e6f6ad; PC = 0x68416 *)
mov r6_b L0xf6ffd4f0;  # 0x60
mov r6_t L0xf6ffd4f2;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b0; PC = 0x68596 *)
mov L0xf6ffd4b0 r4_b;
mov L0xf6ffd4b2 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d0; PC = 0x68600 *)
mov L0xf6ffd4d0 r5_b;  # 0x40
mov L0xf6ffd4d2 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f0; PC = 0x68604 *)
mov L0xf6ffd4f0 r6_b;  # 0x60
mov L0xf6ffd4f2 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd490; PC = 0x68608 *)
mov L0xf6ffd490 r3_b;
mov L0xf6ffd492 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd494; Value = 0x0347f9e9; PC = 0x68404 *)
mov r3_b L0xf6ffd494;
mov r3_t L0xf6ffd496;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b4; Value = 0xf9bfffd9; PC = 0x68408 *)
mov r4_b L0xf6ffd4b4;
mov r4_t L0xf6ffd4b6;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d4; Value = 0x0316092c; PC = 0x68412 *)
mov r5_b L0xf6ffd4d4;  # 0x40
mov r5_t L0xf6ffd4d6;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f4; Value = 0x09540001; PC = 0x68416 *)
mov r6_b L0xf6ffd4f4;  # 0x60
mov r6_t L0xf6ffd4f6;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b4; PC = 0x68596 *)
mov L0xf6ffd4b4 r4_b;
mov L0xf6ffd4b6 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d4; PC = 0x68600 *)
mov L0xf6ffd4d4 r5_b;  # 0x40
mov L0xf6ffd4d6 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f4; PC = 0x68604 *)
mov L0xf6ffd4f4 r6_b;  # 0x60
mov L0xf6ffd4f6 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd494; PC = 0x68608 *)
mov L0xf6ffd494 r3_b;
mov L0xf6ffd496 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd498; Value = 0xfc6cfcec; PC = 0x68404 *)
mov r3_b L0xf6ffd498;
mov r3_t L0xf6ffd49a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b8; Value = 0xf6acffd7; PC = 0x68408 *)
mov r4_b L0xf6ffd4b8;
mov r4_t L0xf6ffd4ba;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d8; Value = 0x09550303; PC = 0x68412 *)
mov r5_b L0xf6ffd4d8;  # 0x40
mov r5_t L0xf6ffd4da;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f8; Value = 0xffd8fa4f; PC = 0x68416 *)
mov r6_b L0xf6ffd4f8;  # 0x60
mov r6_t L0xf6ffd4fa;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4b8; PC = 0x68596 *)
mov L0xf6ffd4b8 r4_b;
mov L0xf6ffd4ba r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4d8; PC = 0x68600 *)
mov L0xf6ffd4d8 r5_b;  # 0x40
mov L0xf6ffd4da r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4f8; PC = 0x68604 *)
mov L0xf6ffd4f8 r6_b;  # 0x60
mov L0xf6ffd4fa r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd498; PC = 0x68608 *)
mov L0xf6ffd498 r3_b;
mov L0xf6ffd49a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd49c; Value = 0x00020618; PC = 0x68404 *)
mov r3_b L0xf6ffd49c;
mov r3_t L0xf6ffd49e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4bc; Value = 0xf9d70315; PC = 0x68408 *)
mov r4_b L0xf6ffd4bc;
mov r4_t L0xf6ffd4be;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4dc; Value = 0xfd3bfd3b; PC = 0x68412 *)
mov r5_b L0xf6ffd4dc;  # 0x40
mov r5_t L0xf6ffd4de;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4fc; Value = 0xf6d202ec; PC = 0x68416 *)
mov r6_b L0xf6ffd4fc;  # 0x60
mov r6_t L0xf6ffd4fe;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4bc; PC = 0x68596 *)
mov L0xf6ffd4bc r4_b;
mov L0xf6ffd4be r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4dc; PC = 0x68600 *)
mov L0xf6ffd4dc r5_b;  # 0x40
mov L0xf6ffd4de r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd4fc; PC = 0x68604 *)
mov L0xf6ffd4fc r6_b;  # 0x60
mov L0xf6ffd4fe r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd49c; PC = 0x68608 *)
mov L0xf6ffd49c r3_b;
mov L0xf6ffd49e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a0; Value = 0x08deff80; PC = 0x68404 *)
mov r3_b L0xf6ffd4a0;
mov r3_t L0xf6ffd4a2;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c0; Value = 0x05b2068f; PC = 0x68408 *)
mov r4_b L0xf6ffd4c0;
mov r4_t L0xf6ffd4c2;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e0; Value = 0x06690027; PC = 0x68412 *)
mov r5_b L0xf6ffd4e0;  # 0x40
mov r5_t L0xf6ffd4e2;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd500; Value = 0x0028f3e6; PC = 0x68416 *)
mov r6_b L0xf6ffd500;  # 0x60
mov r6_t L0xf6ffd502;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c0; PC = 0x68596 *)
mov L0xf6ffd4c0 r4_b;
mov L0xf6ffd4c2 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e0; PC = 0x68600 *)
mov L0xf6ffd4e0 r5_b;  # 0x40
mov L0xf6ffd4e2 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd500; PC = 0x68604 *)
mov L0xf6ffd500 r6_b;  # 0x60
mov L0xf6ffd502 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a0; PC = 0x68608 *)
mov L0xf6ffd4a0 r3_b;
mov L0xf6ffd4a2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a4; Value = 0xf9cef9c0; PC = 0x68404 *)
mov r3_b L0xf6ffd4a4;
mov r3_t L0xf6ffd4a6;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c4; Value = 0xfd3c02c6; PC = 0x68408 *)
mov r4_b L0xf6ffd4c4;
mov r4_t L0xf6ffd4c6;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e4; Value = 0x0640ffd8; PC = 0x68412 *)
mov r5_b L0xf6ffd4e4;  # 0x40
mov r5_t L0xf6ffd4e6;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd504; Value = 0xf9c0029e; PC = 0x68416 *)
mov r6_b L0xf6ffd504;  # 0x60
mov r6_t L0xf6ffd506;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c4; PC = 0x68596 *)
mov L0xf6ffd4c4 r4_b;
mov L0xf6ffd4c6 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e4; PC = 0x68600 *)
mov L0xf6ffd4e4 r5_b;  # 0x40
mov L0xf6ffd4e6 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd504; PC = 0x68604 *)
mov L0xf6ffd504 r6_b;  # 0x60
mov L0xf6ffd506 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a4; PC = 0x68608 *)
mov L0xf6ffd4a4 r3_b;
mov L0xf6ffd4a6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4a8; Value = 0xfd12f436; PC = 0x68404 *)
mov r3_b L0xf6ffd4a8;
mov r3_t L0xf6ffd4aa;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c8; Value = 0x092ff997; PC = 0x68408 *)
mov r4_b L0xf6ffd4c8;
mov r4_t L0xf6ffd4ca;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e8; Value = 0xfcadf723; PC = 0x68412 *)
mov r5_b L0xf6ffd4e8;  # 0x40
mov r5_t L0xf6ffd4ea;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd508; Value = 0x0641fd12; PC = 0x68416 *)
mov r6_b L0xf6ffd508;  # 0x60
mov r6_t L0xf6ffd50a;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4c8; PC = 0x68596 *)
mov L0xf6ffd4c8 r4_b;
mov L0xf6ffd4ca r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4e8; PC = 0x68600 *)
mov L0xf6ffd4e8 r5_b;  # 0x40
mov L0xf6ffd4ea r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd508; PC = 0x68604 *)
mov L0xf6ffd508 r6_b;  # 0x60
mov L0xf6ffd50a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4a8; PC = 0x68608 *)
mov L0xf6ffd4a8 r3_b;
mov L0xf6ffd4aa r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4ac; Value = 0xfceaffd8; PC = 0x68404 *)
mov r3_b L0xf6ffd4ac;
mov r3_t L0xf6ffd4ae;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd4cc; Value = 0x00aaf6fb; PC = 0x68408 *)
mov r4_b L0xf6ffd4cc;
mov r4_t L0xf6ffd4ce;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4ec; Value = 0xf9befd14; PC = 0x68412 *)
mov r5_b L0xf6ffd4ec;  # 0x40
mov r5_t L0xf6ffd4ee;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd50c; Value = 0x00a9ffa8; PC = 0x68416 *)
mov r6_b L0xf6ffd50c;  # 0x60
mov r6_t L0xf6ffd50e;
(* smulbb	r10, r5, r11                             #! PC = 0x68420 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68424 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68428 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68432 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68436 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68440 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68444 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68448 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68452 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68456 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68460 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68464 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68468 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68472 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68476 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68480 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68484 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68488 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68492 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68496 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68500 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68504 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68508 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68512 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68516 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68520 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68524 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68528 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68532 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68536 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68540 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68544 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68548 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68552 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68556 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68560 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68564 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68568 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68572 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68576 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68580 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68584 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68588 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68592 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd4cc; PC = 0x68596 *)
mov L0xf6ffd4cc r4_b;
mov L0xf6ffd4ce r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd4ec; PC = 0x68600 *)
mov L0xf6ffd4ec r5_b;  # 0x40
mov L0xf6ffd4ee r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd50c; PC = 0x68604 *)
mov L0xf6ffd50c r6_b;  # 0x60
mov L0xf6ffd50e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4ac; PC = 0x68608 *)
mov L0xf6ffd4ac r3_b;
mov L0xf6ffd4ae r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68612 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10b34 <ntt_fast+260>                   #! PC = 0x68616 *)
#bne.w	0x10b34 <ntt_fast+260>                   #! 0x68616 = 0x68616;
(* #add.w	r0, r0, #96	; 0x60                        #! PC = 0x68620 *)
#add.w	%%r0, %%r0, #96	; 0x60                        #! 0x68620 = 0x68620;
(* mov.w	r2, #8                                    #! PC = 0x68624 *)
mov r2_t 0@sint16;
mov r2_b 8@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2cc; Value = 0x0629058e; PC = 0x68628 *)
mov r11_b L0x5b2cc;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2ce; Value = 0x00b60629; PC = 0x68632 *)
mov r7_b L0x5b2ce;
mov r7_t L0x5b2d0;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd510; Value = 0x097df6d1; PC = 0x68636 *)
mov r3_b L0xf6ffd510;
mov r3_t L0xf6ffd512;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd530; Value = 0x0c1c02ed; PC = 0x68640 *)
mov r4_b L0xf6ffd530;
mov r4_t L0xf6ffd532;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd550; Value = 0x0000ffd7; PC = 0x68644 *)
mov r5_b L0xf6ffd550;  # 0x40
mov r5_t L0xf6ffd552;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd570; Value = 0xff9afcd7; PC = 0x68648 *)
mov r6_b L0xf6ffd570;  # 0x60
mov r6_t L0xf6ffd572;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd530; PC = 0x68828 *)
mov L0xf6ffd530 r4_b;
mov L0xf6ffd532 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd550; PC = 0x68832 *)
mov L0xf6ffd550 r5_b;  # 0x40
mov L0xf6ffd552 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd570; PC = 0x68836 *)
mov L0xf6ffd570 r6_b;  # 0x60
mov L0xf6ffd572 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd510; PC = 0x68840 *)
mov L0xf6ffd510 r3_b;
mov L0xf6ffd512 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd514; Value = 0xfdbdf999; PC = 0x68636 *)
mov r3_b L0xf6ffd514;
mov r3_t L0xf6ffd516;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd534; Value = 0xf9bf0029; PC = 0x68640 *)
mov r4_b L0xf6ffd534;
mov r4_t L0xf6ffd536;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd554; Value = 0xfcec0352; PC = 0x68644 *)
mov r5_b L0xf6ffd554;  # 0x40
mov r5_t L0xf6ffd556;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd574; Value = 0x032a0001; PC = 0x68648 *)
mov r6_b L0xf6ffd574;  # 0x60
mov r6_t L0xf6ffd576;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd534; PC = 0x68828 *)
mov L0xf6ffd534 r4_b;
mov L0xf6ffd536 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd554; PC = 0x68832 *)
mov L0xf6ffd554 r5_b;  # 0x40
mov L0xf6ffd556 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd574; PC = 0x68836 *)
mov L0xf6ffd574 r6_b;  # 0x60
mov L0xf6ffd576 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd514; PC = 0x68840 *)
mov L0xf6ffd514 r3_b;
mov L0xf6ffd516 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd518; Value = 0x02960316; PC = 0x68636 *)
mov r3_b L0xf6ffd518;
mov r3_t L0xf6ffd51a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd538; Value = 0xfcd60027; PC = 0x68640 *)
mov r4_b L0xf6ffd538;
mov r4_t L0xf6ffd53a;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd558; Value = 0x032b097d; PC = 0x68644 *)
mov r5_b L0xf6ffd558;  # 0x40
mov r5_t L0xf6ffd55a;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd578; Value = 0x002805b3; PC = 0x68648 *)
mov r6_b L0xf6ffd578;  # 0x60
mov r6_t L0xf6ffd57a;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd538; PC = 0x68828 *)
mov L0xf6ffd538 r4_b;
mov L0xf6ffd53a r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd558; PC = 0x68832 *)
mov L0xf6ffd558 r5_b;  # 0x40
mov L0xf6ffd55a r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd578; PC = 0x68836 *)
mov L0xf6ffd578 r6_b;  # 0x60
mov L0xf6ffd57a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd518; PC = 0x68840 *)
mov L0xf6ffd518 r3_b;
mov L0xf6ffd51a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd51c; Value = 0x00020668; PC = 0x68636 *)
mov r3_b L0xf6ffd51c;
mov r3_t L0xf6ffd51e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd53c; Value = 0x062bfceb; PC = 0x68640 *)
mov r4_b L0xf6ffd53c;
mov r4_t L0xf6ffd53e;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd55c; Value = 0x02c502c5; PC = 0x68644 *)
mov r5_b L0xf6ffd55c;  # 0x40
mov r5_t L0xf6ffd55e;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd57c; Value = 0xfcacfd12; PC = 0x68648 *)
mov r6_b L0xf6ffd57c;  # 0x60
mov r6_t L0xf6ffd57e;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd53c; PC = 0x68828 *)
mov L0xf6ffd53c r4_b;
mov L0xf6ffd53e r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd55c; PC = 0x68832 *)
mov L0xf6ffd55c r5_b;  # 0x40
mov L0xf6ffd55e r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd57c; PC = 0x68836 *)
mov L0xf6ffd57c r6_b;  # 0x60
mov L0xf6ffd57e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd51c; PC = 0x68840 *)
mov L0xf6ffd51c r3_b;
mov L0xf6ffd51e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd520; Value = 0x03a4ff80; PC = 0x68636 *)
mov r3_b L0xf6ffd520;
mov r3_t L0xf6ffd522;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd540; Value = 0xfa4e05ef; PC = 0x68640 *)
mov r4_b L0xf6ffd540;
mov r4_t L0xf6ffd542;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd560; Value = 0x0619ffd7; PC = 0x68644 *)
mov r5_b L0xf6ffd560;  # 0x40
mov r5_t L0xf6ffd562;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd580; Value = 0xffd8ff9a; PC = 0x68648 *)
mov r6_b L0xf6ffd580;  # 0x60
mov r6_t L0xf6ffd582;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd540; PC = 0x68828 *)
mov L0xf6ffd540 r4_b;
mov L0xf6ffd542 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd560; PC = 0x68832 *)
mov L0xf6ffd560 r5_b;  # 0x40
mov L0xf6ffd562 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd580; PC = 0x68836 *)
mov L0xf6ffd580 r6_b;  # 0x60
mov L0xf6ffd582 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd520; PC = 0x68840 *)
mov L0xf6ffd520 r3_b;
mov L0xf6ffd522 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd524; Value = 0x0532f9c0; PC = 0x68636 *)
mov r3_b L0xf6ffd524;
mov r3_t L0xf6ffd526;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd544; Value = 0x02c6fd3c; PC = 0x68640 *)
mov r4_b L0xf6ffd544;
mov r4_t L0xf6ffd546;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd564; Value = 0x06400028; PC = 0x68644 *)
mov r5_b L0xf6ffd564;  # 0x40
mov r5_t L0xf6ffd566;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd584; Value = 0xf9c0fd64; PC = 0x68648 *)
mov r6_b L0xf6ffd584;  # 0x60
mov r6_t L0xf6ffd586;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd544; PC = 0x68828 *)
mov L0xf6ffd544 r4_b;
mov L0xf6ffd546 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd564; PC = 0x68832 *)
mov L0xf6ffd564 r5_b;  # 0x40
mov L0xf6ffd566 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd584; PC = 0x68836 *)
mov L0xf6ffd584 r6_b;  # 0x60
mov L0xf6ffd586 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd524; PC = 0x68840 *)
mov L0xf6ffd524 r3_b;
mov L0xf6ffd526 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd528; Value = 0x02ecff4a; PC = 0x68636 *)
mov r3_b L0xf6ffd528;
mov r3_t L0xf6ffd52a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd548; Value = 0x0355f9e7; PC = 0x68640 *)
mov r4_b L0xf6ffd548;
mov r4_t L0xf6ffd54a;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd568; Value = 0xf6d3fc5d; PC = 0x68644 *)
mov r5_b L0xf6ffd568;  # 0x40
mov r5_t L0xf6ffd56a;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd588; Value = 0x064102ec; PC = 0x68648 *)
mov r6_b L0xf6ffd588;  # 0x60
mov r6_t L0xf6ffd58a;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd548; PC = 0x68828 *)
mov L0xf6ffd548 r4_b;
mov L0xf6ffd54a r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd568; PC = 0x68832 *)
mov L0xf6ffd568 r5_b;  # 0x40
mov L0xf6ffd56a r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd588; PC = 0x68836 *)
mov L0xf6ffd588 r6_b;  # 0x60
mov L0xf6ffd58a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd528; PC = 0x68840 *)
mov L0xf6ffd528 r3_b;
mov L0xf6ffd52a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd52c; Value = 0x03140028; PC = 0x68636 *)
mov r3_b L0xf6ffd52c;
mov r3_t L0xf6ffd52e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd54c; Value = 0x005afc85; PC = 0x68640 *)
mov r4_b L0xf6ffd54c;
mov r4_t L0xf6ffd54e;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd56c; Value = 0xf9be02ee; PC = 0x68644 *)
mov r5_b L0xf6ffd56c;  # 0x40
mov r5_t L0xf6ffd56e;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd58c; Value = 0x0059ff58; PC = 0x68648 *)
mov r6_b L0xf6ffd58c;  # 0x60
mov r6_t L0xf6ffd58e;
(* smulbb	r10, r5, r11                             #! PC = 0x68652 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68656 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68660 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68664 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68668 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68672 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68676 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68680 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68684 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68688 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68692 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68696 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68700 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68704 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68708 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68712 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68716 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68720 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68724 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68728 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68732 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68736 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68740 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68744 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68748 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68752 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68756 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68760 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68764 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x68768 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68772 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x68776 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68780 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x68784 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x68788 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x68792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68804 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68812 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x68820 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x68824 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd54c; PC = 0x68828 *)
mov L0xf6ffd54c r4_b;
mov L0xf6ffd54e r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd56c; PC = 0x68832 *)
mov L0xf6ffd56c r5_b;  # 0x40
mov L0xf6ffd56e r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd58c; PC = 0x68836 *)
mov L0xf6ffd58c r6_b;  # 0x60
mov L0xf6ffd58e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd52c; PC = 0x68840 *)
mov L0xf6ffd52c r3_b;
mov L0xf6ffd52e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x68844 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10c1c <ntt_fast+492>                   #! PC = 0x68848 *)
#bne.w	0x10c1c <ntt_fast+492>                   #! 0x68848 = 0x68848;
(* #add.w	r0, r0, #96	; 0x60                        #! PC = 0x68852 *)
#add.w	%%r0, %%r0, #96	; 0x60                        #! 0x68852 = 0x68852;
(* mov.w	r2, #8                                    #! PC = 0x68856 *)
mov r2_t 0@sint16;
mov r2_b 8@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2d2; Value = 0x03c2011f; PC = 0x68860 *)
mov r11_b L0x5b2d2;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2d4; Value = 0x084f03c2; PC = 0x68864 *)
mov r7_b L0x5b2d4;
mov r7_t L0x5b2d6;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd590; Value = 0xf3be0666; PC = 0x68868 *)
mov r3_b L0xf6ffd590;
mov r3_t L0xf6ffd592;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b0; Value = 0xf972ffd8; PC = 0x68872 *)
mov r4_b L0xf6ffd5b0;
mov r4_t L0xf6ffd5b2;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d0; Value = 0x000002ec; PC = 0x68876 *)
mov r5_b L0xf6ffd5d0;  # 0x40
mov r5_t L0xf6ffd5d2;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f0; Value = 0x05f0032d; PC = 0x68880 *)
mov r6_b L0xf6ffd5f0;  # 0x60
mov r6_t L0xf6ffd5f2;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b0; PC = 0x69060 *)
mov L0xf6ffd5b0 r4_b;
mov L0xf6ffd5b2 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d0; PC = 0x69064 *)
mov L0xf6ffd5d0 r5_b;  # 0x40
mov L0xf6ffd5d2 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f0; PC = 0x69068 *)
mov L0xf6ffd5f0 r6_b;  # 0x60
mov L0xf6ffd5f2 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd590; PC = 0x69072 *)
mov L0xf6ffd590 r3_b;
mov L0xf6ffd592 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd594; Value = 0xfcbb092e; PC = 0x68868 *)
mov r3_b L0xf6ffd594;
mov r3_t L0xf6ffd596;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b4; Value = 0x063ffd14; PC = 0x68872 *)
mov r4_b L0xf6ffd5b4;
mov r4_t L0xf6ffd5b6;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d4; Value = 0x0316f9e7; PC = 0x68876 *)
mov r5_b L0xf6ffd5d4;  # 0x40
mov r5_t L0xf6ffd5d6;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f4; Value = 0xfcd40001; PC = 0x68880 *)
mov r6_b L0xf6ffd5f4;  # 0x60
mov r6_t L0xf6ffd5f6;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b4; PC = 0x69060 *)
mov L0xf6ffd5b4 r4_b;
mov L0xf6ffd5b6 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d4; PC = 0x69064 *)
mov L0xf6ffd5d4 r5_b;  # 0x40
mov L0xf6ffd5d6 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f4; PC = 0x69068 *)
mov L0xf6ffd5f4 r6_b;  # 0x60
mov L0xf6ffd5f6 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd594; PC = 0x69072 *)
mov L0xf6ffd594 r3_b;
mov L0xf6ffd596 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd598; Value = 0xfd6efcec; PC = 0x68868 *)
mov r3_b L0xf6ffd598;
mov r3_t L0xf6ffd59a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b8; Value = 0x032cfd12; PC = 0x68872 *)
mov r4_b L0xf6ffd5b8;
mov r4_t L0xf6ffd5ba;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d8; Value = 0xfcd5f3be; PC = 0x68876 *)
mov r5_b L0xf6ffd5d8;  # 0x40
mov r5_t L0xf6ffd5da;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f8; Value = 0xfd13029e; PC = 0x68880 *)
mov r6_b L0xf6ffd5f8;  # 0x60
mov r6_t L0xf6ffd5fa;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5b8; PC = 0x69060 *)
mov L0xf6ffd5b8 r4_b;
mov L0xf6ffd5ba r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5d8; PC = 0x69064 *)
mov L0xf6ffd5d8 r5_b;  # 0x40
mov L0xf6ffd5da r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5f8; PC = 0x69068 *)
mov L0xf6ffd5f8 r6_b;  # 0x60
mov L0xf6ffd5fa r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd598; PC = 0x69072 *)
mov L0xf6ffd598 r3_b;
mov L0xf6ffd59a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd59c; Value = 0x0002f6d3; PC = 0x68868 *)
mov r3_b L0xf6ffd59c;
mov r3_t L0xf6ffd59e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5bc; Value = 0xf9d70315; PC = 0x68872 *)
mov r4_b L0xf6ffd5bc;
mov r4_t L0xf6ffd5be;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5dc; Value = 0x02c502c5; PC = 0x68876 *)
mov r5_b L0xf6ffd5dc;  # 0x40
mov r5_t L0xf6ffd5de;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5fc; Value = 0x06170027; PC = 0x68880 *)
mov r6_b L0xf6ffd5fc;  # 0x60
mov r6_t L0xf6ffd5fe;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5bc; PC = 0x69060 *)
mov L0xf6ffd5bc r4_b;
mov L0xf6ffd5be r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5dc; PC = 0x69064 *)
mov L0xf6ffd5dc r5_b;  # 0x40
mov L0xf6ffd5de r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd5fc; PC = 0x69068 *)
mov L0xf6ffd5fc r6_b;  # 0x60
mov L0xf6ffd5fe r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd59c; PC = 0x69072 *)
mov L0xf6ffd59c r3_b;
mov L0xf6ffd59e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5a0; Value = 0xf40f0082; PC = 0x68868 *)
mov r3_b L0xf6ffd5a0;
mov r3_t L0xf6ffd5a2;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c0; Value = 0xfd63ff99; PC = 0x68872 *)
mov r4_b L0xf6ffd5c0;
mov r4_t L0xf6ffd5c2;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e0; Value = 0xfcae02ec; PC = 0x68876 *)
mov r5_b L0xf6ffd5e0;  # 0x40
mov r5_t L0xf6ffd5e2;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd600; Value = 0x02ed05f0; PC = 0x68880 *)
mov r6_b L0xf6ffd600;  # 0x60
mov r6_t L0xf6ffd602;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c0; PC = 0x69060 *)
mov L0xf6ffd5c0 r4_b;
mov L0xf6ffd5c2 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e0; PC = 0x69064 *)
mov L0xf6ffd5e0 r5_b;  # 0x40
mov L0xf6ffd5e2 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd600; PC = 0x69068 *)
mov L0xf6ffd600 r6_b;  # 0x60
mov L0xf6ffd602 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5a0; PC = 0x69072 *)
mov L0xf6ffd5a0 r3_b;
mov L0xf6ffd5a2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5a4; Value = 0x031f0640; PC = 0x68868 *)
mov r3_b L0xf6ffd5a4;
mov r3_t L0xf6ffd5a6;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c4; Value = 0x02c6fd3c; PC = 0x68872 *)
mov r4_b L0xf6ffd5c4;
mov r4_t L0xf6ffd5c6;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e4; Value = 0xf9c0fd13; PC = 0x68876 *)
mov r5_b L0xf6ffd5e4;  # 0x40
mov r5_t L0xf6ffd5e6;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd604; Value = 0x0640fa4f; PC = 0x68880 *)
mov r6_b L0xf6ffd604;  # 0x60
mov r6_t L0xf6ffd606;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c4; PC = 0x69060 *)
mov L0xf6ffd5c4 r4_b;
mov L0xf6ffd5c6 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e4; PC = 0x69064 *)
mov L0xf6ffd5e4 r5_b;  # 0x40
mov L0xf6ffd5e6 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd604; PC = 0x69068 *)
mov L0xf6ffd604 r6_b;  # 0x60
mov L0xf6ffd606 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5a4; PC = 0x69072 *)
mov L0xf6ffd5a4 r3_b;
mov L0xf6ffd5a6 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5a8; Value = 0xffd70bca; PC = 0x68868 *)
mov r3_b L0xf6ffd5a8;
mov r3_t L0xf6ffd5aa;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c8; Value = 0xf9ea0352; PC = 0x68872 *)
mov r4_b L0xf6ffd5c8;
mov r4_t L0xf6ffd5ca;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e8; Value = 0x06680bf2; PC = 0x68876 *)
mov r5_b L0xf6ffd5e8;  # 0x40
mov r5_t L0xf6ffd5ea;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd608; Value = 0xf9c1ffd7; PC = 0x68880 *)
mov r6_b L0xf6ffd608;  # 0x60
mov r6_t L0xf6ffd60a;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5c8; PC = 0x69060 *)
mov L0xf6ffd5c8 r4_b;
mov L0xf6ffd5ca r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5e8; PC = 0x69064 *)
mov L0xf6ffd5e8 r5_b;  # 0x40
mov L0xf6ffd5ea r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd608; PC = 0x69068 *)
mov L0xf6ffd608 r6_b;  # 0x60
mov L0xf6ffd60a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5a8; PC = 0x69072 *)
mov L0xf6ffd5a8 r3_b;
mov L0xf6ffd5aa r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5ac; Value = 0xfceafd13; PC = 0x68868 *)
mov r3_b L0xf6ffd5ac;
mov r3_t L0xf6ffd5ae;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd5cc; Value = 0x026d0905; PC = 0x68872 *)
mov r4_b L0xf6ffd5cc;
mov r4_t L0xf6ffd5ce;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5ec; Value = 0x063effd9; PC = 0x68876 *)
mov r5_b L0xf6ffd5ec;  # 0x40
mov r5_t L0xf6ffd5ee;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd60c; Value = 0x026c036f; PC = 0x68880 *)
mov r6_b L0xf6ffd60c;  # 0x60
mov r6_t L0xf6ffd60e;
(* smulbb	r10, r5, r11                             #! PC = 0x68884 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x68888 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68892 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68896 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68900 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x68904 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68908 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x68912 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68916 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x68920 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x68924 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x68928 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x68932 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68936 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68940 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68944 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x68948 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x68956 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x68960 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x68964 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x68968 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x68972 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x68976 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x68980 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x68984 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x68988 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x68992 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x68996 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69000 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69004 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69008 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69012 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69016 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69020 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69024 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69028 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69032 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69036 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69040 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69044 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69048 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69052 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69056 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd5cc; PC = 0x69060 *)
mov L0xf6ffd5cc r4_b;
mov L0xf6ffd5ce r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd5ec; PC = 0x69064 *)
mov L0xf6ffd5ec r5_b;  # 0x40
mov L0xf6ffd5ee r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd60c; PC = 0x69068 *)
mov L0xf6ffd60c r6_b;  # 0x60
mov L0xf6ffd60e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5ac; PC = 0x69072 *)
mov L0xf6ffd5ac r3_b;
mov L0xf6ffd5ae r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69076 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10d04 <ntt_fast+724>                   #! PC = 0x69080 *)
#bne.w	0x10d04 <ntt_fast+724>                   #! 0x69080 = 0x69080;
(* #add.w	r0, r0, #96	; 0x60                        #! PC = 0x69084 *)
#add.w	%%r0, %%r0, #96	; 0x60                        #! 0x69084 = 0x69084;
(* mov.w	r2, #8                                    #! PC = 0x69088 *)
mov r2_t 0@sint16;
mov r2_b 8@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2d8; Value = 0x073f00ca; PC = 0x69092 *)
mov r11_b L0x5b2d8;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2da; Value = 0x05bc073f; PC = 0x69096 *)
mov r7_b L0x5b2da;
mov r7_t L0x5b2dc;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd610; Value = 0xffc20616; PC = 0x69100 *)
mov r3_b L0xf6ffd610;
mov r3_t L0xf6ffd612;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd630; Value = 0xfa120028; PC = 0x69104 *)
mov r4_b L0xf6ffd630;
mov r4_t L0xf6ffd632;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd650; Value = 0x0000fd12; PC = 0x69108 *)
mov r5_b L0xf6ffd650;  # 0x40
mov r5_t L0xf6ffd652;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd670; Value = 0x06900957; PC = 0x69112 *)
mov r6_b L0xf6ffd670;  # 0x60
mov r6_t L0xf6ffd672;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd630; PC = 0x69292 *)
mov L0xf6ffd630 r4_b;
mov L0xf6ffd632 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd650; PC = 0x69296 *)
mov L0xf6ffd650 r5_b;  # 0x40
mov L0xf6ffd652 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd670; PC = 0x69300 *)
mov L0xf6ffd670 r6_b;  # 0x60
mov L0xf6ffd672 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd610; PC = 0x69304 *)
mov L0xf6ffd610 r3_b;
mov L0xf6ffd612 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd614; Value = 0x02450354; PC = 0x69100 *)
mov r3_b L0xf6ffd614;
mov r3_t L0xf6ffd616;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd634; Value = 0x063f02ee; PC = 0x69104 *)
mov r4_b L0xf6ffd634;
mov r4_t L0xf6ffd636;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd654; Value = 0xfcecf997; PC = 0x69108 *)
mov r5_b L0xf6ffd654;  # 0x40
mov r5_t L0xf6ffd656;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd674; Value = 0xf6aa0001; PC = 0x69112 *)
mov r6_b L0xf6ffd674;  # 0x60
mov r6_t L0xf6ffd676;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd634; PC = 0x69292 *)
mov L0xf6ffd634 r4_b;
mov L0xf6ffd636 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd654; PC = 0x69296 *)
mov L0xf6ffd654 r5_b;  # 0x40
mov L0xf6ffd656 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd674; PC = 0x69300 *)
mov L0xf6ffd674 r6_b;  # 0x60
mov L0xf6ffd676 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd614; PC = 0x69304 *)
mov L0xf6ffd614 r3_b;
mov L0xf6ffd616 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd618; Value = 0x03980316; PC = 0x69100 *)
mov r3_b L0xf6ffd618;
mov r3_t L0xf6ffd61a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd638; Value = 0x095602ec; PC = 0x69104 *)
mov r4_b L0xf6ffd638;
mov r4_t L0xf6ffd63a;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd658; Value = 0xf6abffc2; PC = 0x69108 *)
mov r5_b L0xf6ffd658;  # 0x40
mov r5_t L0xf6ffd65a;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd678; Value = 0x02edfd64; PC = 0x69112 *)
mov r6_b L0xf6ffd678;  # 0x60
mov r6_t L0xf6ffd67a;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd638; PC = 0x69292 *)
mov L0xf6ffd638 r4_b;
mov L0xf6ffd63a r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd658; PC = 0x69296 *)
mov L0xf6ffd658 r5_b;  # 0x40
mov L0xf6ffd65a r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd678; PC = 0x69300 *)
mov L0xf6ffd678 r6_b;  # 0x60
mov L0xf6ffd67a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd618; PC = 0x69304 *)
mov L0xf6ffd618 r3_b;
mov L0xf6ffd61a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd61c; Value = 0x0002fcad; PC = 0x69100 *)
mov r3_b L0xf6ffd61c;
mov r3_t L0xf6ffd61e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd63c; Value = 0x062bfceb; PC = 0x69104 *)
mov r4_b L0xf6ffd63c;
mov r4_t L0xf6ffd63e;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd65c; Value = 0xfd3bfd3b; PC = 0x69108 *)
mov r5_b L0xf6ffd65c;  # 0x40
mov r5_t L0xf6ffd65e;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd67c; Value = 0x0667ffd7; PC = 0x69112 *)
mov r6_b L0xf6ffd67c;  # 0x60
mov r6_t L0xf6ffd67e;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd63c; PC = 0x69292 *)
mov L0xf6ffd63c r4_b;
mov L0xf6ffd63e r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd65c; PC = 0x69296 *)
mov L0xf6ffd65c r5_b;  # 0x40
mov L0xf6ffd65e r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd67c; PC = 0x69300 *)
mov L0xf6ffd67c r6_b;  # 0x60
mov L0xf6ffd67e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd61c; PC = 0x69304 *)
mov L0xf6ffd61c r3_b;
mov L0xf6ffd61e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd620; Value = 0xff730082; PC = 0x69100 *)
mov r3_b L0xf6ffd620;
mov r3_t L0xf6ffd622;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd640; Value = 0x029df3e5; PC = 0x69104 *)
mov r4_b L0xf6ffd640;
mov r4_t L0xf6ffd642;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd660; Value = 0xf6d4fd12; PC = 0x69108 *)
mov r5_b L0xf6ffd660;  # 0x40
mov r5_t L0xf6ffd662;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd680; Value = 0xfd130690; PC = 0x69112 *)
mov r6_b L0xf6ffd680;  # 0x60
mov r6_t L0xf6ffd682;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd640; PC = 0x69292 *)
mov L0xf6ffd640 r4_b;
mov L0xf6ffd642 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd660; PC = 0x69296 *)
mov L0xf6ffd660 r5_b;  # 0x40
mov L0xf6ffd662 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd680; PC = 0x69300 *)
mov L0xf6ffd680 r6_b;  # 0x60
mov L0xf6ffd682 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd620; PC = 0x69304 *)
mov L0xf6ffd620 r3_b;
mov L0xf6ffd622 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd624; Value = 0xfde50640; PC = 0x69100 *)
mov r3_b L0xf6ffd624;
mov r3_t L0xf6ffd626;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd644; Value = 0xfd3c02c6; PC = 0x69104 *)
mov r4_b L0xf6ffd644;
mov r4_t L0xf6ffd646;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd664; Value = 0xf9c002ed; PC = 0x69108 *)
mov r5_b L0xf6ffd664;  # 0x40
mov r5_t L0xf6ffd666;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd684; Value = 0x064005b3; PC = 0x69112 *)
mov r6_b L0xf6ffd684;  # 0x60
mov r6_t L0xf6ffd686;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd644; PC = 0x69292 *)
mov L0xf6ffd644 r4_b;
mov L0xf6ffd646 r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd664; PC = 0x69296 *)
mov L0xf6ffd664 r5_b;  # 0x40
mov L0xf6ffd666 r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd684; PC = 0x69300 *)
mov L0xf6ffd684 r6_b;  # 0x60
mov L0xf6ffd686 r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd624; PC = 0x69304 *)
mov L0xf6ffd624 r3_b;
mov L0xf6ffd626 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd628; Value = 0x002700b6; PC = 0x69100 *)
mov r3_b L0xf6ffd628;
mov r3_t L0xf6ffd62a;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd648; Value = 0xf99a092c; PC = 0x69104 *)
mov r4_b L0xf6ffd648;
mov r4_t L0xf6ffd64a;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd668; Value = 0x0618008e; PC = 0x69108 *)
mov r5_b L0xf6ffd668;  # 0x40
mov r5_t L0xf6ffd66a;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd688; Value = 0xf9c10027; PC = 0x69112 *)
mov r6_b L0xf6ffd688;  # 0x60
mov r6_t L0xf6ffd68a;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd648; PC = 0x69292 *)
mov L0xf6ffd648 r4_b;
mov L0xf6ffd64a r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd668; PC = 0x69296 *)
mov L0xf6ffd668 r5_b;  # 0x40
mov L0xf6ffd66a r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd688; PC = 0x69300 *)
mov L0xf6ffd688 r6_b;  # 0x60
mov L0xf6ffd68a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd628; PC = 0x69304 *)
mov L0xf6ffd628 r3_b;
mov L0xf6ffd62a r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd62c; Value = 0x031402ed; PC = 0x69100 *)
mov r3_b L0xf6ffd62c;
mov r3_t L0xf6ffd62e;
(* ldr.w	r4, [r0, #32]                             #! EA = L0xf6ffd64c; Value = 0xfc93037b; PC = 0x69104 *)
mov r4_b L0xf6ffd64c;
mov r4_t L0xf6ffd64e;
(* ldr.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd66c; Value = 0x063e0029; PC = 0x69108 *)
mov r5_b L0xf6ffd66c;  # 0x40
mov r5_t L0xf6ffd66e;
(* ldr.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd68c; Value = 0xfc92fd95; PC = 0x69112 *)
mov r6_b L0xf6ffd68c;  # 0x60
mov r6_t L0xf6ffd68e;
(* smulbb	r10, r5, r11                             #! PC = 0x69116 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69120 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69124 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69128 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69132 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69136 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69140 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69144 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69148 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69152 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69156 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69160 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69164 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69168 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69172 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69176 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69180 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69184 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69188 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69192 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69196 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69200 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69204 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69208 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69212 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69216 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69220 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69224 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69228 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69232 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69236 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69240 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69244 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69248 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69252 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69256 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69260 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69264 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69268 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69272 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69276 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69280 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69284 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69288 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #32]                             #! EA = L0xf6ffd64c; PC = 0x69292 *)
mov L0xf6ffd64c r4_b;
mov L0xf6ffd64e r4_t;
(* str.w	r5, [r0, #64]	; 0x40                      #! EA = L0xf6ffd66c; PC = 0x69296 *)
mov L0xf6ffd66c r5_b;  # 0x40
mov L0xf6ffd66e r5_t;
(* str.w	r6, [r0, #96]	; 0x60                      #! EA = L0xf6ffd68c; PC = 0x69300 *)
mov L0xf6ffd68c r6_b;  # 0x60
mov L0xf6ffd68e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd62c; PC = 0x69304 *)
mov L0xf6ffd62c r3_b;
mov L0xf6ffd62e r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x69308 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10dec <ntt_fast+956>                   #! PC = 0x69312 *)
#bne.w	0x10dec <ntt_fast+956>                   #! 0x69312 = 0x69312;
(* #add.w	r0, r0, #96	; 0x60                        #! PC = 0x69316 *)
#add.w	%%r0, %%r0, #96	; 0x60                        #! 0x69316 = 0x69316;
(* sub.w	r0, r0, #512	; 0x200                      #! PC = 0x69320 *)
(* ### LAYER 3+2 *)
### LAYER 3+2;
(* mov.w	r2, #16                                   #! PC = 0x69324 *)
mov r2_t 0@sint16;
mov r2_b 16@uint16;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2de; Value = 0x04c7023d; PC = 0x69328 *)
mov r11_b L0x5b2de;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2e0; Value = 0x028c04c7; PC = 0x69332 *)
mov r7_b L0x5b2e0;
mov r7_t L0x5b2e2;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd490; Value = 0x097f0153; PC = 0x69336 *)
mov r3_b L0xf6ffd490;
mov r3_t L0xf6ffd492;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd498; Value = 0xf891f5f6; PC = 0x69340 *)
mov r4_b L0xf6ffd498;
mov r4_t L0xf6ffd49a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4a0; Value = 0x0833fe2e; PC = 0x69344 *)
mov r5_b L0xf6ffd4a0;
mov r5_t L0xf6ffd4a2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4a8; Value = 0xf651f542; PC = 0x69348 *)
mov r6_b L0xf6ffd4a8;
mov r6_t L0xf6ffd4aa;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd498; PC = 0x69528 *)
mov L0xf6ffd498 r4_b;
mov L0xf6ffd49a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4a0; PC = 0x69532 *)
mov L0xf6ffd4a0 r5_b;
mov L0xf6ffd4a2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4a8; PC = 0x69536 *)
mov L0xf6ffd4a8 r6_b;
mov L0xf6ffd4aa r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd490; PC = 0x69540 *)
mov L0xf6ffd490 r3_b;
mov L0xf6ffd492 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd494; Value = 0xff9204de; PC = 0x69544 *)
mov r3_b L0xf6ffd494;
mov r3_t L0xf6ffd496;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd49c; Value = 0x070f0639; PC = 0x69548 *)
mov r4_b L0xf6ffd49c;
mov r4_t L0xf6ffd49e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4a4; Value = 0xf8ddffdd; PC = 0x69552 *)
mov r5_b L0xf6ffd4a4;
mov r5_t L0xf6ffd4a6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4ac; Value = 0xf367014e; PC = 0x69556 *)
mov r6_b L0xf6ffd4ac;
mov r6_t L0xf6ffd4ae;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd49c; PC = 0x69736 *)
mov L0xf6ffd49c r4_b;
mov L0xf6ffd49e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4a4; PC = 0x69740 *)
mov L0xf6ffd4a4 r5_b;
mov L0xf6ffd4a6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4ac; PC = 0x69744 *)
mov L0xf6ffd4ac r6_b;
mov L0xf6ffd4ae r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd494; PC = 0x69748 *)
mov L0xf6ffd494 r3_b;
mov L0xf6ffd496 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2e4; Value = 0x0ad907d4; PC = 0x69328 *)
mov r11_b L0x5b2e4;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2e6; Value = 0x03f70ad9; PC = 0x69332 *)
mov r7_b L0x5b2e6;
mov r7_t L0x5b2e8;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4b0; Value = 0xfc87f6c1; PC = 0x69336 *)
mov r3_b L0xf6ffd4b0;
mov r3_t L0xf6ffd4b2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4b8; Value = 0xffeb0106; PC = 0x69340 *)
mov r4_b L0xf6ffd4b8;
mov r4_t L0xf6ffd4ba;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4c0; Value = 0x12a1ff90; PC = 0x69344 *)
mov r5_b L0xf6ffd4c0;
mov r5_t L0xf6ffd4c2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4c8; Value = 0xf9edf9a8; PC = 0x69348 *)
mov r6_b L0xf6ffd4c8;
mov r6_t L0xf6ffd4ca;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4b8; PC = 0x69528 *)
mov L0xf6ffd4b8 r4_b;
mov L0xf6ffd4ba r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4c0; PC = 0x69532 *)
mov L0xf6ffd4c0 r5_b;
mov L0xf6ffd4c2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4c8; PC = 0x69536 *)
mov L0xf6ffd4c8 r6_b;
mov L0xf6ffd4ca r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4b0; PC = 0x69540 *)
mov L0xf6ffd4b0 r3_b;
mov L0xf6ffd4b2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4b4; Value = 0x062efa96; PC = 0x69544 *)
mov r3_b L0xf6ffd4b4;
mov r3_t L0xf6ffd4b6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4bc; Value = 0x01270e29; PC = 0x69548 *)
mov r4_b L0xf6ffd4bc;
mov r4_t L0xf6ffd4be;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4c4; Value = 0xf5d3fa43; PC = 0x69552 *)
mov r5_b L0xf6ffd4c4;
mov r5_t L0xf6ffd4c6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4cc; Value = 0xfc1307d6; PC = 0x69556 *)
mov r6_b L0xf6ffd4cc;
mov r6_t L0xf6ffd4ce;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4bc; PC = 0x69736 *)
mov L0xf6ffd4bc r4_b;
mov L0xf6ffd4be r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4c4; PC = 0x69740 *)
mov L0xf6ffd4c4 r5_b;
mov L0xf6ffd4c6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4cc; PC = 0x69744 *)
mov L0xf6ffd4cc r6_b;
mov L0xf6ffd4ce r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4b4; PC = 0x69748 *)
mov L0xf6ffd4b4 r3_b;
mov L0xf6ffd4b6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2ea; Value = 0x07f40108; PC = 0x69328 *)
mov r11_b L0x5b2ea;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2ec; Value = 0x05d307f4; PC = 0x69332 *)
mov r7_b L0x5b2ec;
mov r7_t L0x5b2ee;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4d0; Value = 0xff9dfa3b; PC = 0x69336 *)
mov r3_b L0xf6ffd4d0;
mov r3_t L0xf6ffd4d2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4d8; Value = 0xf7870084; PC = 0x69340 *)
mov r4_b L0xf6ffd4d8;
mov r4_t L0xf6ffd4da;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4e0; Value = 0x081ffb88; PC = 0x69344 *)
mov r5_b L0xf6ffd4e0;
mov r5_t L0xf6ffd4e2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4e8; Value = 0x076fea7b; PC = 0x69348 *)
mov r6_b L0xf6ffd4e8;
mov r6_t L0xf6ffd4ea;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4d8; PC = 0x69528 *)
mov L0xf6ffd4d8 r4_b;
mov L0xf6ffd4da r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4e0; PC = 0x69532 *)
mov L0xf6ffd4e0 r5_b;
mov L0xf6ffd4e2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4e8; PC = 0x69536 *)
mov L0xf6ffd4e8 r6_b;
mov L0xf6ffd4ea r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4d0; PC = 0x69540 *)
mov L0xf6ffd4d0 r3_b;
mov L0xf6ffd4d2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4d4; Value = 0xfe7cee1a; PC = 0x69544 *)
mov r3_b L0xf6ffd4d4;
mov r3_t L0xf6ffd4d6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4dc; Value = 0xfeea0630; PC = 0x69548 *)
mov r4_b L0xf6ffd4dc;
mov r4_t L0xf6ffd4de;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd4e4; Value = 0xf881f899; PC = 0x69552 *)
mov r5_b L0xf6ffd4e4;
mov r5_t L0xf6ffd4e6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd4ec; Value = 0x0895fd20; PC = 0x69556 *)
mov r6_b L0xf6ffd4ec;
mov r6_t L0xf6ffd4ee;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4dc; PC = 0x69736 *)
mov L0xf6ffd4dc r4_b;
mov L0xf6ffd4de r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd4e4; PC = 0x69740 *)
mov L0xf6ffd4e4 r5_b;
mov L0xf6ffd4e6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd4ec; PC = 0x69744 *)
mov L0xf6ffd4ec r6_b;
mov L0xf6ffd4ee r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4d4; PC = 0x69748 *)
mov L0xf6ffd4d4 r3_b;
mov L0xf6ffd4d6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2f0; Value = 0x0be7017f; PC = 0x69328 *)
mov r11_b L0x5b2f0;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2f2; Value = 0x06f90be7; PC = 0x69332 *)
mov r7_b L0x5b2f2;
mov r7_t L0x5b2f4;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4f0; Value = 0x0669005d; PC = 0x69336 *)
mov r3_b L0xf6ffd4f0;
mov r3_t L0xf6ffd4f2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4f8; Value = 0x01adfc30; PC = 0x69340 *)
mov r4_b L0xf6ffd4f8;
mov r4_t L0xf6ffd4fa;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd500; Value = 0x008504ba; PC = 0x69344 *)
mov r5_b L0xf6ffd500;
mov r5_t L0xf6ffd502;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd508; Value = 0xfc9bf773; PC = 0x69348 *)
mov r6_b L0xf6ffd508;
mov r6_t L0xf6ffd50a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4f8; PC = 0x69528 *)
mov L0xf6ffd4f8 r4_b;
mov L0xf6ffd4fa r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd500; PC = 0x69532 *)
mov L0xf6ffd500 r5_b;
mov L0xf6ffd502 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd508; PC = 0x69536 *)
mov L0xf6ffd508 r6_b;
mov L0xf6ffd50a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4f0; PC = 0x69540 *)
mov L0xf6ffd4f0 r3_b;
mov L0xf6ffd4f2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd4f4; Value = 0x08e0fa16; PC = 0x69544 *)
mov r3_b L0xf6ffd4f4;
mov r3_t L0xf6ffd4f6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd4fc; Value = 0xf8e8fdce; PC = 0x69548 *)
mov r4_b L0xf6ffd4fc;
mov r4_t L0xf6ffd4fe;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd504; Value = 0x0007f447; PC = 0x69552 *)
mov r5_b L0xf6ffd504;
mov r5_t L0xf6ffd506;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd50c; Value = 0xfb99f91c; PC = 0x69556 *)
mov r6_b L0xf6ffd50c;
mov r6_t L0xf6ffd50e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd4fc; PC = 0x69736 *)
mov L0xf6ffd4fc r4_b;
mov L0xf6ffd4fe r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd504; PC = 0x69740 *)
mov L0xf6ffd504 r5_b;
mov L0xf6ffd506 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd50c; PC = 0x69744 *)
mov L0xf6ffd50c r6_b;
mov L0xf6ffd50e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd4f4; PC = 0x69748 *)
mov L0xf6ffd4f4 r3_b;
mov L0xf6ffd4f6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2f6; Value = 0x020409c4; PC = 0x69328 *)
mov r11_b L0x5b2f6;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2f8; Value = 0x0cf90204; PC = 0x69332 *)
mov r7_b L0x5b2f8;
mov r7_t L0x5b2fa;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd510; Value = 0x0c6ffb7b; PC = 0x69336 *)
mov r3_b L0xf6ffd510;
mov r3_t L0xf6ffd512;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd518; Value = 0x090f0526; PC = 0x69340 *)
mov r4_b L0xf6ffd518;
mov r4_t L0xf6ffd51a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd520; Value = 0x0f6bfd02; PC = 0x69344 *)
mov r5_b L0xf6ffd520;
mov r5_t L0xf6ffd522;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd528; Value = 0x0ad9fa69; PC = 0x69348 *)
mov r6_b L0xf6ffd528;
mov r6_t L0xf6ffd52a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd518; PC = 0x69528 *)
mov L0xf6ffd518 r4_b;
mov L0xf6ffd51a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd520; PC = 0x69532 *)
mov L0xf6ffd520 r5_b;
mov L0xf6ffd522 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd528; PC = 0x69536 *)
mov L0xf6ffd528 r6_b;
mov L0xf6ffd52a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd510; PC = 0x69540 *)
mov L0xf6ffd510 r3_b;
mov L0xf6ffd512 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd514; Value = 0xfc41f67c; PC = 0x69544 *)
mov r3_b L0xf6ffd514;
mov r3_t L0xf6ffd516;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd51c; Value = 0xfe300756; PC = 0x69548 *)
mov r4_b L0xf6ffd51c;
mov r4_t L0xf6ffd51e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd524; Value = 0x0267eef3; PC = 0x69552 *)
mov r5_b L0xf6ffd524;
mov r5_t L0xf6ffd526;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd52c; Value = 0xff7f024f; PC = 0x69556 *)
mov r6_b L0xf6ffd52c;
mov r6_t L0xf6ffd52e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd51c; PC = 0x69736 *)
mov L0xf6ffd51c r4_b;
mov L0xf6ffd51e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd524; PC = 0x69740 *)
mov L0xf6ffd524 r5_b;
mov L0xf6ffd526 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd52c; PC = 0x69744 *)
mov L0xf6ffd52c r6_b;
mov L0xf6ffd52e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd514; PC = 0x69748 *)
mov L0xf6ffd514 r3_b;
mov L0xf6ffd516 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b2fc; Value = 0x0bc105b2; PC = 0x69328 *)
mov r11_b L0x5b2fc;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b2fe; Value = 0x0a670bc1; PC = 0x69332 *)
mov r7_b L0x5b2fe;
mov r7_t L0x5b300;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd530; Value = 0x068bf86b; PC = 0x69336 *)
mov r3_b L0xf6ffd530;
mov r3_t L0xf6ffd532;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd538; Value = 0x088ff8aa; PC = 0x69340 *)
mov r4_b L0xf6ffd538;
mov r4_t L0xf6ffd53a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd540; Value = 0x029b0842; PC = 0x69344 *)
mov r5_b L0xf6ffd540;
mov r5_t L0xf6ffd542;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd548; Value = 0x06fdff47; PC = 0x69348 *)
mov r6_b L0xf6ffd548;
mov r6_t L0xf6ffd54a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd538; PC = 0x69528 *)
mov L0xf6ffd538 r4_b;
mov L0xf6ffd53a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd540; PC = 0x69532 *)
mov L0xf6ffd540 r5_b;
mov L0xf6ffd542 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd548; PC = 0x69536 *)
mov L0xf6ffd548 r6_b;
mov L0xf6ffd54a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd530; PC = 0x69540 *)
mov L0xf6ffd530 r3_b;
mov L0xf6ffd532 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd534; Value = 0xfbf3f90c; PC = 0x69544 *)
mov r3_b L0xf6ffd534;
mov r3_t L0xf6ffd536;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd53c; Value = 0x06640a0a; PC = 0x69548 *)
mov r4_b L0xf6ffd53c;
mov r4_t L0xf6ffd53e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd544; Value = 0x029ff95d; PC = 0x69552 *)
mov r5_b L0xf6ffd544;
mov r5_t L0xf6ffd546;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd54c; Value = 0x022ffc4d; PC = 0x69556 *)
mov r6_b L0xf6ffd54c;
mov r6_t L0xf6ffd54e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd53c; PC = 0x69736 *)
mov L0xf6ffd53c r4_b;
mov L0xf6ffd53e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd544; PC = 0x69740 *)
mov L0xf6ffd544 r5_b;
mov L0xf6ffd546 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd54c; PC = 0x69744 *)
mov L0xf6ffd54c r6_b;
mov L0xf6ffd54e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd534; PC = 0x69748 *)
mov L0xf6ffd534 r3_b;
mov L0xf6ffd536 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b302; Value = 0x06af06bf; PC = 0x69328 *)
mov r11_b L0x5b302;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b304; Value = 0x087706af; PC = 0x69332 *)
mov r7_b L0x5b304;
mov r7_t L0x5b306;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd550; Value = 0x061ef43e; PC = 0x69336 *)
mov r3_b L0xf6ffd550;
mov r3_t L0xf6ffd552;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd558; Value = 0xfb3e0387; PC = 0x69340 *)
mov r4_b L0xf6ffd558;
mov r4_t L0xf6ffd55a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd560; Value = 0xff97ff61; PC = 0x69344 *)
mov r5_b L0xf6ffd560;
mov r5_t L0xf6ffd562;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd568; Value = 0xfb290369; PC = 0x69348 *)
mov r6_b L0xf6ffd568;
mov r6_t L0xf6ffd56a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd558; PC = 0x69528 *)
mov L0xf6ffd558 r4_b;
mov L0xf6ffd55a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd560; PC = 0x69532 *)
mov L0xf6ffd560 r5_b;
mov L0xf6ffd562 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd568; PC = 0x69536 *)
mov L0xf6ffd568 r6_b;
mov L0xf6ffd56a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd550; PC = 0x69540 *)
mov L0xf6ffd550 r3_b;
mov L0xf6ffd552 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd554; Value = 0x0152fb42; PC = 0x69544 *)
mov r3_b L0xf6ffd554;
mov r3_t L0xf6ffd556;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd55c; Value = 0x02fd02fe; PC = 0x69548 *)
mov r4_b L0xf6ffd55c;
mov r4_t L0xf6ffd55e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd564; Value = 0x01760384; PC = 0x69552 *)
mov r5_b L0xf6ffd564;
mov r5_t L0xf6ffd566;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd56c; Value = 0x022f009d; PC = 0x69556 *)
mov r6_b L0xf6ffd56c;
mov r6_t L0xf6ffd56e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd55c; PC = 0x69736 *)
mov L0xf6ffd55c r4_b;
mov L0xf6ffd55e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd564; PC = 0x69740 *)
mov L0xf6ffd564 r5_b;
mov L0xf6ffd566 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd56c; PC = 0x69744 *)
mov L0xf6ffd56c r6_b;
mov L0xf6ffd56e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd554; PC = 0x69748 *)
mov L0xf6ffd554 r3_b;
mov L0xf6ffd556 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b308; Value = 0x007e0c7f; PC = 0x69328 *)
mov r11_b L0x5b308;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b30a; Value = 0x05bd007e; PC = 0x69332 *)
mov r7_b L0x5b30a;
mov r7_t L0x5b30c;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd570; Value = 0x0cdcf320; PC = 0x69336 *)
mov r3_b L0xf6ffd570;
mov r3_t L0xf6ffd572;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd578; Value = 0xfd7c0b01; PC = 0x69340 *)
mov r4_b L0xf6ffd578;
mov r4_t L0xf6ffd57a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd580; Value = 0xfcf3f95b; PC = 0x69344 *)
mov r5_b L0xf6ffd580;
mov r5_t L0xf6ffd582;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd588; Value = 0xfeb1000f; PC = 0x69348 *)
mov r6_b L0xf6ffd588;
mov r6_t L0xf6ffd58a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd578; PC = 0x69528 *)
mov L0xf6ffd578 r4_b;
mov L0xf6ffd57a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd580; PC = 0x69532 *)
mov L0xf6ffd580 r5_b;
mov L0xf6ffd582 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd588; PC = 0x69536 *)
mov L0xf6ffd588 r6_b;
mov L0xf6ffd58a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd570; PC = 0x69540 *)
mov L0xf6ffd570 r3_b;
mov L0xf6ffd572 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd574; Value = 0xfd6efb9a; PC = 0x69544 *)
mov r3_b L0xf6ffd574;
mov r3_t L0xf6ffd576;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd57c; Value = 0xf8770542; PC = 0x69548 *)
mov r4_b L0xf6ffd57c;
mov r4_t L0xf6ffd57e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd584; Value = 0x0e4cfb2c; PC = 0x69552 *)
mov r5_b L0xf6ffd584;
mov r5_t L0xf6ffd586;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd58c; Value = 0x08730167; PC = 0x69556 *)
mov r6_b L0xf6ffd58c;
mov r6_t L0xf6ffd58e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd57c; PC = 0x69736 *)
mov L0xf6ffd57c r4_b;
mov L0xf6ffd57e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd584; PC = 0x69740 *)
mov L0xf6ffd584 r5_b;
mov L0xf6ffd586 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd58c; PC = 0x69744 *)
mov L0xf6ffd58c r6_b;
mov L0xf6ffd58e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd574; PC = 0x69748 *)
mov L0xf6ffd574 r3_b;
mov L0xf6ffd576 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b30e; Value = 0x09ac0a58; PC = 0x69328 *)
mov r11_b L0x5b30e;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b310; Value = 0x0ca709ac; PC = 0x69332 *)
mov r7_b L0x5b310;
mov r7_t L0x5b312;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd590; Value = 0xf2820bd8; PC = 0x69336 *)
mov r3_b L0xf6ffd590;
mov r3_t L0xf6ffd592;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd598; Value = 0xf8e6f50d; PC = 0x69340 *)
mov r4_b L0xf6ffd598;
mov r4_t L0xf6ffd59a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5a0; Value = 0xedca03b0; PC = 0x69344 *)
mov r5_b L0xf6ffd5a0;
mov r5_t L0xf6ffd5a2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5a8; Value = 0xfedd029a; PC = 0x69348 *)
mov r6_b L0xf6ffd5a8;
mov r6_t L0xf6ffd5aa;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd598; PC = 0x69528 *)
mov L0xf6ffd598 r4_b;
mov L0xf6ffd59a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5a0; PC = 0x69532 *)
mov L0xf6ffd5a0 r5_b;
mov L0xf6ffd5a2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5a8; PC = 0x69536 *)
mov L0xf6ffd5a8 r6_b;
mov L0xf6ffd5aa r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd590; PC = 0x69540 *)
mov L0xf6ffd590 r3_b;
mov L0xf6ffd592 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd594; Value = 0x006309ff; PC = 0x69544 *)
mov r3_b L0xf6ffd594;
mov r3_t L0xf6ffd596;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd59c; Value = 0xff17f444; PC = 0x69548 *)
mov r4_b L0xf6ffd59c;
mov r4_t L0xf6ffd59e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5a4; Value = 0x000e0377; PC = 0x69552 *)
mov r5_b L0xf6ffd5a4;
mov r5_t L0xf6ffd5a6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5ac; Value = 0xf92afb1e; PC = 0x69556 *)
mov r6_b L0xf6ffd5ac;
mov r6_t L0xf6ffd5ae;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd59c; PC = 0x69736 *)
mov L0xf6ffd59c r4_b;
mov L0xf6ffd59e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5a4; PC = 0x69740 *)
mov L0xf6ffd5a4 r5_b;
mov L0xf6ffd5a6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5ac; PC = 0x69744 *)
mov L0xf6ffd5ac r6_b;
mov L0xf6ffd5ae r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd594; PC = 0x69748 *)
mov L0xf6ffd594 r3_b;
mov L0xf6ffd596 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b314; Value = 0x0bf203f9; PC = 0x69328 *)
mov r11_b L0x5b314;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b316; Value = 0x033e0bf2; PC = 0x69332 *)
mov r7_b L0x5b316;
mov r7_t L0x5b318;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5b0; Value = 0xf4fa0738; PC = 0x69336 *)
mov r3_b L0xf6ffd5b0;
mov r3_t L0xf6ffd5b2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5b8; Value = 0xfe4c009f; PC = 0x69340 *)
mov r4_b L0xf6ffd5b8;
mov r4_t L0xf6ffd5ba;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5c0; Value = 0xf0d80398; PC = 0x69344 *)
mov r5_b L0xf6ffd5c0;
mov r5_t L0xf6ffd5c2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5c8; Value = 0xf4d309e0; PC = 0x69348 *)
mov r6_b L0xf6ffd5c8;
mov r6_t L0xf6ffd5ca;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5b8; PC = 0x69528 *)
mov L0xf6ffd5b8 r4_b;
mov L0xf6ffd5ba r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5c0; PC = 0x69532 *)
mov L0xf6ffd5c0 r5_b;
mov L0xf6ffd5c2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5c8; PC = 0x69536 *)
mov L0xf6ffd5c8 r6_b;
mov L0xf6ffd5ca r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5b0; PC = 0x69540 *)
mov L0xf6ffd5b0 r3_b;
mov L0xf6ffd5b2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5b4; Value = 0xfd9b14cf; PC = 0x69544 *)
mov r3_b L0xf6ffd5b4;
mov r3_t L0xf6ffd5b6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5bc; Value = 0x015ff9d4; PC = 0x69548 *)
mov r4_b L0xf6ffd5bc;
mov r4_t L0xf6ffd5be;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5c4; Value = 0x0cd00df5; PC = 0x69552 *)
mov r5_b L0xf6ffd5c4;
mov r5_t L0xf6ffd5c6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5cc; Value = 0xf668f936; PC = 0x69556 *)
mov r6_b L0xf6ffd5cc;
mov r6_t L0xf6ffd5ce;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5bc; PC = 0x69736 *)
mov L0xf6ffd5bc r4_b;
mov L0xf6ffd5be r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5c4; PC = 0x69740 *)
mov L0xf6ffd5c4 r5_b;
mov L0xf6ffd5c6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5cc; PC = 0x69744 *)
mov L0xf6ffd5cc r6_b;
mov L0xf6ffd5ce r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5b4; PC = 0x69748 *)
mov L0xf6ffd5b4 r3_b;
mov L0xf6ffd5b6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b31a; Value = 0x006b02dc; PC = 0x69328 *)
mov r11_b L0x5b31a;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b31c; Value = 0x0774006b; PC = 0x69332 *)
mov r7_b L0x5b31c;
mov r7_t L0x5b31e;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5d0; Value = 0xef9c05b6; PC = 0x69336 *)
mov r3_b L0xf6ffd5d0;
mov r3_t L0xf6ffd5d2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5d8; Value = 0x023902b7; PC = 0x69340 *)
mov r4_b L0xf6ffd5d8;
mov r4_t L0xf6ffd5da;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5e0; Value = 0xf64ffddc; PC = 0x69344 *)
mov r5_b L0xf6ffd5e0;
mov r5_t L0xf6ffd5e2;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5e8; Value = 0x08481546; PC = 0x69348 *)
mov r6_b L0xf6ffd5e8;
mov r6_t L0xf6ffd5ea;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5d8; PC = 0x69528 *)
mov L0xf6ffd5d8 r4_b;
mov L0xf6ffd5da r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5e0; PC = 0x69532 *)
mov L0xf6ffd5e0 r5_b;
mov L0xf6ffd5e2 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5e8; PC = 0x69536 *)
mov L0xf6ffd5e8 r6_b;
mov L0xf6ffd5ea r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5d0; PC = 0x69540 *)
mov L0xf6ffd5d0 r3_b;
mov L0xf6ffd5d2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5d4; Value = 0xf81800a7; PC = 0x69544 *)
mov r3_b L0xf6ffd5d4;
mov r3_t L0xf6ffd5d6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5dc; Value = 0x002ef7bf; PC = 0x69548 *)
mov r4_b L0xf6ffd5dc;
mov r4_t L0xf6ffd5de;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd5e4; Value = 0xfc01021a; PC = 0x69552 *)
mov r5_b L0xf6ffd5e4;
mov r5_t L0xf6ffd5e6;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd5ec; Value = 0x00f9fa34; PC = 0x69556 *)
mov r6_b L0xf6ffd5ec;
mov r6_t L0xf6ffd5ee;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5dc; PC = 0x69736 *)
mov L0xf6ffd5dc r4_b;
mov L0xf6ffd5de r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd5e4; PC = 0x69740 *)
mov L0xf6ffd5e4 r5_b;
mov L0xf6ffd5e6 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd5ec; PC = 0x69744 *)
mov L0xf6ffd5ec r6_b;
mov L0xf6ffd5ee r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5d4; PC = 0x69748 *)
mov L0xf6ffd5d4 r3_b;
mov L0xf6ffd5d6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b320; Value = 0x0c0a0260; PC = 0x69328 *)
mov r11_b L0x5b320;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b322; Value = 0x094a0c0a; PC = 0x69332 *)
mov r7_b L0x5b322;
mov r7_t L0x5b324;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5f0; Value = 0xf7e000d2; PC = 0x69336 *)
mov r3_b L0xf6ffd5f0;
mov r3_t L0xf6ffd5f2;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5f8; Value = 0xfc4dfb4d; PC = 0x69340 *)
mov r4_b L0xf6ffd5f8;
mov r4_t L0xf6ffd5fa;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd600; Value = 0xfb4bfce4; PC = 0x69344 *)
mov r5_b L0xf6ffd600;
mov r5_t L0xf6ffd602;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd608; Value = 0x03640d68; PC = 0x69348 *)
mov r6_b L0xf6ffd608;
mov r6_t L0xf6ffd60a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5f8; PC = 0x69528 *)
mov L0xf6ffd5f8 r4_b;
mov L0xf6ffd5fa r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd600; PC = 0x69532 *)
mov L0xf6ffd600 r5_b;
mov L0xf6ffd602 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd608; PC = 0x69536 *)
mov L0xf6ffd608 r6_b;
mov L0xf6ffd60a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5f0; PC = 0x69540 *)
mov L0xf6ffd5f0 r3_b;
mov L0xf6ffd5f2 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd5f4; Value = 0xfcd60543; PC = 0x69544 *)
mov r3_b L0xf6ffd5f4;
mov r3_t L0xf6ffd5f6;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd5fc; Value = 0xff64f575; PC = 0x69548 *)
mov r4_b L0xf6ffd5fc;
mov r4_t L0xf6ffd5fe;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd604; Value = 0x039d057a; PC = 0x69552 *)
mov r5_b L0xf6ffd604;
mov r5_t L0xf6ffd606;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd60c; Value = 0x031d05c4; PC = 0x69556 *)
mov r6_b L0xf6ffd60c;
mov r6_t L0xf6ffd60e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd5fc; PC = 0x69736 *)
mov L0xf6ffd5fc r4_b;
mov L0xf6ffd5fe r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd604; PC = 0x69740 *)
mov L0xf6ffd604 r5_b;
mov L0xf6ffd606 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd60c; PC = 0x69744 *)
mov L0xf6ffd60c r6_b;
mov L0xf6ffd60e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd5f4; PC = 0x69748 *)
mov L0xf6ffd5f4 r3_b;
mov L0xf6ffd5f6 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b326; Value = 0x0b7306fb; PC = 0x69328 *)
mov r11_b L0x5b326;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b328; Value = 0x03c10b73; PC = 0x69332 *)
mov r7_b L0x5b328;
mov r7_t L0x5b32a;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd610; Value = 0x0199084a; PC = 0x69336 *)
mov r3_b L0xf6ffd610;
mov r3_t L0xf6ffd612;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd618; Value = 0x0a750047; PC = 0x69340 *)
mov r4_b L0xf6ffd618;
mov r4_t L0xf6ffd61a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd620; Value = 0xfb0dfec1; PC = 0x69344 *)
mov r5_b L0xf6ffd620;
mov r5_t L0xf6ffd622;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd628; Value = 0x019e03c8; PC = 0x69348 *)
mov r6_b L0xf6ffd628;
mov r6_t L0xf6ffd62a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd618; PC = 0x69528 *)
mov L0xf6ffd618 r4_b;
mov L0xf6ffd61a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd620; PC = 0x69532 *)
mov L0xf6ffd620 r5_b;
mov L0xf6ffd622 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd628; PC = 0x69536 *)
mov L0xf6ffd628 r6_b;
mov L0xf6ffd62a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd610; PC = 0x69540 *)
mov L0xf6ffd610 r3_b;
mov L0xf6ffd612 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd614; Value = 0x040f04e3; PC = 0x69544 *)
mov r3_b L0xf6ffd614;
mov r3_t L0xf6ffd616;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd61c; Value = 0x0364fb92; PC = 0x69548 *)
mov r4_b L0xf6ffd61c;
mov r4_t L0xf6ffd61e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd624; Value = 0x066f008f; PC = 0x69552 *)
mov r5_b L0xf6ffd624;
mov r5_t L0xf6ffd626;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd62c; Value = 0x03e90b05; PC = 0x69556 *)
mov r6_b L0xf6ffd62c;
mov r6_t L0xf6ffd62e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd61c; PC = 0x69736 *)
mov L0xf6ffd61c r4_b;
mov L0xf6ffd61e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd624; PC = 0x69740 *)
mov L0xf6ffd624 r5_b;
mov L0xf6ffd626 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd62c; PC = 0x69744 *)
mov L0xf6ffd62c r6_b;
mov L0xf6ffd62e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd614; PC = 0x69748 *)
mov L0xf6ffd614 r3_b;
mov L0xf6ffd616 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b32c; Value = 0x071d019b; PC = 0x69328 *)
mov r11_b L0x5b32c;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b32e; Value = 0x0a2c071d; PC = 0x69332 *)
mov r7_b L0x5b32e;
mov r7_t L0x5b330;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd630; Value = 0xfdeb02a0; PC = 0x69336 *)
mov r3_b L0xf6ffd630;
mov r3_t L0xf6ffd632;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd638; Value = 0x085d0b45; PC = 0x69340 *)
mov r4_b L0xf6ffd638;
mov r4_t L0xf6ffd63a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd640; Value = 0x01050101; PC = 0x69344 *)
mov r5_b L0xf6ffd640;
mov r5_t L0xf6ffd642;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd648; Value = 0x0896021c; PC = 0x69348 *)
mov r6_b L0xf6ffd648;
mov r6_t L0xf6ffd64a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd638; PC = 0x69528 *)
mov L0xf6ffd638 r4_b;
mov L0xf6ffd63a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd640; PC = 0x69532 *)
mov L0xf6ffd640 r5_b;
mov L0xf6ffd642 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd648; PC = 0x69536 *)
mov L0xf6ffd648 r6_b;
mov L0xf6ffd64a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd630; PC = 0x69540 *)
mov L0xf6ffd630 r3_b;
mov L0xf6ffd632 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd634; Value = 0x078d0169; PC = 0x69544 *)
mov r3_b L0xf6ffd634;
mov r3_t L0xf6ffd636;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd63c; Value = 0x06ea0812; PC = 0x69548 *)
mov r4_b L0xf6ffd63c;
mov r4_t L0xf6ffd63e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd644; Value = 0x008b0693; PC = 0x69552 *)
mov r5_b L0xf6ffd644;
mov r5_t L0xf6ffd646;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd64c; Value = 0x03d10661; PC = 0x69556 *)
mov r6_b L0xf6ffd64c;
mov r6_t L0xf6ffd64e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd63c; PC = 0x69736 *)
mov L0xf6ffd63c r4_b;
mov L0xf6ffd63e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd644; PC = 0x69740 *)
mov L0xf6ffd644 r5_b;
mov L0xf6ffd646 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd64c; PC = 0x69744 *)
mov L0xf6ffd64c r6_b;
mov L0xf6ffd64e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd634; PC = 0x69748 *)
mov L0xf6ffd634 r3_b;
mov L0xf6ffd636 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b332; Value = 0x01c00c34; PC = 0x69328 *)
mov r11_b L0x5b332;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b334; Value = 0x08d801c0; PC = 0x69332 *)
mov r7_b L0x5b334;
mov r7_t L0x5b336;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd650; Value = 0x00600c11; PC = 0x69336 *)
mov r3_b L0xf6ffd650;
mov r3_t L0xf6ffd652;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd658; Value = 0xfb93056a; PC = 0x69340 *)
mov r4_b L0xf6ffd658;
mov r4_t L0xf6ffd65a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd660; Value = 0xfb22ff14; PC = 0x69344 *)
mov r5_b L0xf6ffd660;
mov r5_t L0xf6ffd662;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd668; Value = 0xfc3ffc24; PC = 0x69348 *)
mov r6_b L0xf6ffd668;
mov r6_t L0xf6ffd66a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd658; PC = 0x69528 *)
mov L0xf6ffd658 r4_b;
mov L0xf6ffd65a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd660; PC = 0x69532 *)
mov L0xf6ffd660 r5_b;
mov L0xf6ffd662 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd668; PC = 0x69536 *)
mov L0xf6ffd668 r6_b;
mov L0xf6ffd66a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd650; PC = 0x69540 *)
mov L0xf6ffd650 r3_b;
mov L0xf6ffd652 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd654; Value = 0x04a2fe51; PC = 0x69544 *)
mov r3_b L0xf6ffd654;
mov r3_t L0xf6ffd656;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd65c; Value = 0xf509fc51; PC = 0x69548 *)
mov r4_b L0xf6ffd65c;
mov r4_t L0xf6ffd65e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd664; Value = 0xf4b904d0; PC = 0x69552 *)
mov r5_b L0xf6ffd664;
mov r5_t L0xf6ffd666;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd66c; Value = 0x0009feaf; PC = 0x69556 *)
mov r6_b L0xf6ffd66c;
mov r6_t L0xf6ffd66e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd65c; PC = 0x69736 *)
mov L0xf6ffd65c r4_b;
mov L0xf6ffd65e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd664; PC = 0x69740 *)
mov L0xf6ffd664 r5_b;
mov L0xf6ffd666 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd66c; PC = 0x69744 *)
mov L0xf6ffd66c r6_b;
mov L0xf6ffd66e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd654; PC = 0x69748 *)
mov L0xf6ffd654 r3_b;
mov L0xf6ffd656 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* ldrh.w	r11, [r1], #2                            #! EA = L0x5b338; Value = 0x02a506de; PC = 0x69328 *)
mov r11_b L0x5b338;
(* ldr.w	r7, [r1], #4                              #! EA = L0x5b33a; Value = 0x080602a5; PC = 0x69332 *)
mov r7_b L0x5b33a;
mov r7_t L0x5b33c;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd670; Value = 0xff24015d; PC = 0x69336 *)
mov r3_b L0xf6ffd670;
mov r3_t L0xf6ffd672;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd678; Value = 0xfffbfb62; PC = 0x69340 *)
mov r4_b L0xf6ffd678;
mov r4_t L0xf6ffd67a;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd680; Value = 0x06980332; PC = 0x69344 *)
mov r5_b L0xf6ffd680;
mov r5_t L0xf6ffd682;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd688; Value = 0xfa2900d0; PC = 0x69348 *)
mov r6_b L0xf6ffd688;
mov r6_t L0xf6ffd68a;
(* smulbb	r10, r5, r11                             #! PC = 0x69352 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69356 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69360 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69364 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69368 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69372 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69376 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69380 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69384 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69388 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69392 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69396 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69400 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69404 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69408 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69412 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69416 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69420 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69424 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69428 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69432 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69436 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69440 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69444 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69448 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69452 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69456 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69460 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69464 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69468 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69472 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69476 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69480 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69484 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69488 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69492 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69496 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69500 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69504 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69508 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69512 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69516 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69520 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69524 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd678; PC = 0x69528 *)
mov L0xf6ffd678 r4_b;
mov L0xf6ffd67a r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd680; PC = 0x69532 *)
mov L0xf6ffd680 r5_b;
mov L0xf6ffd682 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd688; PC = 0x69536 *)
mov L0xf6ffd688 r6_b;
mov L0xf6ffd68a r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd670; PC = 0x69540 *)
mov L0xf6ffd670 r3_b;
mov L0xf6ffd672 r3_t;
(* ldr.w	r3, [r0]                                  #! EA = L0xf6ffd674; Value = 0xf8d608b3; PC = 0x69544 *)
mov r3_b L0xf6ffd674;
mov r3_t L0xf6ffd676;
(* ldr.w	r4, [r0, #8]                              #! EA = L0xf6ffd67c; Value = 0x00b1f2bf; PC = 0x69548 *)
mov r4_b L0xf6ffd67c;
mov r4_t L0xf6ffd67e;
(* ldr.w	r5, [r0, #16]                             #! EA = L0xf6ffd684; Value = 0xfbe10d0e; PC = 0x69552 *)
mov r5_b L0xf6ffd684;
mov r5_t L0xf6ffd686;
(* ldr.w	r6, [r0, #24]                             #! EA = L0xf6ffd68c; Value = 0x048dfb9f; PC = 0x69556 *)
mov r6_b L0xf6ffd68c;
mov r6_t L0xf6ffd68e;
(* smulbb	r10, r5, r11                             #! PC = 0x69560 *)
vpc r5_bb@sint16 r5_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r5_bb r11_bb;
(* smultb	r5, r5, r11                              #! PC = 0x69564 *)
vpc r5_tt@sint16 r5_t;
vpc r11_bb@sint16 r11_b;
smull r5_t r5_b r5_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69568 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69572 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69576 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r5, r12                             #! PC = 0x69580 *)
vpc r5_bb@sint16 r5_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r5_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69584 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r5, r10                             #! PC = 0x69588 *)
vpc r5_bb@uint16 r5_b;
usub r10_b r5_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r5_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69592 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r5, r3, r9                               #! PC = 0x69596 *)
vpc r3_bb@uint16 r3_b;
usub r5_b r3_bb r9_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r5_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69600 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbb	r10, r6, r11                             #! PC = 0x69604 *)
vpc r6_bb@sint16 r6_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r6_bb r11_bb;
(* smultb	r6, r6, r11                              #! PC = 0x69608 *)
vpc r6_tt@sint16 r6_t;
vpc r11_bb@sint16 r11_b;
smull r6_t r6_b r6_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69612 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69616 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69620 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69624 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69628 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69632 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69636 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r4, r9                               #! PC = 0x69640 *)
vpc r4_bb@uint16 r4_b;
usub r6_b r4_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r4_tt r9_tt;
(* uadd16	r4, r4, r9                               #! PC = 0x69644 *)
vpc r4_bb@uint16 r4_b;
uadd r4_b r4_bb r9_b;
vpc r4_tt@uint16 r4_t;
vpc r9_tt@uint16 r9_t;
uadd r4_t r4_tt r9_tt;
(* smulbb	r10, r4, r7                              #! PC = 0x69648 *)
vpc r4_bb@sint16 r4_b;
vpc r7_bb@sint16 r7_b;
smull r10_t r10_b r4_bb r7_bb;
(* smultb	r4, r4, r7                               #! PC = 0x69652 *)
vpc r4_tt@sint16 r4_t;
vpc r7_bb@sint16 r7_b;
smull r4_t r4_b r4_tt r7_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69656 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69660 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69664 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69668 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69672 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69676 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69680 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69684 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69688 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r7                              #! PC = 0x69692 *)
vpc r6_bb@sint16 r6_b;
vpc r7_tt@sint16 r7_t;
smull r10_t r10_b r6_bb r7_tt;
(* smultt	r6, r6, r7                               #! PC = 0x69696 *)
vpc r6_tt@sint16 r6_t;
vpc r7_tt@sint16 r7_t;
smull r6_t r6_b r6_tt r7_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69700 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69704 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69708 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69712 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69716 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69720 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69724 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69728 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69732 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* str.w	r4, [r0, #8]                              #! EA = L0xf6ffd67c; PC = 0x69736 *)
mov L0xf6ffd67c r4_b;
mov L0xf6ffd67e r4_t;
(* str.w	r5, [r0, #16]                             #! EA = L0xf6ffd684; PC = 0x69740 *)
mov L0xf6ffd684 r5_b;
mov L0xf6ffd686 r5_t;
(* str.w	r6, [r0, #24]                             #! EA = L0xf6ffd68c; PC = 0x69744 *)
mov L0xf6ffd68c r6_b;
mov L0xf6ffd68e r6_t;
(* str.w	r3, [r0], #4                              #! EA = L0xf6ffd674; PC = 0x69748 *)
mov L0xf6ffd674 r3_b;
mov L0xf6ffd676 r3_t;
(* #add.w	r0, r0, #24                               #! PC = 0x69752 *)
#add.w	%%r0, %%r0, #24                               #! 0x69752 = 0x69752;
(* subs.w	r2, r2, #1                               #! PC = 0x69756 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x10ed0 <ntt_fast+1184>                  #! PC = 0x69760 *)
#bne.w	0x10ed0 <ntt_fast+1184>                  #! 0x69760 = 0x69760;
(* sub.w	r0, r0, #512	; 0x200                      #! PC = 0x69764 *)
(* ### LAYER 1 (skip layer 0) *)
### LAYER 1 (skip layer 0);
(* mov.w	r2, #32                                   #! PC = 0x69768 *)
mov r2_t 0@sint16;
mov r2_b 32@uint16;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b33e; Value = 0x01ae08b2; PC = 0x69772 *)
mov r11_b L0x5b33e;
mov r11_t L0x5b340;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd490; Value = 0x0390fe9b; PC = 0x69776 *)
mov r3_b L0xf6ffd490;
mov r3_t L0xf6ffd492;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd494; Value = 0xfdde02e1; PC = 0x69778 *)
mov r4_b L0xf6ffd494;
mov r4_t L0xf6ffd496;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd498; Value = 0x05e8f8bd; PC = 0x69780 *)
mov r5_b L0xf6ffd498;
mov r5_t L0xf6ffd49a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd49c; Value = 0xf59a03f1; PC = 0x69782 *)
mov r6_b L0xf6ffd49c;
mov r6_t L0xf6ffd49e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd494; PC = 0x70000 *)
mov L0xf6ffd494 r4_b;
mov L0xf6ffd496 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd498; PC = 0x70004 *)
mov L0xf6ffd498 r5_b;
mov L0xf6ffd49a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd49c; PC = 0x70008 *)
mov L0xf6ffd49c r6_b;
mov L0xf6ffd49e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd490; PC = 0x70012 *)
mov L0xf6ffd490 r3_b;
mov L0xf6ffd492 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b342; Value = 0x034b022b; PC = 0x69772 *)
mov r11_b L0x5b342;
mov r11_t L0x5b344;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4a0; Value = 0x13430574; PC = 0x69776 *)
mov r3_b L0xf6ffd4a0;
mov r3_t L0xf6ffd4a2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4a4; Value = 0x034e0bbe; PC = 0x69778 *)
mov r4_b L0xf6ffd4a4;
mov r4_t L0xf6ffd4a6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4a8; Value = 0x09410880; PC = 0x69780 *)
mov r5_b L0xf6ffd4a8;
mov r5_t L0xf6ffd4aa;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4ac; Value = 0x078200e8; PC = 0x69782 *)
mov r6_b L0xf6ffd4ac;
mov r6_t L0xf6ffd4ae;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4a4; PC = 0x70000 *)
mov L0xf6ffd4a4 r4_b;
mov L0xf6ffd4a6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4a8; PC = 0x70004 *)
mov L0xf6ffd4a8 r5_b;
mov L0xf6ffd4aa r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4ac; PC = 0x70008 *)
mov L0xf6ffd4ac r6_b;
mov L0xf6ffd4ae r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4a0; PC = 0x70012 *)
mov L0xf6ffd4a0 r3_b;
mov L0xf6ffd4a2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b346; Value = 0x0367081e; PC = 0x69772 *)
mov r11_b L0x5b346;
mov r11_t L0x5b348;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4b0; Value = 0x0748ec3d; PC = 0x69776 *)
mov r3_b L0xf6ffd4b0;
mov r3_t L0xf6ffd4b2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4b4; Value = 0x060df829; PC = 0x69778 *)
mov r4_b L0xf6ffd4b4;
mov r4_t L0xf6ffd4b6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4b8; Value = 0xfe42f8c9; PC = 0x69780 *)
mov r5_b L0xf6ffd4b8;
mov r5_t L0xf6ffd4ba;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4bc; Value = 0x0aff024d; PC = 0x69782 *)
mov r6_b L0xf6ffd4bc;
mov r6_t L0xf6ffd4be;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4b4; PC = 0x70000 *)
mov L0xf6ffd4b4 r4_b;
mov L0xf6ffd4b6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4b8; PC = 0x70004 *)
mov L0xf6ffd4b8 r5_b;
mov L0xf6ffd4ba r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4bc; PC = 0x70008 *)
mov L0xf6ffd4bc r6_b;
mov L0xf6ffd4be r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4b0; PC = 0x70012 *)
mov L0xf6ffd4b0 r3_b;
mov L0xf6ffd4b2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b34a; Value = 0x0069060e; PC = 0x69772 *)
mov r11_b L0x5b34a;
mov r11_t L0x5b34c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4c0; Value = 0xf5dcf4be; PC = 0x69776 *)
mov r3_b L0xf6ffd4c0;
mov r3_t L0xf6ffd4c2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4c4; Value = 0x0397fd69; PC = 0x69778 *)
mov r4_b L0xf6ffd4c4;
mov r4_t L0xf6ffd4c6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4c8; Value = 0xf6b60140; PC = 0x69780 *)
mov r5_b L0xf6ffd4c8;
mov r5_t L0xf6ffd4ca;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4cc; Value = 0x0415f279; PC = 0x69782 *)
mov r6_b L0xf6ffd4cc;
mov r6_t L0xf6ffd4ce;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4c4; PC = 0x70000 *)
mov L0xf6ffd4c4 r4_b;
mov L0xf6ffd4c6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4c8; PC = 0x70004 *)
mov L0xf6ffd4c8 r5_b;
mov L0xf6ffd4ca r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4cc; PC = 0x70008 *)
mov L0xf6ffd4cc r6_b;
mov L0xf6ffd4ce r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4c0; PC = 0x70012 *)
mov L0xf6ffd4c0 r3_b;
mov L0xf6ffd4c2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b34e; Value = 0x024b01a6; PC = 0x69772 *)
mov r11_b L0x5b34e;
mov r11_t L0x5b350;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4d0; Value = 0x027af758; PC = 0x69776 *)
mov r3_b L0xf6ffd4d0;
mov r3_t L0xf6ffd4d2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4d4; Value = 0x05a3f0a1; PC = 0x69778 *)
mov r4_b L0xf6ffd4d4;
mov r4_t L0xf6ffd4d6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4d8; Value = 0x0282f966; PC = 0x69780 *)
mov r5_b L0xf6ffd4d8;
mov r5_t L0xf6ffd4da;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4dc; Value = 0xfad3e60d; PC = 0x69782 *)
mov r6_b L0xf6ffd4dc;
mov r6_t L0xf6ffd4de;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4d4; PC = 0x70000 *)
mov L0xf6ffd4d4 r4_b;
mov L0xf6ffd4d6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4d8; PC = 0x70004 *)
mov L0xf6ffd4d8 r5_b;
mov L0xf6ffd4da r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4dc; PC = 0x70008 *)
mov L0xf6ffd4dc r6_b;
mov L0xf6ffd4de r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4d0; PC = 0x70012 *)
mov L0xf6ffd4d0 r3_b;
mov L0xf6ffd4d2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b352; Value = 0x0c1600b1; PC = 0x69772 *)
mov r11_b L0x5b352;
mov r11_t L0x5b354;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4e0; Value = 0xf978001f; PC = 0x69776 *)
mov r3_b L0xf6ffd4e0;
mov r3_t L0xf6ffd4e2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4e4; Value = 0x01a5f542; PC = 0x69778 *)
mov r4_b L0xf6ffd4e4;
mov r4_t L0xf6ffd4e6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4e8; Value = 0x0000f80f; PC = 0x69780 *)
mov r5_b L0xf6ffd4e8;
mov r5_t L0xf6ffd4ea;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4ec; Value = 0xf7d5ec78; PC = 0x69782 *)
mov r6_b L0xf6ffd4ec;
mov r6_t L0xf6ffd4ee;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4e4; PC = 0x70000 *)
mov L0xf6ffd4e4 r4_b;
mov L0xf6ffd4e6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4e8; PC = 0x70004 *)
mov L0xf6ffd4e8 r5_b;
mov L0xf6ffd4ea r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4ec; PC = 0x70008 *)
mov L0xf6ffd4ec r6_b;
mov L0xf6ffd4ee r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4e0; PC = 0x70012 *)
mov L0xf6ffd4e0 r3_b;
mov L0xf6ffd4e2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b356; Value = 0x0b350bde; PC = 0x69772 *)
mov r11_b L0x5b356;
mov r11_t L0x5b358;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd4f0; Value = 0x037c068d; PC = 0x69776 *)
mov r3_b L0xf6ffd4f0;
mov r3_t L0xf6ffd4f2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd4f4; Value = 0x0646fa29; PC = 0x69778 *)
mov r4_b L0xf6ffd4f4;
mov r4_t L0xf6ffd4f6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd4f8; Value = 0x088806cd; PC = 0x69780 *)
mov r5_b L0xf6ffd4f8;
mov r5_t L0xf6ffd4fa;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd4fc; Value = 0x0e2c0521; PC = 0x69782 *)
mov r6_b L0xf6ffd4fc;
mov r6_t L0xf6ffd4fe;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd4f4; PC = 0x70000 *)
mov L0xf6ffd4f4 r4_b;
mov L0xf6ffd4f6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd4f8; PC = 0x70004 *)
mov L0xf6ffd4f8 r5_b;
mov L0xf6ffd4fa r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd4fc; PC = 0x70008 *)
mov L0xf6ffd4fc r6_b;
mov L0xf6ffd4fe r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd4f0; PC = 0x70012 *)
mov L0xf6ffd4f0 r3_b;
mov L0xf6ffd4f2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b35a; Value = 0x06750626; PC = 0x69772 *)
mov r11_b L0x5b35a;
mov r11_t L0x5b35c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd500; Value = 0x08ebf571; PC = 0x69776 *)
mov r3_b L0xf6ffd500;
mov r3_t L0xf6ffd502;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd504; Value = 0x081ff924; PC = 0x69778 *)
mov r4_b L0xf6ffd504;
mov r4_t L0xf6ffd506;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd508; Value = 0x04b5fea9; PC = 0x69780 *)
mov r5_b L0xf6ffd508;
mov r5_t L0xf6ffd50a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd50c; Value = 0x06efefea; PC = 0x69782 *)
mov r6_b L0xf6ffd50c;
mov r6_t L0xf6ffd50e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd504; PC = 0x70000 *)
mov L0xf6ffd504 r4_b;
mov L0xf6ffd506 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd508; PC = 0x70004 *)
mov L0xf6ffd508 r5_b;
mov L0xf6ffd50a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd50c; PC = 0x70008 *)
mov L0xf6ffd50c r6_b;
mov L0xf6ffd50e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd500; PC = 0x70012 *)
mov L0xf6ffd500 r3_b;
mov L0xf6ffd502 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b35e; Value = 0x030a0c0b; PC = 0x69772 *)
mov r11_b L0x5b35e;
mov r11_t L0x5b360;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd510; Value = 0x0cd1fb60; PC = 0x69776 *)
mov r3_b L0xf6ffd510;
mov r3_t L0xf6ffd512;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd514; Value = 0xf288f614; PC = 0x69778 *)
mov r4_b L0xf6ffd514;
mov r4_t L0xf6ffd516;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd518; Value = 0x181bfea8; PC = 0x69780 *)
mov r5_b L0xf6ffd518;
mov r5_t L0xf6ffd51a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd51c; Value = 0xfea8f8bc; PC = 0x69782 *)
mov r6_b L0xf6ffd51c;
mov r6_t L0xf6ffd51e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd514; PC = 0x70000 *)
mov L0xf6ffd514 r4_b;
mov L0xf6ffd516 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd518; PC = 0x70004 *)
mov L0xf6ffd518 r5_b;
mov L0xf6ffd51a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd51c; PC = 0x70008 *)
mov L0xf6ffd51c r6_b;
mov L0xf6ffd51e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd510; PC = 0x70012 *)
mov L0xf6ffd510 r3_b;
mov L0xf6ffd512 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b362; Value = 0x0c6e0487; PC = 0x69772 *)
mov r11_b L0x5b362;
mov r11_t L0x5b364;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd520; Value = 0x04caf48a; PC = 0x69776 *)
mov r3_b L0xf6ffd520;
mov r3_t L0xf6ffd522;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd524; Value = 0xff5bf7c9; PC = 0x69778 *)
mov r4_b L0xf6ffd524;
mov r4_t L0xf6ffd526;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd528; Value = 0x0806ff5a; PC = 0x69780 *)
mov r5_b L0xf6ffd528;
mov r5_t L0xf6ffd52a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd52c; Value = 0x0079f357; PC = 0x69782 *)
mov r6_b L0xf6ffd52c;
mov r6_t L0xf6ffd52e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd524; PC = 0x70000 *)
mov L0xf6ffd524 r4_b;
mov L0xf6ffd526 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd528; PC = 0x70004 *)
mov L0xf6ffd528 r5_b;
mov L0xf6ffd52a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd52c; PC = 0x70008 *)
mov L0xf6ffd52c r6_b;
mov L0xf6ffd52e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd520; PC = 0x70012 *)
mov L0xf6ffd520 r3_b;
mov L0xf6ffd522 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b366; Value = 0x05cb09f8; PC = 0x69772 *)
mov r11_b L0x5b366;
mov r11_t L0x5b368;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd530; Value = 0x091eef9f; PC = 0x69776 *)
mov r3_b L0xf6ffd530;
mov r3_t L0xf6ffd532;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd534; Value = 0xfcfa00d0; PC = 0x69778 *)
mov r4_b L0xf6ffd534;
mov r4_t L0xf6ffd536;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd538; Value = 0x09b2f5cf; PC = 0x69780 *)
mov r5_b L0xf6ffd538;
mov r5_t L0xf6ffd53a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd53c; Value = 0x0266fc32; PC = 0x69782 *)
mov r6_b L0xf6ffd53c;
mov r6_t L0xf6ffd53e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd534; PC = 0x70000 *)
mov L0xf6ffd534 r4_b;
mov L0xf6ffd536 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd538; PC = 0x70004 *)
mov L0xf6ffd538 r5_b;
mov L0xf6ffd53a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd53c; PC = 0x70008 *)
mov L0xf6ffd53c r6_b;
mov L0xf6ffd53e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd530; PC = 0x70012 *)
mov L0xf6ffd530 r3_b;
mov L0xf6ffd532 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b36a; Value = 0x045f0aa7; PC = 0x69772 *)
mov r11_b L0x5b36a;
mov r11_t L0x5b36c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd540; Value = 0x082201c5; PC = 0x69776 *)
mov r3_b L0xf6ffd540;
mov r3_t L0xf6ffd542;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd544; Value = 0xf356f1cb; PC = 0x69778 *)
mov r4_b L0xf6ffd544;
mov r4_t L0xf6ffd546;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd548; Value = 0xff3afa79; PC = 0x69780 *)
mov r5_b L0xf6ffd548;
mov r5_t L0xf6ffd54a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd54c; Value = 0xfd16f563; PC = 0x69782 *)
mov r6_b L0xf6ffd54c;
mov r6_t L0xf6ffd54e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd544; PC = 0x70000 *)
mov L0xf6ffd544 r4_b;
mov L0xf6ffd546 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd548; PC = 0x70004 *)
mov L0xf6ffd548 r5_b;
mov L0xf6ffd54a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd54c; PC = 0x70008 *)
mov L0xf6ffd54c r6_b;
mov L0xf6ffd54e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd540; PC = 0x70012 *)
mov L0xf6ffd540 r3_b;
mov L0xf6ffd542 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b36e; Value = 0x028406cb; PC = 0x69772 *)
mov r11_b L0x5b36e;
mov r11_t L0x5b370;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd550; Value = 0x078af9ea; PC = 0x69776 *)
mov r3_b L0xf6ffd550;
mov r3_t L0xf6ffd552;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd554; Value = 0xfa70f168; PC = 0x69778 *)
mov r4_b L0xf6ffd554;
mov r4_t L0xf6ffd556;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd558; Value = 0x0dc0eee8; PC = 0x69780 *)
mov r5_b L0xf6ffd558;
mov r5_t L0xf6ffd55a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd55c; Value = 0xff3cfa60; PC = 0x69782 *)
mov r6_b L0xf6ffd55c;
mov r6_t L0xf6ffd55e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd554; PC = 0x70000 *)
mov L0xf6ffd554 r4_b;
mov L0xf6ffd556 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd558; PC = 0x70004 *)
mov L0xf6ffd558 r5_b;
mov L0xf6ffd55a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd55c; PC = 0x70008 *)
mov L0xf6ffd55c r6_b;
mov L0xf6ffd55e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd550; PC = 0x70012 *)
mov L0xf6ffd550 r3_b;
mov L0xf6ffd552 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b372; Value = 0x015d0999; PC = 0x69772 *)
mov r11_b L0x5b372;
mov r11_t L0x5b374;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd560; Value = 0xfe69f56a; PC = 0x69776 *)
mov r3_b L0xf6ffd560;
mov r3_t L0xf6ffd562;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd564; Value = 0x06a00635; PC = 0x69778 *)
mov r4_b L0xf6ffd564;
mov r4_t L0xf6ffd566;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd568; Value = 0x04c5f2bc; PC = 0x69780 *)
mov r5_b L0xf6ffd568;
mov r5_t L0xf6ffd56a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd56c; Value = 0x04fcfb0b; PC = 0x69782 *)
mov r6_b L0xf6ffd56c;
mov r6_t L0xf6ffd56e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd564; PC = 0x70000 *)
mov L0xf6ffd564 r4_b;
mov L0xf6ffd566 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd568; PC = 0x70004 *)
mov L0xf6ffd568 r5_b;
mov L0xf6ffd56a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd56c; PC = 0x70008 *)
mov L0xf6ffd56c r6_b;
mov L0xf6ffd56e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd560; PC = 0x70012 *)
mov L0xf6ffd560 r3_b;
mov L0xf6ffd562 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b376; Value = 0x014901a2; PC = 0x69772 *)
mov r11_b L0x5b376;
mov r11_t L0x5b378;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd570; Value = 0x0c35f5ab; PC = 0x69776 *)
mov r3_b L0xf6ffd570;
mov r3_t L0xf6ffd572;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd574; Value = 0x027dfca0; PC = 0x69778 *)
mov r4_b L0xf6ffd574;
mov r4_t L0xf6ffd576;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd578; Value = 0x1493ed95; PC = 0x69780 *)
mov r5_b L0xf6ffd578;
mov r5_t L0xf6ffd57a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd57c; Value = 0x0665fcaa; PC = 0x69782 *)
mov r6_b L0xf6ffd57c;
mov r6_t L0xf6ffd57e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd574; PC = 0x70000 *)
mov L0xf6ffd574 r4_b;
mov L0xf6ffd576 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd578; PC = 0x70004 *)
mov L0xf6ffd578 r5_b;
mov L0xf6ffd57a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd57c; PC = 0x70008 *)
mov L0xf6ffd57c r6_b;
mov L0xf6ffd57e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd570; PC = 0x70012 *)
mov L0xf6ffd570 r3_b;
mov L0xf6ffd572 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b37a; Value = 0x0cb60c65; PC = 0x69772 *)
mov r11_b L0x5b37a;
mov r11_t L0x5b37c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd580; Value = 0x0da4f9bc; PC = 0x69776 *)
mov r3_b L0xf6ffd580;
mov r3_t L0xf6ffd582;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd584; Value = 0xfb61fcb1; PC = 0x69778 *)
mov r4_b L0xf6ffd584;
mov r4_t L0xf6ffd586;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd588; Value = 0x0504ef84; PC = 0x69780 *)
mov r5_b L0xf6ffd588;
mov r5_t L0xf6ffd58a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd58c; Value = 0xf175f86d; PC = 0x69782 *)
mov r6_b L0xf6ffd58c;
mov r6_t L0xf6ffd58e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd584; PC = 0x70000 *)
mov L0xf6ffd584 r4_b;
mov L0xf6ffd586 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd588; PC = 0x70004 *)
mov L0xf6ffd588 r5_b;
mov L0xf6ffd58a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd58c; PC = 0x70008 *)
mov L0xf6ffd58c r6_b;
mov L0xf6ffd58e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd580; PC = 0x70012 *)
mov L0xf6ffd580 r3_b;
mov L0xf6ffd582 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b37e; Value = 0x04490331; PC = 0x69772 *)
mov r11_b L0x5b37e;
mov r11_t L0x5b380;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd590; Value = 0xf1b10f2a; PC = 0x69776 *)
mov r3_b L0xf6ffd590;
mov r3_t L0xf6ffd592;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd594; Value = 0x062c0891; PC = 0x69778 *)
mov r4_b L0xf6ffd594;
mov r4_t L0xf6ffd596;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd598; Value = 0xf355121e; PC = 0x69780 *)
mov r5_b L0xf6ffd598;
mov r5_t L0xf6ffd59a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd59c; Value = 0xfa860a31; PC = 0x69782 *)
mov r6_b L0xf6ffd59c;
mov r6_t L0xf6ffd59e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd594; PC = 0x70000 *)
mov L0xf6ffd594 r4_b;
mov L0xf6ffd596 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd598; PC = 0x70004 *)
mov L0xf6ffd598 r5_b;
mov L0xf6ffd59a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd59c; PC = 0x70008 *)
mov L0xf6ffd59c r6_b;
mov L0xf6ffd59e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd590; PC = 0x70012 *)
mov L0xf6ffd590 r3_b;
mov L0xf6ffd592 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b382; Value = 0x0262025b; PC = 0x69772 *)
mov r11_b L0x5b382;
mov r11_t L0x5b384;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5a0; Value = 0xef090470; PC = 0x69776 *)
mov r3_b L0xf6ffd5a0;
mov r3_t L0xf6ffd5a2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5a4; Value = 0xfd030d77; PC = 0x69778 *)
mov r4_b L0xf6ffd5a4;
mov r4_t L0xf6ffd5a6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5a8; Value = 0xf5f909a8; PC = 0x69780 *)
mov r5_b L0xf6ffd5a8;
mov r5_t L0xf6ffd5aa;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5ac; Value = 0x03d707c3; PC = 0x69782 *)
mov r6_b L0xf6ffd5ac;
mov r6_t L0xf6ffd5ae;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5a4; PC = 0x70000 *)
mov L0xf6ffd5a4 r4_b;
mov L0xf6ffd5a6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5a8; PC = 0x70004 *)
mov L0xf6ffd5a8 r5_b;
mov L0xf6ffd5aa r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5ac; PC = 0x70008 *)
mov L0xf6ffd5ac r6_b;
mov L0xf6ffd5ae r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5a0; PC = 0x70012 *)
mov L0xf6ffd5a0 r3_b;
mov L0xf6ffd5a2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b386; Value = 0x07fc052a; PC = 0x69772 *)
mov r11_b L0x5b386;
mov r11_t L0x5b388;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5b0; Value = 0xfcfc045f; PC = 0x69776 *)
mov r3_b L0xf6ffd5b0;
mov r3_t L0xf6ffd5b2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5b4; Value = 0xffd41c84; PC = 0x69778 *)
mov r4_b L0xf6ffd5b4;
mov r4_t L0xf6ffd5b6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5b8; Value = 0xf7aa022b; PC = 0x69780 *)
mov r5_b L0xf6ffd5b8;
mov r5_t L0xf6ffd5ba;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5bc; Value = 0x00041998; PC = 0x69782 *)
mov r6_b L0xf6ffd5bc;
mov r6_t L0xf6ffd5be;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5b4; PC = 0x70000 *)
mov L0xf6ffd5b4 r4_b;
mov L0xf6ffd5b6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5b8; PC = 0x70004 *)
mov L0xf6ffd5b8 r5_b;
mov L0xf6ffd5ba r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5bc; PC = 0x70008 *)
mov L0xf6ffd5bc r6_b;
mov L0xf6ffd5be r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5b0; PC = 0x70012 *)
mov L0xf6ffd5b0 r3_b;
mov L0xf6ffd5b2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b38a; Value = 0x01800748; PC = 0x69772 *)
mov r11_b L0x5b38a;
mov r11_t L0x5b38c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5c0; Value = 0xee700770; PC = 0x69776 *)
mov r3_b L0xf6ffd5c0;
mov r3_t L0xf6ffd5c2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5c4; Value = 0xf86e0aa9; PC = 0x69778 *)
mov r4_b L0xf6ffd5c4;
mov r4_t L0xf6ffd5c6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5c8; Value = 0xf0d20ee6; PC = 0x69780 *)
mov r5_b L0xf6ffd5c8;
mov r5_t L0xf6ffd5ca;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5cc; Value = 0xfe261277; PC = 0x69782 *)
mov r6_b L0xf6ffd5cc;
mov r6_t L0xf6ffd5ce;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5c4; PC = 0x70000 *)
mov L0xf6ffd5c4 r4_b;
mov L0xf6ffd5c6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5c8; PC = 0x70004 *)
mov L0xf6ffd5c8 r5_b;
mov L0xf6ffd5ca r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5cc; PC = 0x70008 *)
mov L0xf6ffd5cc r6_b;
mov L0xf6ffd5ce r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5c0; PC = 0x70012 *)
mov L0xf6ffd5c0 r3_b;
mov L0xf6ffd5c2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b38e; Value = 0x0c790842; PC = 0x69772 *)
mov r11_b L0x5b38e;
mov r11_t L0x5b390;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5d0; Value = 0xedc100fc; PC = 0x69776 *)
mov r3_b L0xf6ffd5d0;
mov r3_t L0xf6ffd5d2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5d4; Value = 0xedfd02e9; PC = 0x69778 *)
mov r4_b L0xf6ffd5d4;
mov r4_t L0xf6ffd5d6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5d8; Value = 0xf8c708a8; PC = 0x69780 *)
mov r5_b L0xf6ffd5d8;
mov r5_t L0xf6ffd5da;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5dc; Value = 0xf7a90a65; PC = 0x69782 *)
mov r6_b L0xf6ffd5dc;
mov r6_t L0xf6ffd5de;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5d4; PC = 0x70000 *)
mov L0xf6ffd5d4 r4_b;
mov L0xf6ffd5d6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5d8; PC = 0x70004 *)
mov L0xf6ffd5d8 r5_b;
mov L0xf6ffd5da r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5dc; PC = 0x70008 *)
mov L0xf6ffd5dc r6_b;
mov L0xf6ffd5de r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5d0; PC = 0x70012 *)
mov L0xf6ffd5d0 r3_b;
mov L0xf6ffd5d2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b392; Value = 0x07ca04c2; PC = 0x69772 *)
mov r11_b L0x5b392;
mov r11_t L0x5b394;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5e0; Value = 0xef2e009c; PC = 0x69776 *)
mov r3_b L0xf6ffd5e0;
mov r3_t L0xf6ffd5e2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5e4; Value = 0x0091f7c4; PC = 0x69778 *)
mov r4_b L0xf6ffd5e4;
mov r4_t L0xf6ffd5e6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5e8; Value = 0xe8ba0c98; PC = 0x69780 *)
mov r5_b L0xf6ffd5e8;
mov r5_t L0xf6ffd5ea;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5ec; Value = 0xfa29fd8a; PC = 0x69782 *)
mov r6_b L0xf6ffd5ec;
mov r6_t L0xf6ffd5ee;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5e4; PC = 0x70000 *)
mov L0xf6ffd5e4 r4_b;
mov L0xf6ffd5e6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5e8; PC = 0x70004 *)
mov L0xf6ffd5e8 r5_b;
mov L0xf6ffd5ea r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5ec; PC = 0x70008 *)
mov L0xf6ffd5ec r6_b;
mov L0xf6ffd5ee r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5e0; PC = 0x70012 *)
mov L0xf6ffd5e0 r3_b;
mov L0xf6ffd5e2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b396; Value = 0x00dc0997; PC = 0x69772 *)
mov r11_b L0x5b396;
mov r11_t L0x5b398;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd5f0; Value = 0xfb00ff6d; PC = 0x69776 *)
mov r3_b L0xf6ffd5f0;
mov r3_t L0xf6ffd5f2;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd5f4; Value = 0xfe3901f9; PC = 0x69778 *)
mov r4_b L0xf6ffd5f4;
mov r4_t L0xf6ffd5f6;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd5f8; Value = 0xef92ff29; PC = 0x69780 *)
mov r5_b L0xf6ffd5f8;
mov r5_t L0xf6ffd5fa;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd5fc; Value = 0xf62501f9; PC = 0x69782 *)
mov r6_b L0xf6ffd5fc;
mov r6_t L0xf6ffd5fe;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd5f4; PC = 0x70000 *)
mov L0xf6ffd5f4 r4_b;
mov L0xf6ffd5f6 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd5f8; PC = 0x70004 *)
mov L0xf6ffd5f8 r5_b;
mov L0xf6ffd5fa r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd5fc; PC = 0x70008 *)
mov L0xf6ffd5fc r6_b;
mov L0xf6ffd5fe r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd5f0; PC = 0x70012 *)
mov L0xf6ffd5f0 r3_b;
mov L0xf6ffd5f2 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b39a; Value = 0x0686085e; PC = 0x69772 *)
mov r11_b L0x5b39a;
mov r11_t L0x5b39c;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd600; Value = 0xf4c20685; PC = 0x69776 *)
mov r3_b L0xf6ffd600;
mov r3_t L0xf6ffd602;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd604; Value = 0xfd7d0a58; PC = 0x69778 *)
mov r4_b L0xf6ffd604;
mov r4_t L0xf6ffd606;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd608; Value = 0x002cfe2d; PC = 0x69780 *)
mov r5_b L0xf6ffd608;
mov r5_t L0xf6ffd60a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd60c; Value = 0x017d06c2; PC = 0x69782 *)
mov r6_b L0xf6ffd60c;
mov r6_t L0xf6ffd60e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd604; PC = 0x70000 *)
mov L0xf6ffd604 r4_b;
mov L0xf6ffd606 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd608; PC = 0x70004 *)
mov L0xf6ffd608 r5_b;
mov L0xf6ffd60a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd60c; PC = 0x70008 *)
mov L0xf6ffd60c r6_b;
mov L0xf6ffd60e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd600; PC = 0x70012 *)
mov L0xf6ffd600 r3_b;
mov L0xf6ffd602 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b39e; Value = 0x07070860; PC = 0x69772 *)
mov r11_b L0x5b39e;
mov r11_t L0x5b3a0;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd610; Value = 0x05e5069e; PC = 0x69776 *)
mov r3_b L0xf6ffd610;
mov r3_t L0xf6ffd612;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd614; Value = 0x0095001a; PC = 0x69778 *)
mov r4_b L0xf6ffd614;
mov r4_t L0xf6ffd616;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd618; Value = 0x037501f2; PC = 0x69780 *)
mov r5_b L0xf6ffd618;
mov r5_t L0xf6ffd61a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd61c; Value = 0x0577044c; PC = 0x69782 *)
mov r6_b L0xf6ffd61c;
mov r6_t L0xf6ffd61e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd614; PC = 0x70000 *)
mov L0xf6ffd614 r4_b;
mov L0xf6ffd616 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd618; PC = 0x70004 *)
mov L0xf6ffd618 r5_b;
mov L0xf6ffd61a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd61c; PC = 0x70008 *)
mov L0xf6ffd61c r6_b;
mov L0xf6ffd61e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd610; PC = 0x70012 *)
mov L0xf6ffd610 r3_b;
mov L0xf6ffd612 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3a2; Value = 0x031a0803; PC = 0x69772 *)
mov r11_b L0x5b3a2;
mov r11_t L0x5b3a4;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd620; Value = 0xfc980cdb; PC = 0x69776 *)
mov r3_b L0xf6ffd620;
mov r3_t L0xf6ffd622;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd624; Value = 0x09380750; PC = 0x69778 *)
mov r4_b L0xf6ffd624;
mov r4_t L0xf6ffd626;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd628; Value = 0x00720bbd; PC = 0x69780 *)
mov r5_b L0xf6ffd628;
mov r5_t L0xf6ffd62a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd62c; Value = 0x00f807d6; PC = 0x69782 *)
mov r6_b L0xf6ffd62c;
mov r6_t L0xf6ffd62e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd624; PC = 0x70000 *)
mov L0xf6ffd624 r4_b;
mov L0xf6ffd626 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd628; PC = 0x70004 *)
mov L0xf6ffd628 r5_b;
mov L0xf6ffd62a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd62c; PC = 0x70008 *)
mov L0xf6ffd62c r6_b;
mov L0xf6ffd62e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd620; PC = 0x70012 *)
mov L0xf6ffd620 r3_b;
mov L0xf6ffd622 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3a6; Value = 0x09ab071b; PC = 0x69772 *)
mov r11_b L0x5b3a6;
mov r11_t L0x5b3a8;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd630; Value = 0xfe62067c; PC = 0x69776 *)
mov r3_b L0xf6ffd630;
mov r3_t L0xf6ffd632;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd634; Value = 0x06050b67; PC = 0x69778 *)
mov r4_b L0xf6ffd634;
mov r4_t L0xf6ffd636;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd638; Value = 0xf6260586; PC = 0x69780 *)
mov r5_b L0xf6ffd638;
mov r5_t L0xf6ffd63a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd63c; Value = 0x0e8f0467; PC = 0x69782 *)
mov r6_b L0xf6ffd63c;
mov r6_t L0xf6ffd63e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd634; PC = 0x70000 *)
mov L0xf6ffd634 r4_b;
mov L0xf6ffd636 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd638; PC = 0x70004 *)
mov L0xf6ffd638 r5_b;
mov L0xf6ffd63a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd63c; PC = 0x70008 *)
mov L0xf6ffd63c r6_b;
mov L0xf6ffd63e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd630; PC = 0x70012 *)
mov L0xf6ffd630 r3_b;
mov L0xf6ffd632 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3aa; Value = 0x01de099b; PC = 0x69772 *)
mov r11_b L0x5b3aa;
mov r11_t L0x5b3ac;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd640; Value = 0x02a602b1; PC = 0x69776 *)
mov r3_b L0xf6ffd640;
mov r3_t L0xf6ffd642;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd644; Value = 0x018cfa38; PC = 0x69778 *)
mov r4_b L0xf6ffd644;
mov r4_t L0xf6ffd646;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd648; Value = 0x007efbcd; PC = 0x69780 *)
mov r5_b L0xf6ffd648;
mov r5_t L0xf6ffd64a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd64c; Value = 0x0814fb9e; PC = 0x69782 *)
mov r6_b L0xf6ffd64c;
mov r6_t L0xf6ffd64e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd644; PC = 0x70000 *)
mov L0xf6ffd644 r4_b;
mov L0xf6ffd646 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd648; PC = 0x70004 *)
mov L0xf6ffd648 r5_b;
mov L0xf6ffd64a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd64c; PC = 0x70008 *)
mov L0xf6ffd64c r6_b;
mov L0xf6ffd64e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd640; PC = 0x70012 *)
mov L0xf6ffd640 r3_b;
mov L0xf6ffd642 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3ae; Value = 0x0bcd0c95; PC = 0x69772 *)
mov r11_b L0x5b3ae;
mov r11_t L0x5b3b0;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd650; Value = 0x08800fe1; PC = 0x69776 *)
mov r3_b L0xf6ffd650;
mov r3_t L0xf6ffd652;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd654; Value = 0x0621f66f; PC = 0x69778 *)
mov r4_b L0xf6ffd654;
mov r4_t L0xf6ffd656;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd658; Value = 0xfc5e09c9; PC = 0x69780 *)
mov r5_b L0xf6ffd658;
mov r5_t L0xf6ffd65a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd65c; Value = 0x058ffa3d; PC = 0x69782 *)
mov r6_b L0xf6ffd65c;
mov r6_t L0xf6ffd65e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd654; PC = 0x70000 *)
mov L0xf6ffd654 r4_b;
mov L0xf6ffd656 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd658; PC = 0x70004 *)
mov L0xf6ffd658 r5_b;
mov L0xf6ffd65a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd65c; PC = 0x70008 *)
mov L0xf6ffd65c r6_b;
mov L0xf6ffd65e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd650; PC = 0x70012 *)
mov L0xf6ffd650 r3_b;
mov L0xf6ffd652 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3b2; Value = 0x03df03e4; PC = 0x69772 *)
mov r11_b L0x5b3b2;
mov r11_t L0x5b3b4;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd660; Value = 0x04900530; PC = 0x69776 *)
mov r3_b L0xf6ffd660;
mov r3_t L0xf6ffd662;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd664; Value = 0x08b20464; PC = 0x69778 *)
mov r4_b L0xf6ffd664;
mov r4_t L0xf6ffd666;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd668; Value = 0xf812116a; PC = 0x69780 *)
mov r5_b L0xf6ffd668;
mov r5_t L0xf6ffd66a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd66c; Value = 0xfe260434; PC = 0x69782 *)
mov r6_b L0xf6ffd66c;
mov r6_t L0xf6ffd66e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd664; PC = 0x70000 *)
mov L0xf6ffd664 r4_b;
mov L0xf6ffd666 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd668; PC = 0x70004 *)
mov L0xf6ffd668 r5_b;
mov L0xf6ffd66a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd66c; PC = 0x70008 *)
mov L0xf6ffd66c r6_b;
mov L0xf6ffd66e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd660; PC = 0x70012 *)
mov L0xf6ffd660 r3_b;
mov L0xf6ffd662 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3b6; Value = 0x074d03be; PC = 0x69772 *)
mov r11_b L0x5b3b6;
mov r11_t L0x5b3b8;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd670; Value = 0x024efc29; PC = 0x69776 *)
mov r3_b L0xf6ffd670;
mov r3_t L0xf6ffd672;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd674; Value = 0xfa4f0a24; PC = 0x69778 *)
mov r4_b L0xf6ffd674;
mov r4_t L0xf6ffd676;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd678; Value = 0x03aaffb1; PC = 0x69780 *)
mov r5_b L0xf6ffd678;
mov r5_t L0xf6ffd67a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd67c; Value = 0xf28f0c9e; PC = 0x69782 *)
mov r6_b L0xf6ffd67c;
mov r6_t L0xf6ffd67e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd674; PC = 0x70000 *)
mov L0xf6ffd674 r4_b;
mov L0xf6ffd676 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd678; PC = 0x70004 *)
mov L0xf6ffd678 r5_b;
mov L0xf6ffd67a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd67c; PC = 0x70008 *)
mov L0xf6ffd67c r6_b;
mov L0xf6ffd67e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd670; PC = 0x70012 *)
mov L0xf6ffd670 r3_b;
mov L0xf6ffd672 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* ldr.w	r11, [r1], #4                             #! EA = L0x5b3ba; Value = 0x065c05f2; PC = 0x69772 *)
mov r11_b L0x5b3ba;
mov r11_t L0x5b3bc;
(* ldr	r3, [r0, #0]                                #! EA = L0xf6ffd680; Value = 0xf696fee4; PC = 0x69776 *)
mov r3_b L0xf6ffd680;
mov r3_t L0xf6ffd682;
(* ldr	r4, [r0, #4]                                #! EA = L0xf6ffd684; Value = 0xf55b0180; PC = 0x69778 *)
mov r4_b L0xf6ffd684;
mov r4_t L0xf6ffd686;
(* ldr	r5, [r0, #8]                                #! EA = L0xf6ffd688; Value = 0x00020ab6; PC = 0x69780 *)
mov r5_b L0xf6ffd688;
mov r5_t L0xf6ffd68a;
(* ldr	r6, [r0, #12]                               #! EA = L0xf6ffd68c; Value = 0x011f0a8a; PC = 0x69782 *)
mov r6_b L0xf6ffd68c;
mov r6_t L0xf6ffd68e;
(* smulbb	r10, r4, r11                             #! PC = 0x69784 *)
vpc r4_bb@sint16 r4_b;
vpc r11_bb@sint16 r11_b;
smull r10_t r10_b r4_bb r11_bb;
(* smultb	r4, r4, r11                              #! PC = 0x69788 *)
vpc r4_tt@sint16 r4_t;
vpc r11_bb@sint16 r11_b;
smull r4_t r4_b r4_tt r11_bb;
(* smulbb	r9, r10, r12                             #! PC = 0x69792 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69796 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69800 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r4, r12                             #! PC = 0x69804 *)
vpc r4_bb@sint16 r4_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r4_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69808 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r4, r10                             #! PC = 0x69812 *)
vpc r4_bb@uint16 r4_b;
usub r10_b r4_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r4_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69816 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r4, r3, r9                               #! PC = 0x69820 *)
vpc r3_bb@uint16 r3_b;
usub r4_b r3_bb r9_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
usub r4_t r3_tt r9_tt;
(* uadd16	r3, r3, r9                               #! PC = 0x69824 *)
vpc r3_bb@uint16 r3_b;
uadd r3_b r3_bb r9_b;
vpc r3_tt@uint16 r3_t;
vpc r9_tt@uint16 r9_t;
uadd r3_t r3_tt r9_tt;
(* smulbt	r10, r6, r11                             #! PC = 0x69828 *)
vpc r6_bb@sint16 r6_b;
vpc r11_tt@sint16 r11_t;
smull r10_t r10_b r6_bb r11_tt;
(* smultt	r6, r6, r11                              #! PC = 0x69832 *)
vpc r6_tt@sint16 r6_t;
vpc r11_tt@sint16 r11_t;
smull r6_t r6_b r6_tt r11_tt;
(* smulbb	r9, r10, r12                             #! PC = 0x69836 *)
vpc r10_bb@sint16 r10_b;
vpc r12_bb@sint16 r12_b;
smull r9_t r9_b r10_bb r12_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69840 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* usub16	r9, r10, r9                              #! PC = 0x69844 *)
vpc r10_bb@uint16 r10_b;
usub r9_b r10_bb r9_b;
assert true && r9_b = 0@16;
assume r9_b = 0 && true;
vpc r10_tt@uint16 r10_t;
vpc r9_tt@uint16 r9_t;
usub r9_t r10_tt r9_tt;
(* smulbb	r10, r6, r12                             #! PC = 0x69848 *)
vpc r6_bb@sint16 r6_b;
vpc r12_bb@sint16 r12_b;
smull r10_t r10_b r6_bb r12_bb;
(* smulbb	r10, r10, lr                             #! PC = 0x69852 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* usub16	r10, r6, r10                             #! PC = 0x69856 *)
vpc r6_bb@uint16 r6_b;
usub r10_b r6_bb r10_b;
assert true && r10_b = 0@16;
assume r10_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r10_t r6_tt r10_tt;
(* pkhtb	r9, r10, r9, asr #16                      #! PC = 0x69860 *)
mov r9_t r10_t;
mov r9_b r9_t;
(* usub16	r6, r5, r9                               #! PC = 0x69864 *)
vpc r5_bb@uint16 r5_b;
usub r6_b r5_bb r9_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
usub r6_t r5_tt r9_tt;
(* uadd16	r5, r5, r9                               #! PC = 0x69868 *)
vpc r5_bb@uint16 r5_b;
uadd r5_b r5_bb r9_b;
vpc r5_tt@uint16 r5_t;
vpc r9_tt@uint16 r9_t;
uadd r5_t r5_tt r9_tt;
(* smulbt	r10, r3, r12                             #! PC = 0x69872 *)
vpc r3_bb@sint16 r3_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r3_bb r12_tt;
(* smultt	r9, r3, r12                              #! PC = 0x69876 *)
vpc r3_tt@sint16 r3_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r3_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69880 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69884 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69888 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69892 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69896 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r3, r3, r10                              #! PC = 0x69900 *)
vpc r3_bb@uint16 r3_b;
usub r3_b r3_bb r10_b;
assert true && r3_b = 0@16;
assume r3_b = 0 && true;
vpc r3_tt@uint16 r3_t;
vpc r10_tt@uint16 r10_t;
usub r3_t r3_tt r10_tt;
(* smulbt	r10, r4, r12                             #! PC = 0x69904 *)
vpc r4_bb@sint16 r4_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r4_bb r12_tt;
(* smultt	r9, r4, r12                              #! PC = 0x69908 *)
vpc r4_tt@sint16 r4_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r4_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69912 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69916 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69920 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69924 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69928 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r4, r4, r10                              #! PC = 0x69932 *)
vpc r4_bb@uint16 r4_b;
usub r4_b r4_bb r10_b;
assert true && r4_b = 0@16;
assume r4_b = 0 && true;
vpc r4_tt@uint16 r4_t;
vpc r10_tt@uint16 r10_t;
usub r4_t r4_tt r10_tt;
(* smulbt	r10, r5, r12                             #! PC = 0x69936 *)
vpc r5_bb@sint16 r5_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r5_bb r12_tt;
(* smultt	r9, r5, r12                              #! PC = 0x69940 *)
vpc r5_tt@sint16 r5_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r5_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69944 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69948 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69952 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69956 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69960 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r5, r5, r10                              #! PC = 0x69964 *)
vpc r5_bb@uint16 r5_b;
usub r5_b r5_bb r10_b;
assert true && r5_b = 0@16;
assume r5_b = 0 && true;
vpc r5_tt@uint16 r5_t;
vpc r10_tt@uint16 r10_t;
usub r5_t r5_tt r10_tt;
(* smulbt	r10, r6, r12                             #! PC = 0x69968 *)
vpc r6_bb@sint16 r6_b;
vpc r12_tt@sint16 r12_t;
smull r10_t r10_b r6_bb r12_tt;
(* smultt	r9, r6, r12                              #! PC = 0x69972 *)
vpc r6_tt@sint16 r6_t;
vpc r12_tt@sint16 r12_t;
smull r9_t r9_b r6_tt r12_tt;
(* mov.w	r10, r10, asr #26                         #! PC = 0x69976 *)
mov r10_t 0@sint16;
ssplit r10_b dontcare r10_t 10;
(* mov.w	r9, r9, asr #26                           #! PC = 0x69980 *)
mov r9_t 0@sint16;
ssplit r9_b dontcare r9_t 10;
(* smulbb	r10, r10, lr                             #! PC = 0x69984 *)
vpc r10_bb@sint16 r10_b;
vpc lr_bb@sint16 lr_b;
smull r10_t r10_b r10_bb lr_bb;
(* smulbb	r9, r9, lr                               #! PC = 0x69988 *)
vpc r9_bb@sint16 r9_b;
vpc lr_bb@sint16 lr_b;
smull r9_t r9_b r9_bb lr_bb;
(* pkhbt	r10, r10, r9, lsl #16                     #! PC = 0x69992 *)
mov r10_t r10_b;
mov r10_b r9_b;
(* usub16	r6, r6, r10                              #! PC = 0x69996 *)
vpc r6_bb@uint16 r6_b;
usub r6_b r6_bb r10_b;
assert true && r6_b = 0@16;
assume r6_b = 0 && true;
vpc r6_tt@uint16 r6_t;
vpc r10_tt@uint16 r10_t;
usub r6_t r6_tt r10_tt;
(* str.w	r4, [r0, #4]                              #! EA = L0xf6ffd684; PC = 0x70000 *)
mov L0xf6ffd684 r4_b;
mov L0xf6ffd686 r4_t;
(* str.w	r5, [r0, #8]                              #! EA = L0xf6ffd688; PC = 0x70004 *)
mov L0xf6ffd688 r5_b;
mov L0xf6ffd68a r5_t;
(* str.w	r6, [r0, #12]                             #! EA = L0xf6ffd68c; PC = 0x70008 *)
mov L0xf6ffd68c r6_b;
mov L0xf6ffd68e r6_t;
(* str.w	r3, [r0], #16                             #! EA = L0xf6ffd680; PC = 0x70012 *)
mov L0xf6ffd680 r3_b;
mov L0xf6ffd682 r3_t;
(* subs.w	r2, r2, #1                               #! PC = 0x70016 *)
usubs carry r2_b r2_b 1@uint16;
(* #bne.w	0x1108c <ntt_fast+1628>                  #! PC = 0x70020 *)
#bne.w	0x1108c <ntt_fast+1628>                  #! 0x70020 = 0x70020;
(* #ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}#! EA = L0xf6ffcfe4; Value = 0x000109c1; PC = 0x70024 *)
#ldmia.w	sp!, {%%r4, %%r5, %%r6, %%r7, %%r8, %%r9, %%r10, %%r11, pc}#! L0xf6ffcfe4 = L0xf6ffcfe4; 0x000109c1 = 0x000109c1; 0x70024 = 0x70024;

{
  true
  &&
  true
}

