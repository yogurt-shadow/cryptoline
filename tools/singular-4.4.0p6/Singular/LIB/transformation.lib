//////////////////////////////////////////////////////////////////////////////
version="version transformation.lib 4.4.0.3 Jun_2024 "; // $Id: 741274c2fb88236480874d863f71a96e8bd26cf9 $
category="Commutative Algebra";
info="
LIBRARY: transWithPrecision.lib   The image of a transformation given up to a specified degree
AUTHORS:               Janko Boehm,      email: boehm@mathematik.uni-kl.de
                       Magdaleen Marais, email: msmarais@sun.ac.za
                       Alexander Mathis

OVERVIEW:

The image of a map defined by a matrix is given up to a specified degree. This tool can be used, particularly in Singularity theory, working with right equivalence.

It is known that a  nondegenerate germ which has finite determinacy d is right equivalent to its d-jet. Therefore, in these cases, it is often enough to know the image of a transformation up to degree d.

KEYWORDS:
right equivalence; transformation; precision

PROCEDURES:
 transWithPrecision(f,T,prec);  the image of a transformation of a polynomial defined by a matrix up to a specified degree
";

LIB "arr.lib";

proc transWithPrecision(poly f, matrix T, int precision)
"USAGE: transWithPrecision(f,T,d); f poly, T 1xn matrix, where n is the number of variables of the basering, d int
RETURN: the image of f under the transformation defined by T up to degree d
EXAMPLE: example transWithPrecision, shows an example"
{
  // initialisation of basic variables
  int n=nvars(basering);
  int maximaldegree;
  intvec v;
  int j;
  f=jet(f, precision);
  for (int i=1; i<=size(T); i++){T[1,i]=jet(T[1,i], precision);}
  // computing a matrix that has the monomials of f in its first row and their coefficients in the second row
  matrix termsandcoeffs=coef(f, monomial(intvec(1:n)));
  // computing the powers of transformations of the variables
  intvec e=1;
  int maxsingledegree=deg(f, e);
  for (i=2;i<=n;i++)
  {
    e[i-1]=0;
    e[i]=1;
    if (deg(f, e)>maxsingledegree) {maxsingledegree=deg(f, e);}
  }
  matrix P[maxsingledegree+1][n];
  for (i=1;i<=n;i++)
  {
    e=0;
    e[i]=1;
    maximaldegree=deg(f, e);
    if (maximaldegree>0)
    {
      e=0;
      e[maximaldegree]=precision-mindeg(f/var(i)^maximaldegree);
      v=0;
      v[i]=1;
      for (j=maximaldegree-1;j>=1;j--)
      {
        if (jet(f-jet(f, j-1, v), j, v) == 0)
        {
          e[j]=e[j+1]-1;
        }
        else
        {
          e[j]=max(e[j+1]-1, precision-mindeg(jet(f-jet(f, j-1, v), j, v))+j);
        }
      }
      P[1, i]=1;
      P[2, i]=jet(T[1,i], e[1]);
      for (j=3;j<=maximaldegree+1;j++)
      {
        P[j, i]=jet(jet(T[1,i], e[j-2]-j+3)*P[j-1, i], e[j-1]);
      }
    }
    else
    {
      P[1, i]=1;
    }
  }
  // put together the final polynomial after transforming
  poly g;
  poly h;
  for (i=1;i<=size(f);i++)
  {
   // print(string(i)+" "+string(size(f)));
    e=leadexp(termsandcoeffs[1, i]);
    h=1;
    for (j=1;j<=n;j++)
    {
      if (j<n)
      {
        h=jet(h*jet(P[e[j]+1,j], precision+e[j]-sum(e)),precision-sum(intvec(e[j+1..n])));
      }
      else
      {
        h=jet(h*jet(P[e[j]+1,j], precision+e[j]-sum(e)),precision);
      }
    }
    g=g+termsandcoeffs[2, i]*h;
  }
  return(g);
}
example
{
 "EXAMPLE:"; echo=2;
 ring R=0,(x,y,z),ds;
 poly f = 2*x^2+5*x*y+7*x^7;
 matrix T[1][3]=x+2*y+y^2,y+x^2*y,z+y^2+z^2*x;
 transWithPrecision(f,T,7);
}



