///////////////////////////////////////////////////////////////////////////////
version="version combinat.lib 4.1.2.0 Feb_2019 "; // $Id: d7f7504d4bcdfc7dd5ed457b032d4fbf920a5530 $
category="Miscellaneous";
info="
LIBRARY:  combinat.lib    Some useful functions

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de

OVERVIEW:

Some useful basic functions from combinatorics.

KEYWORDS:
permutations, sum, max, min

PROCEDURES:
intersectLists(list,list)     returns a list of elements which are in both lists (no duplicates)
sublists(list)                all sublists
member(def,list)              test whether an element is a member of a list
";

proc sublists(list L)
"USAGE:  sublists(L); L list@*
ASSUME:  L is a list@*
RETURN:  list of all sublists of L.
KEYWORDS: power set
EXAMPLE:  example sublists; shows an example
"
{
  if (size(L)==1){return(list(list(),L));}
  list L1 = L[1..size(L)-1];
  list S1 = sublists(L1);
  list S2;
  for (int i = 1;i<=size(S1);i++)
  {
    S2[i]=S1[i]+list(L[size(L)]);
  }
  return(S1+S2);
}
example
{ "EXAMPLE:"; echo=2;
  list L = 1,2,3,4,5;
  sublists(L);
}

proc intersectLists(list L, list M)
"USAGE:  intersectLists(L,M); L list, M list@*
RETURN:  list, containing all elements of L which are elements of M
THEORY:  we require the elements of the lists to have a compare operator ==.
KEYWORDS: lists
EXAMPLE:  example intersectLists; shows an example
"
{
  list I;
  int jj=1;
  for (int j=1; j<=size(L); j++)
  {
     if (member(L[j],M)){
        if (not member(L[j],I))
        {
          I[jj]=L[j];jj++;
        }
     }
  }
  return(I);
}
example
{ "EXAMPLE:"; echo=2;
  intersectLists(list(1,1,2,2,3),list(2,3,3,4));
  intersectLists(list(1,1,2,2,3),list(1,1,2,2,3));
}


proc member(def e, list L)
"USAGE:  member(e,L); e def, L list@*
RETURN:  1 if e is an element of L, 0 otherwise
THEORY:  we require the elements involved to have a compare operator ==.
KEYWORDS: lists, elements
EXAMPLE:  example member; shows an example
"
{
  for (int j=1; j<=size(L); j++)
  {
    if (L[j]==e){ return(1); }
  }
  return(0);
}
example
{ "EXAMPLE:"; echo=2;
  member(1,list(1,4,5));
}
