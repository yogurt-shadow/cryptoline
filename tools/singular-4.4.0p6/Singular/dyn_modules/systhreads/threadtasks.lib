// task structure:
// [1] = worker command
// [2] = function
// [3] = args
// [4] = worker id
// [5] = task id
// [6] = state
// [7] = (optional) result

proc mod_init() {
  LIB "systhreads.lib";
  if (mainThread()) {
    newstruct("task",
      "int id, string func, list args, int worker, int started, int done, def result");
  }
  int numWorkers = 0;
  int initialized = 0;
  int workerID = 0;
  int taskID = 0;
  list localTasks;
  export(workerID);
  export(taskID);
  export(localTasks);
  export(numWorkers);
  export(initialized);
}

proc initChannels(int nWorkers) {
  list toWorker;
  list fromWorker;
  channel taskQueue = makeChannel("threadtasks:taskQueue");
  for (int i = 0; i <= nWorkers; i++) {
    toWorker[i+1] = makeChannel("threadtasks:toWorker#" + string(i));
    fromWorker[i+1] = makeChannel("threadtasks:fromWorker#" + string(i));
  }
  export(taskQueue);
  export(toWorker);
  export(fromWorker);
}

static proc callVarargs(string func, list #) {
  int n = size(#);
  string exec = "def result = " + func + "(";
  for (int i = 1; i <= n; i++) {
    if (i == 1) { exec = exec + "#[1]"; }
    else { exec = exec + ",#[" + string(i) + "]"; }
  }
  exec = exec + ")";
  execute(exec);
  return(result);
}

proc startWorker(int id) {
  list jobdata;
  int jobtype;
  string func;
  list args;
  int source;
  int remote_id;
  def result;
  workerID = id;
  while (1) {
    jobdata = receiveChannel(taskQueue);
    jobtype = jobdata[1];
    if (jobtype == 0) {
      // execute task
      func = jobdata[2];
      args = jobdata[3];
      source = jobdata[4];
      remote_id = jobdata[5];
      result = callVarargs(func, args);
      sendChannel(toWorker[source+1], list(remote_id, result));
    } else {
      // shutdown
      return ();
    }
  }
}

proc createTaskSystem(int nworkers) {
  if (!mainThread()) {
    ERROR("can only create task system from main thread");
  }
  /*
  if (initialized) {
    ERROR("task system is already initialized");
  }
  */
  thread worker;
  initialized = 1;
  initChannels(nworkers);
  numWorkers = nworkers;
  list workerThreads;
  for (int i = 1; i <= nworkers; i++) {
    worker = createThread();
    workerThreads[i] = worker;
    threadLoadLib(worker, "threadtasks.lib");
    threadExec(worker, quote(initChannels(eval(nworkers))));
  }
  export(workerThreads);
}

proc initWorkersFromLib(string libname) {
  for (int i = 1; i <= numWorkers; i++) {
    threadLoadLib(workerThreads[i], libname);
  }
}

proc initWorkersFromFile(string file) {
  for (int i = 1; i <= numWorkers; i++) {
    threadExecFile(workerThreads[i], file);
  }
}

proc initWorkersFromString(string str) {
  for (int i = 1; i <= numWorkers; i++) {
    threadExecString(workerThreads[i], str);
  }
}

proc startTaskSystem() {
  for (int i = 1; i <= numWorkers; i++) {
    threadExec(workerThreads[i], quote(startWorker(eval(i))));
  }
}

proc runTask(string func, list #) {
  taskID++;
  list t = 0, func, #, workerID, taskID, 0;
  sendChannel(taskQueue, t);
  task ts;
  ts.func = func;
  ts.args = #;
  ts.worker = workerID;
  ts.id = taskID;
  ts.started = 1;
  ts.done = 0;
  localTasks[taskID] = ts;
  return(ts);
}

proc createTask(string func, list #) {
  task ts;
  taskID++;
  ts.func = func;
  ts.args = #;
  ts.worker = workerID;
  ts.id = taskID;
  ts.started = 0;
  ts.done = 0;
  localTasks[taskID] = ts;
  return(ts);
}

proc startTask(alias task t) {
  if (!localTasks[t.id].started) {
    sendChannel(taskQueue, list(0, func, t.args, t.worker, t.id, t.done));
    localTasks[t.id].started = 1;
  }
}

proc startTasks(list #) {
  for (int i = 1; i <= size(#); i++) {
    startTask(#[i]);
  }
}

proc getResult(task t) {
  if (!localTasks[t.id].done) {
    waitTask(t);
  }
  return(localTasks[t.id].result);
}

proc getState(task t) {
  int tid = t.id;
  if (localTasks[tid].done) {
    return "completed";
  }
  if (localTasks[tid].started) {
    return "started";
  }
  return "created";
}

proc getCommand(alias task t) {
  return(t.func);
}

static proc handleInit(alias list request) {
  string kind = request[2];
  string arg = request[3];
  if (kind == "lib") {
    load(arg, "with");
  } else if (kind == "file") {
    execute(read(arg));
  } else if (kind == "string") {
    execute(arg);
  }
}

static proc pollIncoming() {
  list incoming;
  int tid;
  incoming = receiveChannel(toWorker[workerID+1]);
  tid = incoming[1];
  if (tid > 0) {
    localTasks[tid].done = 1;
    localTasks[tid].result = incoming[2];
  } else {
    handleInit(incoming);
  }
}

proc waitTasks(list T, int n) {
  int i, fin, k;
  list result;
  while (1) {
    fin = 0;
    for (i = 1; i <= size(T); i++) {
      if (localTasks[T[i].id].done) {
        fin++;
      }
    }
    if (fin >= n) { break; }
    pollIncoming();
  }
  k = 1;
  for (i = 1; i <= size(T); i++) {
    if (localTasks[T[i].id].done) {
      result[k] = i;
      k++;
    }
  }
  return (result);
}

proc waitTask(task t) {
  int id = t.id;
  while (1) {
    if (localTasks[id].done) { return (); }
    pollIncoming();
  }
}

proc waitAllTasks(list tasks) {
  for (int i = 1; i <= size(tasks); i++) {
    waitTask(tasks[i]);
  }
}

// vim: set filetype=singular
