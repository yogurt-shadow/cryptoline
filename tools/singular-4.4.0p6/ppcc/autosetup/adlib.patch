diff -cr a/autosetup/autosetup-find-tclsh b/autosetup/autosetup-find-tclsh
*** a/autosetup/autosetup-find-tclsh	2019-02-02 03:13:40.000000000 +0100
--- b/autosetup/autosetup-find-tclsh	2019-02-02 03:11:58.000000000 +0100
***************
*** 5,15 ****
  d=`dirname "$0"`
  { "$d/jimsh0" "$d/autosetup-test-tclsh"; } 2>/dev/null && exit 0
  PATH="$PATH:$d"; export PATH
! for tclsh in $autosetup_tclsh jimsh tclsh tclsh8.5 tclsh8.6; do
! 	{ $tclsh "$d/autosetup-test-tclsh"; } 2>/dev/null && exit 0
! done
! echo 1>&2 "No installed jimsh or tclsh, building local bootstrap jimsh0"
! for cc in ${CC_FOR_BUILD:-cc} gcc; do
  	{ $cc -o "$d/jimsh0" "$d/jimsh0.c"; } 2>/dev/null || continue
  	"$d/jimsh0" "$d/autosetup-test-tclsh" && exit 0
  done
--- 5,12 ----
  d=`dirname "$0"`
  { "$d/jimsh0" "$d/autosetup-test-tclsh"; } 2>/dev/null && exit 0
  PATH="$PATH:$d"; export PATH
! echo "Bootstrapping standalone Tcl interpreter" 1>&2
! for cc in ${CC_FOR_BUILD} gcc clang cc; do
  	{ $cc -o "$d/jimsh0" "$d/jimsh0.c"; } 2>/dev/null || continue
  	"$d/jimsh0" "$d/autosetup-test-tclsh" && exit 0
  done
diff -cr a/autosetup/cc.tcl b/autosetup/cc.tcl
*** a/autosetup/cc.tcl	2019-02-02 03:13:40.000000000 +0100
--- b/autosetup/cc.tcl	2019-02-02 03:11:58.000000000 +0100
***************
*** 262,276 ****
  #
  proc cc-check-tools {args} {
  	foreach tool $args {
  		set TOOL [string toupper $tool]
  		set exe [get-env $TOOL [get-define cross]$tool]
  		if {[find-executable {*}$exe]} {
  			define $TOOL $exe
  			continue
  		}
  		if {[find-executable {*}$tool]} {
- 			msg-result "Warning: Failed to find $exe, falling back to $tool which may be incorrect"
  			define $TOOL $tool
  			continue
  		}
  		user-error "Failed to find $exe"
--- 262,279 ----
  #
  proc cc-check-tools {args} {
  	foreach tool $args {
+ 		msg-checking "Checking for $tool..."
  		set TOOL [string toupper $tool]
  		set exe [get-env $TOOL [get-define cross]$tool]
  		if {[find-executable {*}$exe]} {
  			define $TOOL $exe
+ 			msg-result $exe
  			continue
  		}
  		if {[find-executable {*}$tool]} {
  			define $TOOL $tool
+ 			msg-result $tool
+ 			msg-result "Warning: Failed to find $exe, falling back to $tool which may be incorrect"
  			continue
  		}
  		user-error "Failed to find $exe"
***************
*** 505,511 ****

  	# Build the command line
  	set cmdline {}
- 	lappend cmdline {*}[get-define CCACHE]
  	switch -exact -- $opts(-lang) {
  		c++ {
  			lappend cmdline {*}[get-define CXX] {*}[get-define CXXFLAGS]
--- 508,513 ----
***************
*** 659,665 ****
  }

  # Initialise some values from the environment or commandline or default settings
! foreach i {LDFLAGS LIBS CPPFLAGS LINKFLAGS {CFLAGS "-g -O2"}} {
  	lassign $i var default
  	define $var [get-env $var $default]
  }
--- 661,667 ----
  }

  # Initialise some values from the environment or commandline or default settings
! foreach i {LDFLAGS LIBS CPPFLAGS LINKFLAGS CFLAGS} {
  	lassign $i var default
  	define $var [get-env $var $default]
  }
***************
*** 669,675 ****
  	set try [list [get-env CC ""]]
  } else {
  	# Try some reasonable options
! 	set try [list [get-define cross]cc [get-define cross]gcc]
  }
  define CC [find-an-executable {*}$try]
  if {[get-define CC] eq ""} {
--- 671,677 ----
  	set try [list [get-env CC ""]]
  } else {
  	# Try some reasonable options
! 	set try [list [get-define cross]gcc [get-define cross]clang [get-define cross]cc]
  }
  define CC [find-an-executable {*}$try]
  if {[get-define CC] eq ""} {
***************
*** 683,696 ****
  if {[env-is-set CXX]} {
  	define CXX [find-an-executable -required [get-env CXX ""]]
  } else {
! 	define CXX [find-an-executable [get-define cross]c++ [get-define cross]g++ false]
  }

  # CXXFLAGS default to CFLAGS if not specified
  define CXXFLAGS [get-env CXXFLAGS [get-define CFLAGS]]

  # May need a CC_FOR_BUILD, so look for one
! define CC_FOR_BUILD [find-an-executable [get-env CC_FOR_BUILD ""] cc gcc false]

  if {[get-define CC] eq ""} {
  	user-error "Could not find a C compiler. Tried: [join $try ", "]"
--- 685,698 ----
  if {[env-is-set CXX]} {
  	define CXX [find-an-executable -required [get-env CXX ""]]
  } else {
! 	define CXX [find-an-executable [get-define cross]g++ [get-define cross]clang++ [get-define cross]c++ false]
  }

  # CXXFLAGS default to CFLAGS if not specified
  define CXXFLAGS [get-env CXXFLAGS [get-define CFLAGS]]

  # May need a CC_FOR_BUILD, so look for one
! define CC_FOR_BUILD [find-an-executable [get-env CC_FOR_BUILD ""] gcc clang cc false]

  if {[get-define CC] eq ""} {
  	user-error "Could not find a C compiler. Tried: [join $try ", "]"
***************
*** 711,719 ****
  cc-store-settings {-cflags {} -includes {} -declare {} -link 0 -lang c -libs {} -code {} -nooutput 0}
  set autosetup(cc-include-deps) {}

! msg-result "C compiler...[get-define CCACHE] [get-define CC] [get-define CFLAGS]"
  if {[get-define CXX] ne "false"} {
! 	msg-result "C++ compiler...[get-define CCACHE] [get-define CXX] [get-define CXXFLAGS]"
  }
  msg-result "Build C compiler...[get-define CC_FOR_BUILD]"

--- 713,721 ----
  cc-store-settings {-cflags {} -includes {} -declare {} -link 0 -lang c -libs {} -code {} -nooutput 0}
  set autosetup(cc-include-deps) {}

! msg-result "C compiler...[get-define CC] [get-define CFLAGS]"
  if {[get-define CXX] ne "false"} {
! 	msg-result "C++ compiler...[get-define CXX] [get-define CXXFLAGS]"
  }
  msg-result "Build C compiler...[get-define CC_FOR_BUILD]"

