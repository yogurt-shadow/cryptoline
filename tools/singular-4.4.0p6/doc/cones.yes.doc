@comment -*-texinfo-*-
@comment this file contains the cone/fan definitions

@c -------------------------------------------------------------------
@node cone, fan, User defined types, Data types
@section cone
@cindex cone

In order to use convex objects in Singular, Singular uses gfanlib,
a C++ library for convex geometry by Anders N. Jensen.
Please check the readme file for installation instructions.
The library @ref{gfan_lib} provides this C++ library and an interface to it.

In the finite dimensional real vector space R^n, a convex rational polyhedral
cone, in short ``cone'', is the convex set generated by finitely many half-lines,
which in turn are generated by rational, and hence integer, points. It may or may not
contain whole subspace of R^n (e.g. entire lines). The biggest subspace contained in
a cone is called ``lineality space''. Modulo its lineality space, each cone is
generated by a distinct minimal set of half lines, which are referred to as
``rays''. Alternatively, a cone can be represented as a set of points satisfying
a system homogeneous rational, and hence integer, linear inequalities and equations.
These two characterizations of cones are the two main ways of defining cones in
Singular (@pxref{coneViaPoints}, @pxref{coneViaInequalities}).

@smallexample
LIB"gfan.lib";
cone c;                             // ambient dim 0, no equations,
                                    // no inequalities
cone c = 17;                        // ambient dim 17, no equations,
                                    // no inequalities
@end smallexample

See @ref{gfan_lib}.
@c --------------------------------------------------------------------------------
@node fan, polytope, cone, Data types
@section fan
@cindex fan

In order to use convex objects in Singular, Singular uses gfanlib,
a C++ library for convex geometry by Anders N. Jensen.
Please check the readme file for installation instructions.
The library @ref{gfan_lib} provides this C++ library and an interface to it.

A polyhedral fan is a collection of cones closed under taking intersections and
faces.

@smallexample
  fan f;                              // ambient dim 0, no cones, lineality
                                      // space = ambient space
  fan f = emptyFan(int n);            // ambient dim = n, no cones,
                                      // symmetry subgroup = <e>
  fan f = n;                          // synonymous convenience method for
                                      // 'fan f = emptyFan(n)'
  fan f = emptyFan(
                 optional intmat G);  // symmetry group generated by rows of
                                      // G; ambient dim = number of columns
                                      // of G
            // Here a row r = r_1, ...r_n represents the permutation
            // which takes i to r_i. SINGULAR will check for the validity
            // of the provided rows, i.e. whether @{r_1,...,r_n@} = @{1,...,n@}
  fan f = fullFan(int n);             // ambient dim = n, the fan consists of
                                      // one cone which equals the ambient
                                      // space, symmetry subgroup = <e>
  fan f = fullFan(
                 optional intmat G);  // symmetry group generated by rows of
                                      // G; ambient dim = number of columns
                                      // of G; the fan consists of one cone
                                      // which equals the ambient space
@end smallexample

See also @ref{gfan_lib}.
@c --------------------------------------------------------------------
@node polytope, pyobject, fan, Data types
@section polytope
@cindex polytope

In order to use convex objects in Singular, Singular uses gfanlib,
a C++ library for convex geometry by Anders N. Jensen.
Please check the readme file for installation instructions.
The library @ref{gfan_lib} provides this C++ library and an interface to it.

In R^n, a rational convex polytope (in short ``polytope'') is a set of points
satisfying a system rational, and hence integer, linear inequalities and equations.
It is internally realised as a cone in R^(n+1) intersected with the hyperplane,
in which the first coordinate equals 1.

See @ref{gfan_lib}.
@c --------------------------------------------------------------------
